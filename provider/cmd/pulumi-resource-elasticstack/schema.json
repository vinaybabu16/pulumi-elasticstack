{
    "name": "elasticstack",
    "description": "A Pulumi package for creating and managing elasticstack cloud resources.",
    "keywords": [
        "pulumi",
        "elasticstack",
        "category/cloud"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`elasticstack` Terraform Provider](https://github.com/vinaybabu16/terraform-provider-elasticstack).",
    "repository": "https://github.com/pulumi/pulumi-elasticstack",
    "publisher": "Pulumi",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "elasticsearch": {
                "$ref": "#/types/elasticstack:config/elasticsearch:elasticsearch",
                "description": "Default Elasticsearch connection configuration block.\n"
            }
        }
    },
    "types": {
        "elasticstack:config/elasticsearch:elasticsearch": {
            "properties": {
                "caFile": {
                    "type": "string"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "insecure": {
                    "type": "boolean"
                },
                "password": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchClusterSettingsElasticsearchConnection:ElasticsearchClusterSettingsElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchClusterSettingsPersistent:ElasticsearchClusterSettingsPersistent": {
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsPersistentSetting:ElasticsearchClusterSettingsPersistentSetting"
                    },
                    "description": "Defines the setting in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "settings"
            ]
        },
        "elasticstack:index/ElasticsearchClusterSettingsPersistentSetting:ElasticsearchClusterSettingsPersistentSetting": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ElasticsearchClusterSettingsTransient:ElasticsearchClusterSettingsTransient": {
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsTransientSetting:ElasticsearchClusterSettingsTransientSetting"
                    },
                    "description": "Defines the setting in the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "settings"
            ]
        },
        "elasticstack:index/ElasticsearchClusterSettingsTransientSetting:ElasticsearchClusterSettingsTransientSetting": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "valueLists": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ElasticsearchComponentTemplateElasticsearchConnection:ElasticsearchComponentTemplateElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchComponentTemplateTemplate:ElasticsearchComponentTemplateTemplate": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateTemplateAlias:ElasticsearchComponentTemplateTemplateAlias"
                    },
                    "description": "Alias to add.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "string",
                    "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchComponentTemplateTemplateAlias:ElasticsearchComponentTemplateTemplateAlias": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWriteIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the component template to create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routing": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ElasticsearchDataStreamElasticsearchConnection:ElasticsearchDataStreamElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchDataStreamIndex:ElasticsearchDataStreamIndex": {
            "properties": {
                "indexName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexUuid": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "indexName",
                        "indexUuid"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexAlias:ElasticsearchIndexAlias": {
            "properties": {
                "filter": {
                    "type": "string",
                    "description": "Query used to limit documents the alias can access.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexRouting": {
                    "type": "string",
                    "description": "Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHidden": {
                    "type": "boolean",
                    "description": "If true, the alias is hidden.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWriteIndex": {
                    "type": "boolean",
                    "description": "If true, the index is the write index for the alias.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Index alias name.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routing": {
                    "type": "string",
                    "description": "Value used to route indexing and search operations to a specific shard.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchRouting": {
                    "type": "string",
                    "description": "Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ElasticsearchIndexElasticsearchConnection:ElasticsearchIndexElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleCold:ElasticsearchIndexLifecycleCold": {
            "properties": {
                "allocate": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdAllocate:ElasticsearchIndexLifecycleColdAllocate",
                    "description": "Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "freeze": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdFreeze:ElasticsearchIndexLifecycleColdFreeze",
                    "description": "Freeze the index to minimize its memory footprint.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migrate": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdMigrate:ElasticsearchIndexLifecycleColdMigrate",
                    "description": "Moves the index to the data tier that corresponds to the current phase by updating the \"index.routing.allocation.include.*tier*preference\" index setting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdReadonly:ElasticsearchIndexLifecycleColdReadonly",
                    "description": "Makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchableSnapshot": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdSearchableSnapshot:ElasticsearchIndexLifecycleColdSearchableSnapshot",
                    "description": "Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setPriority": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdSetPriority:ElasticsearchIndexLifecycleColdSetPriority",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unfollow": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleColdUnfollow:ElasticsearchIndexLifecycleColdUnfollow",
                    "description": "Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdAllocate:ElasticsearchIndexLifecycleColdAllocate": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "include": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfReplicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "exclude",
                        "include",
                        "require"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdFreeze:ElasticsearchIndexLifecycleColdFreeze": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdMigrate:ElasticsearchIndexLifecycleColdMigrate": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdReadonly:ElasticsearchIndexLifecycleColdReadonly": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdSearchableSnapshot:ElasticsearchIndexLifecycleColdSearchableSnapshot": {
            "properties": {
                "forceMergeIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotRepository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "snapshotRepository"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdSetPriority:ElasticsearchIndexLifecycleColdSetPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleColdUnfollow:ElasticsearchIndexLifecycleColdUnfollow": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleDelete:ElasticsearchIndexLifecycleDelete": {
            "properties": {
                "delete": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleDeleteDelete:ElasticsearchIndexLifecycleDeleteDelete",
                    "description": "Permanently removes the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "waitForSnapshot": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleDeleteWaitForSnapshot:ElasticsearchIndexLifecycleDeleteWaitForSnapshot",
                    "description": "Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleDeleteDelete:ElasticsearchIndexLifecycleDeleteDelete": {
            "properties": {
                "deleteSearchableSnapshot": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleDeleteWaitForSnapshot:ElasticsearchIndexLifecycleDeleteWaitForSnapshot": {
            "properties": {
                "policy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "policy"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleElasticsearchConnection:ElasticsearchIndexLifecycleElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleFrozen:ElasticsearchIndexLifecycleFrozen": {
            "properties": {
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchableSnapshot": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleFrozenSearchableSnapshot:ElasticsearchIndexLifecycleFrozenSearchableSnapshot",
                    "description": "Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleFrozenSearchableSnapshot:ElasticsearchIndexLifecycleFrozenSearchableSnapshot": {
            "properties": {
                "forceMergeIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotRepository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "snapshotRepository"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHot:ElasticsearchIndexLifecycleHot": {
            "properties": {
                "forcemerge": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotForcemerge:ElasticsearchIndexLifecycleHotForcemerge",
                    "description": "Force merges the index into the specified maximum number of segments. This action makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotReadonly:ElasticsearchIndexLifecycleHotReadonly",
                    "description": "Makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rollover": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotRollover:ElasticsearchIndexLifecycleHotRollover",
                    "description": "Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchableSnapshot": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotSearchableSnapshot:ElasticsearchIndexLifecycleHotSearchableSnapshot",
                    "description": "Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setPriority": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotSetPriority:ElasticsearchIndexLifecycleHotSetPriority",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shrink": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotShrink:ElasticsearchIndexLifecycleHotShrink",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unfollow": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHotUnfollow:ElasticsearchIndexLifecycleHotUnfollow",
                    "description": "Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotForcemerge:ElasticsearchIndexLifecycleHotForcemerge": {
            "properties": {
                "indexCodec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumSegments": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxNumSegments"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotReadonly:ElasticsearchIndexLifecycleHotReadonly": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotRollover:ElasticsearchIndexLifecycleHotRollover": {
            "properties": {
                "maxAge": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxDocs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxPrimaryShardSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotSearchableSnapshot:ElasticsearchIndexLifecycleHotSearchableSnapshot": {
            "properties": {
                "forceMergeIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotRepository": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "snapshotRepository"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotSetPriority:ElasticsearchIndexLifecycleHotSetPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotShrink:ElasticsearchIndexLifecycleHotShrink": {
            "properties": {
                "maxPrimaryShardSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfShards": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleHotUnfollow:ElasticsearchIndexLifecycleHotUnfollow": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarm:ElasticsearchIndexLifecycleWarm": {
            "properties": {
                "allocate": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmAllocate:ElasticsearchIndexLifecycleWarmAllocate",
                    "description": "Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "forcemerge": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmForcemerge:ElasticsearchIndexLifecycleWarmForcemerge",
                    "description": "Force merges the index into the specified maximum number of segments. This action makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "migrate": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmMigrate:ElasticsearchIndexLifecycleWarmMigrate",
                    "description": "Moves the index to the data tier that corresponds to the current phase by updating the \"index.routing.allocation.include.*tier*preference\" index setting.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minAge": {
                    "type": "string",
                    "description": "ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmReadonly:ElasticsearchIndexLifecycleWarmReadonly",
                    "description": "Makes the index read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "setPriority": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmSetPriority:ElasticsearchIndexLifecycleWarmSetPriority",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "shrink": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmShrink:ElasticsearchIndexLifecycleWarmShrink",
                    "description": "Sets a source index to read-only and shrinks it into a new index with fewer primary shards.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "unfollow": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarmUnfollow:ElasticsearchIndexLifecycleWarmUnfollow",
                    "description": "Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "minAge"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmAllocate:ElasticsearchIndexLifecycleWarmAllocate": {
            "properties": {
                "exclude": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "include": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfReplicas": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "require": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "exclude",
                        "include",
                        "require"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmForcemerge:ElasticsearchIndexLifecycleWarmForcemerge": {
            "properties": {
                "indexCodec": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumSegments": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "maxNumSegments"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmMigrate:ElasticsearchIndexLifecycleWarmMigrate": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmReadonly:ElasticsearchIndexLifecycleWarmReadonly": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmSetPriority:ElasticsearchIndexLifecycleWarmSetPriority": {
            "properties": {
                "priority": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority"
            ]
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmShrink:ElasticsearchIndexLifecycleWarmShrink": {
            "properties": {
                "maxPrimaryShardSize": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numberOfShards": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexLifecycleWarmUnfollow:ElasticsearchIndexLifecycleWarmUnfollow": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexSettings:ElasticsearchIndexSettings": {
            "properties": {
                "settings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexSettingsSetting:ElasticsearchIndexSettingsSetting"
                    },
                    "description": "Defines the setting for the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "settings"
            ]
        },
        "elasticstack:index/ElasticsearchIndexSettingsSetting:ElasticsearchIndexSettingsSetting": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "Name of the index you wish to create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "value"
            ]
        },
        "elasticstack:index/ElasticsearchIndexTemplateDataStream:ElasticsearchIndexTemplateDataStream": {
            "properties": {
                "hidden": {
                    "type": "boolean",
                    "description": "If true, the data stream is hidden.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexTemplateElasticsearchConnection:ElasticsearchIndexTemplateElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexTemplateTemplate:ElasticsearchIndexTemplateTemplate": {
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateTemplateAlias:ElasticsearchIndexTemplateTemplateAlias"
                    },
                    "description": "Alias to add.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "settings": {
                    "type": "string",
                    "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchIndexTemplateTemplateAlias:ElasticsearchIndexTemplateTemplateAlias": {
            "properties": {
                "filter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "indexRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isHidden": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isWriteIndex": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index template to create.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routing": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "searchRouting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "elasticstack:index/ElasticsearchIngestPipelineElasticsearchConnection:ElasticsearchIngestPipelineElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchSecurityRoleApplication:ElasticsearchSecurityRoleApplication": {
            "properties": {
                "application": {
                    "type": "string",
                    "description": "The name of the application to which this entry applies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of strings, where each element is the name of an application privilege or action.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list resources to which the privileges are applied.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "application",
                "privileges",
                "resources"
            ]
        },
        "elasticstack:index/ElasticsearchSecurityRoleElasticsearchConnection:ElasticsearchSecurityRoleElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchSecurityRoleIndex:ElasticsearchSecurityRoleIndex": {
            "properties": {
                "fieldSecurity": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleIndexFieldSecurity:ElasticsearchSecurityRoleIndexFieldSecurity",
                    "description": "The document fields that the owners of the role have read access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of indices (or index name patterns) to which the permissions in this entry apply.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privileges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The index level privileges that the owners of the role have on the specified indices.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "query": {
                    "type": "string",
                    "description": "A search query that defines the documents the owners of the role have read access to.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "names",
                "privileges"
            ]
        },
        "elasticstack:index/ElasticsearchSecurityRoleIndexFieldSecurity:ElasticsearchSecurityRoleIndexFieldSecurity": {
            "properties": {
                "excepts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "grants": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchSecurityUserElasticsearchConnection:ElasticsearchSecurityUserElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchSnapshotLifecycleElasticsearchConnection:ElasticsearchSnapshotLifecycleElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryAzure:ElasticsearchSnapshotRepositoryAzure": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "Specifies the path within the container to the repository data.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "Azure named client to use.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "container": {
                    "type": "string",
                    "description": "Container name. You must create the Azure container before creating the repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locationMode": {
                    "type": "string",
                    "description": "Location mode. `primary_only` or `secondary_only`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "container"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basePath",
                        "container"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryElasticsearchConnection:ElasticsearchSnapshotRepositoryElasticsearchConnection": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "description": "Path to a custom Certificate Authority certificate\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "description": "Disable TLS certificate validation\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "description": "A password to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "A username to use for API authentication to Elasticsearch.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryFs:ElasticsearchSnapshotRepositoryFs": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "location": {
                    "type": "string",
                    "description": "Location of the shared filesystem used to store and retrieve snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumberOfSnapshots": {
                    "type": "integer",
                    "description": "Maximum number of snapshots the repository can contain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "location"
            ]
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryGcs:ElasticsearchSnapshotRepositoryGcs": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucket": {
                    "type": "string",
                    "description": "The name of the bucket to be used for snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "The name of the client to use to connect to Google Cloud Storage.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basePath",
                        "bucket"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryHdfs:ElasticsearchSnapshotRepositoryHdfs": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "loadDefaults": {
                    "type": "boolean",
                    "description": "Whether to load the default Hadoop configuration or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "path": {
                    "type": "string",
                    "description": "The file path within the filesystem where data is stored/loaded.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "uri": {
                    "type": "string",
                    "description": "The uri address for hdfs. ex: \"hdfs://\\n\\n:\\n\\n/\".\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "path",
                "uri"
            ]
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryS3:ElasticsearchSnapshotRepositoryS3": {
            "properties": {
                "basePath": {
                    "type": "string",
                    "description": "Specifies the path to the repository data within its bucket.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bucket": {
                    "type": "string",
                    "description": "Name of the S3 bucket to use for snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "bufferSize": {
                    "type": "string",
                    "description": "Minimum threshold below which the chunk is uploaded using a single request.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cannedAcl": {
                    "type": "string",
                    "description": "The S3 repository supports all S3 canned ACLs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "client": {
                    "type": "string",
                    "description": "The name of the S3 client to use to connect to S3.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serverSideEncryption": {
                    "type": "boolean",
                    "description": "When true, files are encrypted server-side using AES-256 algorithm.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageClass": {
                    "type": "string",
                    "description": "Sets the S3 storage class for objects stored in the snapshot repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "bucket"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "basePath",
                        "bucket",
                        "bufferSize"
                    ]
                }
            }
        },
        "elasticstack:index/ElasticsearchSnapshotRepositoryUrl:ElasticsearchSnapshotRepositoryUrl": {
            "properties": {
                "chunkSize": {
                    "type": "string",
                    "description": "Maximum size of files in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "compress": {
                    "type": "boolean",
                    "description": "If true, metadata files, such as index mappings and settings, are compressed in snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpMaxRetries": {
                    "type": "integer",
                    "description": "Maximum number of retries for http and https URLs.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "httpSocketTimeout": {
                    "type": "string",
                    "description": "Maximum wait time for data transfers over a connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxNumberOfSnapshots": {
                    "type": "integer",
                    "description": "Maximum number of snapshots the repository can contain.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxRestoreBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot restore rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "maxSnapshotBytesPerSec": {
                    "type": "string",
                    "description": "Maximum snapshot creation rate per node.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readonly": {
                    "type": "boolean",
                    "description": "If true, the repository is read-only.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "description": "URL location of the root of the shared filesystem repository.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "url"
            ]
        },
        "elasticstack:index/ProviderElasticsearch:ProviderElasticsearch": {
            "properties": {
                "caFile": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "insecure": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the elasticstack package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "elasticsearch": {
                "$ref": "#/types/elasticstack:index/ProviderElasticsearch:ProviderElasticsearch",
                "description": "Default Elasticsearch connection configuration block.\n"
            }
        },
        "inputProperties": {
            "elasticsearch": {
                "$ref": "#/types/elasticstack:index/ProviderElasticsearch:ProviderElasticsearch",
                "description": "Default Elasticsearch connection configuration block.\n"
            }
        }
    },
    "resources": {
        "elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings": {
            "description": "Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst myClusterSettings = new elasticstack.ElasticsearchClusterSettings(\"my_cluster_settings\", {\n    persistent: {\n        settings: [\n            {\n                name: \"indices.lifecycle.poll_interval\",\n                value: \"10m\",\n            },\n            {\n                name: \"indices.recovery.max_bytes_per_sec\",\n                value: \"50mb\",\n            },\n            {\n                name: \"indices.breaker.accounting.limit\",\n                value: \"100%\",\n            },\n            {\n                name: \"xpack.security.audit.logfile.events.include\",\n                valueLists: [\n                    \"ACCESS_DENIED\",\n                    \"ACCESS_GRANTED\",\n                ],\n            },\n        ],\n    },\n    transient: {\n        settings: [{\n            name: \"indices.breaker.accounting.limit\",\n            value: \"99%\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nmy_cluster_settings = elasticstack.ElasticsearchClusterSettings(\"myClusterSettings\",\n    persistent=elasticstack.ElasticsearchClusterSettingsPersistentArgs(\n        settings=[\n            elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(\n                name=\"indices.lifecycle.poll_interval\",\n                value=\"10m\",\n            ),\n            elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(\n                name=\"indices.recovery.max_bytes_per_sec\",\n                value=\"50mb\",\n            ),\n            elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(\n                name=\"indices.breaker.accounting.limit\",\n                value=\"100%\",\n            ),\n            elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(\n                name=\"xpack.security.audit.logfile.events.include\",\n                value_list=[\n                    \"ACCESS_DENIED\",\n                    \"ACCESS_GRANTED\",\n                ],\n            ),\n        ],\n    ),\n    transient=elasticstack.ElasticsearchClusterSettingsTransientArgs(\n        settings=[elasticstack.ElasticsearchClusterSettingsTransientSettingArgs(\n            name=\"indices.breaker.accounting.limit\",\n            value=\"99%\",\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myClusterSettings = new Elasticstack.ElasticsearchClusterSettings(\"myClusterSettings\", new Elasticstack.ElasticsearchClusterSettingsArgs\n        {\n            Persistent = new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentArgs\n            {\n                Settings = \n                {\n                    new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs\n                    {\n                        Name = \"indices.lifecycle.poll_interval\",\n                        Value = \"10m\",\n                    },\n                    new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs\n                    {\n                        Name = \"indices.recovery.max_bytes_per_sec\",\n                        Value = \"50mb\",\n                    },\n                    new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs\n                    {\n                        Name = \"indices.breaker.accounting.limit\",\n                        Value = \"100%\",\n                    },\n                    new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs\n                    {\n                        Name = \"xpack.security.audit.logfile.events.include\",\n                        ValueList = \n                        {\n                            \"ACCESS_DENIED\",\n                            \"ACCESS_GRANTED\",\n                        },\n                    },\n                },\n            },\n            Transient = new Elasticstack.Inputs.ElasticsearchClusterSettingsTransientArgs\n            {\n                Settings = \n                {\n                    new Elasticstack.Inputs.ElasticsearchClusterSettingsTransientSettingArgs\n                    {\n                        Name = \"indices.breaker.accounting.limit\",\n                        Value = \"99%\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := elasticstack.NewElasticsearchClusterSettings(ctx, \"myClusterSettings\", \u0026elasticstack.ElasticsearchClusterSettingsArgs{\n\t\t\tPersistent: \u0026ElasticsearchClusterSettingsPersistentArgs{\n\t\t\t\tSettings: ElasticsearchClusterSettingsPersistentSettingArray{\n\t\t\t\t\t\u0026ElasticsearchClusterSettingsPersistentSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"indices.lifecycle.poll_interval\"),\n\t\t\t\t\t\tValue: pulumi.String(\"10m\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ElasticsearchClusterSettingsPersistentSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"indices.recovery.max_bytes_per_sec\"),\n\t\t\t\t\t\tValue: pulumi.String(\"50mb\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ElasticsearchClusterSettingsPersistentSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"indices.breaker.accounting.limit\"),\n\t\t\t\t\t\tValue: pulumi.String(fmt.Sprintf(\"%v%v\", \"100\", \"%\")),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ElasticsearchClusterSettingsPersistentSettingArgs{\n\t\t\t\t\t\tName: pulumi.String(\"xpack.security.audit.logfile.events.include\"),\n\t\t\t\t\t\tValueList: []string{\n\t\t\t\t\t\t\t\"ACCESS_DENIED\",\n\t\t\t\t\t\t\t\"ACCESS_GRANTED\",\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tTransient: \u0026ElasticsearchClusterSettingsTransientArgs{\n\t\t\t\tSettings: ElasticsearchClusterSettingsTransientSettingArray{\n\t\t\t\t\t\u0026ElasticsearchClusterSettingsTransientSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"indices.breaker.accounting.limit\"),\n\t\t\t\t\t\tValue: pulumi.String(fmt.Sprintf(\"%v%v\", \"99\", \"%\")),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsElasticsearchConnection:ElasticsearchClusterSettingsElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "persistent": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsPersistent:ElasticsearchClusterSettingsPersistent",
                    "description": "Settings will apply across restarts.\n"
                },
                "transient": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsTransient:ElasticsearchClusterSettingsTransient",
                    "description": "Settings do not survive a full cluster restart.\n"
                }
            },
            "required": [
                "id"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsElasticsearchConnection:ElasticsearchClusterSettingsElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "persistent": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsPersistent:ElasticsearchClusterSettingsPersistent",
                    "description": "Settings will apply across restarts.\n"
                },
                "transient": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsTransient:ElasticsearchClusterSettingsTransient",
                    "description": "Settings do not survive a full cluster restart.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchClusterSettings resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsElasticsearchConnection:ElasticsearchClusterSettingsElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "persistent": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsPersistent:ElasticsearchClusterSettingsPersistent",
                        "description": "Settings will apply across restarts.\n"
                    },
                    "transient": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchClusterSettingsTransient:ElasticsearchClusterSettingsTransient",
                        "description": "Settings do not survive a full cluster restart.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchComponentTemplate:ElasticsearchComponentTemplate": {
            "description": "Creates or updates a component template. Component templates are building blocks for constructing index templates that specify index mappings, settings, and aliases. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst myTemplateElasticsearchComponentTemplate = new elasticstack.ElasticsearchComponentTemplate(\"myTemplateElasticsearchComponentTemplate\", {template: {\n    aliases: [{\n        name: \"my_template_test\",\n    }],\n    settings: JSON.stringify({\n        number_of_shards: \"3\",\n    }),\n}});\nconst myTemplateElasticsearchIndexTemplate = new elasticstack.ElasticsearchIndexTemplate(\"myTemplateElasticsearchIndexTemplate\", {\n    indexPatterns: [\"stream*\"],\n    composedOfs: [myTemplateElasticsearchComponentTemplate.name],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_template_elasticsearch_component_template = elasticstack.ElasticsearchComponentTemplate(\"myTemplateElasticsearchComponentTemplate\", template=elasticstack.ElasticsearchComponentTemplateTemplateArgs(\n    aliases=[elasticstack.ElasticsearchComponentTemplateTemplateAliasArgs(\n        name=\"my_template_test\",\n    )],\n    settings=json.dumps({\n        \"number_of_shards\": \"3\",\n    }),\n))\nmy_template_elasticsearch_index_template = elasticstack.ElasticsearchIndexTemplate(\"myTemplateElasticsearchIndexTemplate\",\n    index_patterns=[\"stream*\"],\n    composed_ofs=[my_template_elasticsearch_component_template.name])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myTemplateElasticsearchComponentTemplate = new Elasticstack.ElasticsearchComponentTemplate(\"myTemplateElasticsearchComponentTemplate\", new Elasticstack.ElasticsearchComponentTemplateArgs\n        {\n            Template = new Elasticstack.Inputs.ElasticsearchComponentTemplateTemplateArgs\n            {\n                Aliases = \n                {\n                    new Elasticstack.Inputs.ElasticsearchComponentTemplateTemplateAliasArgs\n                    {\n                        Name = \"my_template_test\",\n                    },\n                },\n                Settings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"number_of_shards\", \"3\" },\n                }),\n            },\n        });\n        var myTemplateElasticsearchIndexTemplate = new Elasticstack.ElasticsearchIndexTemplate(\"myTemplateElasticsearchIndexTemplate\", new Elasticstack.ElasticsearchIndexTemplateArgs\n        {\n            IndexPatterns = \n            {\n                \"stream*\",\n            },\n            ComposedOfs = \n            {\n                myTemplateElasticsearchComponentTemplate.Name,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"number_of_shards\": \"3\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\tmyTemplateElasticsearchComponentTemplate, err := elasticstack.NewElasticsearchComponentTemplate(ctx, \"myTemplateElasticsearchComponentTemplate\", \u0026elasticstack.ElasticsearchComponentTemplateArgs{\n\t\t\tTemplate: \u0026ElasticsearchComponentTemplateTemplateArgs{\n\t\t\t\tAliases: ElasticsearchComponentTemplateTemplateAliasArray{\n\t\t\t\t\t\u0026ElasticsearchComponentTemplateTemplateAliasArgs{\n\t\t\t\t\t\tName: pulumi.String(\"my_template_test\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSettings: pulumi.String(json0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIndexTemplate(ctx, \"myTemplateElasticsearchIndexTemplate\", \u0026elasticstack.ElasticsearchIndexTemplateArgs{\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"stream*\"),\n\t\t\t},\n\t\t\tComposedOfs: pulumi.StringArray{\n\t\t\t\tmyTemplateElasticsearchComponentTemplate.Name,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchComponentTemplate:ElasticsearchComponentTemplate my_template \u003ccluster_uuid\u003e/\u003ccomponent_name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateElasticsearchConnection:ElasticsearchComponentTemplateElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the component template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the component template to create.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateTemplate:ElasticsearchComponentTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage component templates externally.\n"
                }
            },
            "required": [
                "id",
                "name",
                "template"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateElasticsearchConnection:ElasticsearchComponentTemplateElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the component template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the component template to create.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateTemplate:ElasticsearchComponentTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage component templates externally.\n"
                }
            },
            "requiredInputs": [
                "template"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchComponentTemplate resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateElasticsearchConnection:ElasticsearchComponentTemplateElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the component template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the component template to create.\n"
                    },
                    "template": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchComponentTemplateTemplate:ElasticsearchComponentTemplateTemplate",
                        "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number used to manage component templates externally.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchDataStream:ElasticsearchDataStream": {
            "description": "Manages data streams. This resource can create, delete and show the information about the created data stream. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/data-stream-apis.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\n// Create an ILM policy for our data stream\nconst myIlm = new elasticstack.ElasticsearchIndexLifecycle(\"myIlm\", {\n    hot: {\n        minAge: \"1h\",\n        setPriority: {\n            priority: 10,\n        },\n        rollover: {\n            maxAge: \"1d\",\n        },\n        readonly: {},\n    },\n    \"delete\": {\n        minAge: \"2d\",\n        \"delete\": {},\n    },\n});\n// First we must have a index template created\nconst myDataStreamTemplate = new elasticstack.ElasticsearchIndexTemplate(\"myDataStreamTemplate\", {\n    indexPatterns: [\"my-stream*\"],\n    template: {\n        settings: myIlm.name.apply(name =\u003e JSON.stringify({\n            \"lifecycle.name\": name,\n        })),\n    },\n    dataStream: {},\n});\n// and now we can create data stream based on the index template\nconst myDataStream = new elasticstack.ElasticsearchDataStream(\"myDataStream\", {}, {\n    dependsOn: [myDataStreamTemplate],\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\n# Create an ILM policy for our data stream\nmy_ilm = elasticstack.ElasticsearchIndexLifecycle(\"myIlm\",\n    hot=elasticstack.ElasticsearchIndexLifecycleHotArgs(\n        min_age=\"1h\",\n        set_priority=elasticstack.ElasticsearchIndexLifecycleHotSetPriorityArgs(\n            priority=10,\n        ),\n        rollover=elasticstack.ElasticsearchIndexLifecycleHotRolloverArgs(\n            max_age=\"1d\",\n        ),\n        readonly=elasticstack.ElasticsearchIndexLifecycleHotReadonlyArgs(),\n    ),\n    delete=elasticstack.ElasticsearchIndexLifecycleDeleteArgs(\n        min_age=\"2d\",\n        delete=elasticstack.ElasticsearchIndexLifecycleDeleteDeleteArgs(),\n    ))\n# First we must have a index template created\nmy_data_stream_template = elasticstack.ElasticsearchIndexTemplate(\"myDataStreamTemplate\",\n    index_patterns=[\"my-stream*\"],\n    template=elasticstack.ElasticsearchIndexTemplateTemplateArgs(\n        settings=my_ilm.name.apply(lambda name: json.dumps({\n            \"lifecycle.name\": name,\n        })),\n    ),\n    data_stream=elasticstack.ElasticsearchIndexTemplateDataStreamArgs())\n# and now we can create data stream based on the index template\nmy_data_stream = elasticstack.ElasticsearchDataStream(\"myDataStream\", opts=pulumi.ResourceOptions(depends_on=[my_data_stream_template]))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create an ILM policy for our data stream\n        var myIlm = new Elasticstack.ElasticsearchIndexLifecycle(\"myIlm\", new Elasticstack.ElasticsearchIndexLifecycleArgs\n        {\n            Hot = new Elasticstack.Inputs.ElasticsearchIndexLifecycleHotArgs\n            {\n                MinAge = \"1h\",\n                SetPriority = new Elasticstack.Inputs.ElasticsearchIndexLifecycleHotSetPriorityArgs\n                {\n                    Priority = 10,\n                },\n                Rollover = new Elasticstack.Inputs.ElasticsearchIndexLifecycleHotRolloverArgs\n                {\n                    MaxAge = \"1d\",\n                },\n                Readonly = ,\n            },\n            Delete = new Elasticstack.Inputs.ElasticsearchIndexLifecycleDeleteArgs\n            {\n                MinAge = \"2d\",\n                Delete = ,\n            },\n        });\n        // First we must have a index template created\n        var myDataStreamTemplate = new Elasticstack.ElasticsearchIndexTemplate(\"myDataStreamTemplate\", new Elasticstack.ElasticsearchIndexTemplateArgs\n        {\n            IndexPatterns = \n            {\n                \"my-stream*\",\n            },\n            Template = new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateArgs\n            {\n                Settings = myIlm.Name.Apply(name =\u003e JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"lifecycle.name\", name },\n                })),\n            },\n            DataStream = ,\n        });\n        // and now we can create data stream based on the index template\n        var myDataStream = new Elasticstack.ElasticsearchDataStream(\"myDataStream\", new Elasticstack.ElasticsearchDataStreamArgs\n        {\n        }, new CustomResourceOptions\n        {\n            DependsOn = \n            {\n                myDataStreamTemplate,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tmyIlm, err := elasticstack.NewElasticsearchIndexLifecycle(ctx, \"myIlm\", \u0026elasticstack.ElasticsearchIndexLifecycleArgs{\n\t\t\tHot: \u0026ElasticsearchIndexLifecycleHotArgs{\n\t\t\t\tMinAge: pulumi.String(\"1h\"),\n\t\t\t\tSetPriority: \u0026ElasticsearchIndexLifecycleHotSetPriorityArgs{\n\t\t\t\t\tPriority: pulumi.Int(10),\n\t\t\t\t},\n\t\t\t\tRollover: \u0026ElasticsearchIndexLifecycleHotRolloverArgs{\n\t\t\t\t\tMaxAge: pulumi.String(\"1d\"),\n\t\t\t\t},\n\t\t\t\tReadonly: nil,\n\t\t\t},\n\t\t\tDelete: \u0026ElasticsearchIndexLifecycleDeleteArgs{\n\t\t\t\tMinAge: pulumi.String(\"2d\"),\n\t\t\t\tDelete: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tmyDataStreamTemplate, err := elasticstack.NewElasticsearchIndexTemplate(ctx, \"myDataStreamTemplate\", \u0026elasticstack.ElasticsearchIndexTemplateArgs{\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"my-stream*\"),\n\t\t\t},\n\t\t\tTemplate: \u0026ElasticsearchIndexTemplateTemplateArgs{\n\t\t\t\tSettings: myIlm.Name.ApplyT(func(name string) (pulumi.String, error) {\n\t\t\t\t\tvar _zero pulumi.String\n\t\t\t\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\t\t\t\"lifecycle.name\": name,\n\t\t\t\t\t})\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\treturn _zero, err\n\t\t\t\t\t}\n\t\t\t\t\tjson0 := string(tmpJSON0)\n\t\t\t\t\treturn json0, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t},\n\t\t\tDataStream: nil,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchDataStream(ctx, \"myDataStream\", nil, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tmyDataStreamTemplate,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchDataStream:ElasticsearchDataStream my_data_stream \u003ccluster_uuid\u003e/\u003cdata_stream_name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchDataStreamElasticsearchConnection:ElasticsearchDataStreamElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "generation": {
                    "type": "integer",
                    "description": "Current generation for the data stream.\n"
                },
                "hidden": {
                    "type": "boolean",
                    "description": "If `true`, the data stream is hidden.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "ilmPolicy": {
                    "type": "string",
                    "description": "Name of the current ILM lifecycle policy in the stream’s matching index template.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchDataStreamIndex:ElasticsearchDataStreamIndex"
                    },
                    "description": "Array of objects containing information about the data stream’s backing indices. The last item in this array contains information about the stream’s current write index.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Custom metadata for the stream, copied from the _meta object of the stream’s matching index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the data stream to create.\n"
                },
                "replicated": {
                    "type": "boolean",
                    "description": "If `true`, the data stream is created and managed by cross-cluster replication and the local cluster can not write into this data stream or change its mappings.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Health status of the data stream.\n"
                },
                "system": {
                    "type": "boolean",
                    "description": "If `true`, the data stream is created and managed by an Elastic stack component and cannot be modified through normal user interaction.\n"
                },
                "template": {
                    "type": "string",
                    "description": "Name of the index template used to create the data stream’s backing indices.\n"
                },
                "timestampField": {
                    "type": "string",
                    "description": "Contains information about the data stream’s @timestamp field.\n"
                }
            },
            "required": [
                "generation",
                "hidden",
                "id",
                "ilmPolicy",
                "indices",
                "metadata",
                "name",
                "replicated",
                "status",
                "system",
                "template",
                "timestampField"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchDataStreamElasticsearchConnection:ElasticsearchDataStreamElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the data stream to create.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchDataStream resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchDataStreamElasticsearchConnection:ElasticsearchDataStreamElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "generation": {
                        "type": "integer",
                        "description": "Current generation for the data stream.\n"
                    },
                    "hidden": {
                        "type": "boolean",
                        "description": "If `true`, the data stream is hidden.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "ilmPolicy": {
                        "type": "string",
                        "description": "Name of the current ILM lifecycle policy in the stream’s matching index template.\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/ElasticsearchDataStreamIndex:ElasticsearchDataStreamIndex"
                        },
                        "description": "Array of objects containing information about the data stream’s backing indices. The last item in this array contains information about the stream’s current write index.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Custom metadata for the stream, copied from the _meta object of the stream’s matching index template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the data stream to create.\n"
                    },
                    "replicated": {
                        "type": "boolean",
                        "description": "If `true`, the data stream is created and managed by cross-cluster replication and the local cluster can not write into this data stream or change its mappings.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Health status of the data stream.\n"
                    },
                    "system": {
                        "type": "boolean",
                        "description": "If `true`, the data stream is created and managed by an Elastic stack component and cannot be modified through normal user interaction.\n"
                    },
                    "template": {
                        "type": "string",
                        "description": "Name of the index template used to create the data stream’s backing indices.\n"
                    },
                    "timestampField": {
                        "type": "string",
                        "description": "Contains information about the data stream’s @timestamp field.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchIndex:ElasticsearchIndex": {
            "description": "Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst myIndex = new elasticstack.ElasticsearchIndex(\"myIndex\", {\n    aliases: [\n        {\n            name: \"my_alias_1\",\n        },\n        {\n            name: \"my_alias_2\",\n            filter: JSON.stringify({\n                term: {\n                    \"user.id\": \"developer\",\n                },\n            }),\n        },\n    ],\n    mappings: JSON.stringify({\n        properties: {\n            field1: {\n                type: \"keyword\",\n            },\n            field2: {\n                type: \"text\",\n            },\n            field3: {\n                properties: {\n                    inner_field1: {\n                        type: \"text\",\n                        index: false,\n                    },\n                    inner_field2: {\n                        type: \"integer\",\n                        index: false,\n                    },\n                },\n            },\n        },\n    }),\n    settings: {\n        settings: [\n            {\n                name: \"index.number_of_shards\",\n                value: \"1\",\n            },\n            {\n                name: \"index.number_of_replicas\",\n                value: \"2\",\n            },\n            {\n                name: \"index.search.idle.after\",\n                value: \"20s\",\n            },\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_index = elasticstack.ElasticsearchIndex(\"myIndex\",\n    aliases=[\n        elasticstack.ElasticsearchIndexAliasArgs(\n            name=\"my_alias_1\",\n        ),\n        elasticstack.ElasticsearchIndexAliasArgs(\n            name=\"my_alias_2\",\n            filter=json.dumps({\n                \"term\": {\n                    \"user.id\": \"developer\",\n                },\n            }),\n        ),\n    ],\n    mappings=json.dumps({\n        \"properties\": {\n            \"field1\": {\n                \"type\": \"keyword\",\n            },\n            \"field2\": {\n                \"type\": \"text\",\n            },\n            \"field3\": {\n                \"properties\": {\n                    \"inner_field1\": {\n                        \"type\": \"text\",\n                        \"index\": False,\n                    },\n                    \"inner_field2\": {\n                        \"type\": \"integer\",\n                        \"index\": False,\n                    },\n                },\n            },\n        },\n    }),\n    settings=elasticstack.ElasticsearchIndexSettingsArgs(\n        settings=[\n            elasticstack.ElasticsearchIndexSettingsSettingArgs(\n                name=\"index.number_of_shards\",\n                value=\"1\",\n            ),\n            elasticstack.ElasticsearchIndexSettingsSettingArgs(\n                name=\"index.number_of_replicas\",\n                value=\"2\",\n            ),\n            elasticstack.ElasticsearchIndexSettingsSettingArgs(\n                name=\"index.search.idle.after\",\n                value=\"20s\",\n            ),\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myIndex = new Elasticstack.ElasticsearchIndex(\"myIndex\", new Elasticstack.ElasticsearchIndexArgs\n        {\n            Aliases = \n            {\n                new Elasticstack.Inputs.ElasticsearchIndexAliasArgs\n                {\n                    Name = \"my_alias_1\",\n                },\n                new Elasticstack.Inputs.ElasticsearchIndexAliasArgs\n                {\n                    Name = \"my_alias_2\",\n                    Filter = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"term\", new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"user.id\", \"developer\" },\n                        } },\n                    }),\n                },\n            },\n            Mappings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"properties\", new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"field1\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"type\", \"keyword\" },\n                    } },\n                    { \"field2\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"type\", \"text\" },\n                    } },\n                    { \"field3\", new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"properties\", new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"inner_field1\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"type\", \"text\" },\n                                { \"index\", false },\n                            } },\n                            { \"inner_field2\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"type\", \"integer\" },\n                                { \"index\", false },\n                            } },\n                        } },\n                    } },\n                } },\n            }),\n            Settings = new Elasticstack.Inputs.ElasticsearchIndexSettingsArgs\n            {\n                Settings = \n                {\n                    new Elasticstack.Inputs.ElasticsearchIndexSettingsSettingArgs\n                    {\n                        Name = \"index.number_of_shards\",\n                        Value = \"1\",\n                    },\n                    new Elasticstack.Inputs.ElasticsearchIndexSettingsSettingArgs\n                    {\n                        Name = \"index.number_of_replicas\",\n                        Value = \"2\",\n                    },\n                    new Elasticstack.Inputs.ElasticsearchIndexSettingsSettingArgs\n                    {\n                        Name = \"index.search.idle.after\",\n                        Value = \"20s\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"term\": map[string]interface{}{\n\t\t\t\t\"user.id\": \"developer\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"properties\": map[string]interface{}{\n\t\t\t\t\"field1\": map[string]interface{}{\n\t\t\t\t\t\"type\": \"keyword\",\n\t\t\t\t},\n\t\t\t\t\"field2\": map[string]interface{}{\n\t\t\t\t\t\"type\": \"text\",\n\t\t\t\t},\n\t\t\t\t\"field3\": map[string]interface{}{\n\t\t\t\t\t\"properties\": map[string]interface{}{\n\t\t\t\t\t\t\"inner_field1\": map[string]interface{}{\n\t\t\t\t\t\t\t\"type\":  \"text\",\n\t\t\t\t\t\t\t\"index\": false,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"inner_field2\": map[string]interface{}{\n\t\t\t\t\t\t\t\"type\":  \"integer\",\n\t\t\t\t\t\t\t\"index\": false,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err := elasticstack.NewElasticsearchIndex(ctx, \"myIndex\", \u0026elasticstack.ElasticsearchIndexArgs{\n\t\t\tAliases: ElasticsearchIndexAliasArray{\n\t\t\t\t\u0026ElasticsearchIndexAliasArgs{\n\t\t\t\t\tName: pulumi.String(\"my_alias_1\"),\n\t\t\t\t},\n\t\t\t\t\u0026ElasticsearchIndexAliasArgs{\n\t\t\t\t\tName:   pulumi.String(\"my_alias_2\"),\n\t\t\t\t\tFilter: pulumi.String(json0),\n\t\t\t\t},\n\t\t\t},\n\t\t\tMappings: pulumi.String(json1),\n\t\t\tSettings: \u0026ElasticsearchIndexSettingsArgs{\n\t\t\t\tSettings: ElasticsearchIndexSettingsSettingArray{\n\t\t\t\t\t\u0026ElasticsearchIndexSettingsSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"index.number_of_shards\"),\n\t\t\t\t\t\tValue: pulumi.String(\"1\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ElasticsearchIndexSettingsSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"index.number_of_replicas\"),\n\t\t\t\t\t\tValue: pulumi.String(\"2\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ElasticsearchIndexSettingsSettingArgs{\n\t\t\t\t\t\tName:  pulumi.String(\"index.search.idle.after\"),\n\t\t\t\t\t\tValue: pulumi.String(\"20s\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nYou can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. # NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too # You can later adjust the index configuration to account for those imported settings\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchIndex:ElasticsearchIndex my_index \u003ccluster_uuid\u003e/\u003cindex_name\u003e\n```\n\n ",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexAlias:ElasticsearchIndexAlias"
                    },
                    "description": "Aliases for the index.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexElasticsearchConnection:ElasticsearchIndexElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\nIf specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).\n**NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index you wish to create.\n"
                },
                "settings": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexSettings:ElasticsearchIndexSettings",
                    "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.\n**NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error\n"
                },
                "settingsRaw": {
                    "type": "string",
                    "description": "All raw settings fetched from the cluster.\n"
                }
            },
            "required": [
                "id",
                "name",
                "settingsRaw"
            ],
            "inputProperties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexAlias:ElasticsearchIndexAlias"
                    },
                    "description": "Aliases for the index.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexElasticsearchConnection:ElasticsearchIndexElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "mappings": {
                    "type": "string",
                    "description": "Mapping for fields in the index.\nIf specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).\n**NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index you wish to create.\n"
                },
                "settings": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexSettings:ElasticsearchIndexSettings",
                    "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.\n**NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchIndex resources.\n",
                "properties": {
                    "aliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/ElasticsearchIndexAlias:ElasticsearchIndexAlias"
                        },
                        "description": "Aliases for the index.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexElasticsearchConnection:ElasticsearchIndexElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "mappings": {
                        "type": "string",
                        "description": "Mapping for fields in the index.\nIf specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).\n**NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the index you wish to create.\n"
                    },
                    "settings": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexSettings:ElasticsearchIndexSettings",
                        "description": "Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.\n**NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error\n"
                    },
                    "settingsRaw": {
                        "type": "string",
                        "description": "All raw settings fetched from the cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchIndexLifecycle:ElasticsearchIndexLifecycle": {
            "description": "Creates or updates lifecycle policy. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-index-lifecycle.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst myIlm = new elasticstack.ElasticsearchIndexLifecycle(\"myIlm\", {\n    hot: {\n        minAge: \"1h\",\n        setPriority: {\n            priority: 10,\n        },\n        rollover: {\n            maxAge: \"1d\",\n        },\n        readonly: {},\n    },\n    warm: {\n        minAge: \"0ms\",\n        setPriority: {\n            priority: 60,\n        },\n        readonly: {},\n        allocate: {\n            exclude: JSON.stringify({\n                box_type: \"hot\",\n            }),\n            numberOfReplicas: 0,\n        },\n    },\n    \"delete\": {\n        minAge: \"2d\",\n        \"delete\": {},\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_ilm = elasticstack.ElasticsearchIndexLifecycle(\"myIlm\",\n    hot=elasticstack.ElasticsearchIndexLifecycleHotArgs(\n        min_age=\"1h\",\n        set_priority=elasticstack.ElasticsearchIndexLifecycleHotSetPriorityArgs(\n            priority=10,\n        ),\n        rollover=elasticstack.ElasticsearchIndexLifecycleHotRolloverArgs(\n            max_age=\"1d\",\n        ),\n        readonly=elasticstack.ElasticsearchIndexLifecycleHotReadonlyArgs(),\n    ),\n    warm=elasticstack.ElasticsearchIndexLifecycleWarmArgs(\n        min_age=\"0ms\",\n        set_priority=elasticstack.ElasticsearchIndexLifecycleWarmSetPriorityArgs(\n            priority=60,\n        ),\n        readonly=elasticstack.ElasticsearchIndexLifecycleWarmReadonlyArgs(),\n        allocate=elasticstack.ElasticsearchIndexLifecycleWarmAllocateArgs(\n            exclude=json.dumps({\n                \"box_type\": \"hot\",\n            }),\n            number_of_replicas=0,\n        ),\n    ),\n    delete=elasticstack.ElasticsearchIndexLifecycleDeleteArgs(\n        min_age=\"2d\",\n        delete=elasticstack.ElasticsearchIndexLifecycleDeleteDeleteArgs(),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myIlm = new Elasticstack.ElasticsearchIndexLifecycle(\"myIlm\", new Elasticstack.ElasticsearchIndexLifecycleArgs\n        {\n            Hot = new Elasticstack.Inputs.ElasticsearchIndexLifecycleHotArgs\n            {\n                MinAge = \"1h\",\n                SetPriority = new Elasticstack.Inputs.ElasticsearchIndexLifecycleHotSetPriorityArgs\n                {\n                    Priority = 10,\n                },\n                Rollover = new Elasticstack.Inputs.ElasticsearchIndexLifecycleHotRolloverArgs\n                {\n                    MaxAge = \"1d\",\n                },\n                Readonly = ,\n            },\n            Warm = new Elasticstack.Inputs.ElasticsearchIndexLifecycleWarmArgs\n            {\n                MinAge = \"0ms\",\n                SetPriority = new Elasticstack.Inputs.ElasticsearchIndexLifecycleWarmSetPriorityArgs\n                {\n                    Priority = 60,\n                },\n                Readonly = ,\n                Allocate = new Elasticstack.Inputs.ElasticsearchIndexLifecycleWarmAllocateArgs\n                {\n                    Exclude = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                    {\n                        { \"box_type\", \"hot\" },\n                    }),\n                    NumberOfReplicas = 0,\n                },\n            },\n            Delete = new Elasticstack.Inputs.ElasticsearchIndexLifecycleDeleteArgs\n            {\n                MinAge = \"2d\",\n                Delete = ,\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"box_type\": \"hot\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := elasticstack.NewElasticsearchIndexLifecycle(ctx, \"myIlm\", \u0026elasticstack.ElasticsearchIndexLifecycleArgs{\n\t\t\tHot: \u0026ElasticsearchIndexLifecycleHotArgs{\n\t\t\t\tMinAge: pulumi.String(\"1h\"),\n\t\t\t\tSetPriority: \u0026ElasticsearchIndexLifecycleHotSetPriorityArgs{\n\t\t\t\t\tPriority: pulumi.Int(10),\n\t\t\t\t},\n\t\t\t\tRollover: \u0026ElasticsearchIndexLifecycleHotRolloverArgs{\n\t\t\t\t\tMaxAge: pulumi.String(\"1d\"),\n\t\t\t\t},\n\t\t\t\tReadonly: nil,\n\t\t\t},\n\t\t\tWarm: \u0026ElasticsearchIndexLifecycleWarmArgs{\n\t\t\t\tMinAge: pulumi.String(\"0ms\"),\n\t\t\t\tSetPriority: \u0026ElasticsearchIndexLifecycleWarmSetPriorityArgs{\n\t\t\t\t\tPriority: pulumi.Int(60),\n\t\t\t\t},\n\t\t\t\tReadonly: nil,\n\t\t\t\tAllocate: \u0026ElasticsearchIndexLifecycleWarmAllocateArgs{\n\t\t\t\t\tExclude:          pulumi.String(json0),\n\t\t\t\t\tNumberOfReplicas: pulumi.Int(0),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDelete: \u0026ElasticsearchIndexLifecycleDeleteArgs{\n\t\t\t\tMinAge: pulumi.String(\"2d\"),\n\t\t\t\tDelete: nil,\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchIndexLifecycle:ElasticsearchIndexLifecycle my_ilm \u003ccluster_uuid\u003e/\u003cilm_name\u003e\n```\n\n ",
            "properties": {
                "cold": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleCold:ElasticsearchIndexLifecycleCold",
                    "description": "The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.\n"
                },
                "delete": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleDelete:ElasticsearchIndexLifecycleDelete",
                    "description": "The index is no longer needed and can safely be removed.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleElasticsearchConnection:ElasticsearchIndexLifecycleElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "frozen": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleFrozen:ElasticsearchIndexLifecycleFrozen",
                    "description": "The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.\n"
                },
                "hot": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHot:ElasticsearchIndexLifecycleHot",
                    "description": "The index is actively being updated and queried.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the ilm policy. Must be valid JSON document.\n"
                },
                "modifiedDate": {
                    "type": "string",
                    "description": "The DateTime of the last modification.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the policy.\n"
                },
                "warm": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarm:ElasticsearchIndexLifecycleWarm",
                    "description": "The index is no longer being updated but is still being queried.\n"
                }
            },
            "required": [
                "id",
                "modifiedDate",
                "name"
            ],
            "inputProperties": {
                "cold": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleCold:ElasticsearchIndexLifecycleCold",
                    "description": "The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.\n"
                },
                "delete": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleDelete:ElasticsearchIndexLifecycleDelete",
                    "description": "The index is no longer needed and can safely be removed.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleElasticsearchConnection:ElasticsearchIndexLifecycleElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "frozen": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleFrozen:ElasticsearchIndexLifecycleFrozen",
                    "description": "The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.\n"
                },
                "hot": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHot:ElasticsearchIndexLifecycleHot",
                    "description": "The index is actively being updated and queried.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the ilm policy. Must be valid JSON document.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Identifier for the policy.\n"
                },
                "warm": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarm:ElasticsearchIndexLifecycleWarm",
                    "description": "The index is no longer being updated but is still being queried.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchIndexLifecycle resources.\n",
                "properties": {
                    "cold": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleCold:ElasticsearchIndexLifecycleCold",
                        "description": "The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.\n"
                    },
                    "delete": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleDelete:ElasticsearchIndexLifecycleDelete",
                        "description": "The index is no longer needed and can safely be removed.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleElasticsearchConnection:ElasticsearchIndexLifecycleElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "frozen": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleFrozen:ElasticsearchIndexLifecycleFrozen",
                        "description": "The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.\n"
                    },
                    "hot": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleHot:ElasticsearchIndexLifecycleHot",
                        "description": "The index is actively being updated and queried.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the ilm policy. Must be valid JSON document.\n"
                    },
                    "modifiedDate": {
                        "type": "string",
                        "description": "The DateTime of the last modification.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Identifier for the policy.\n"
                    },
                    "warm": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexLifecycleWarm:ElasticsearchIndexLifecycleWarm",
                        "description": "The index is no longer being updated but is still being queried.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate": {
            "description": "Creates or updates an index template. Index templates define settings, mappings, and aliases that can be applied automatically to new indices. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst myTemplate = new elasticstack.ElasticsearchIndexTemplate(\"myTemplate\", {\n    priority: 42,\n    indexPatterns: [\n        \"logstash*\",\n        \"filebeat*\",\n    ],\n    template: {\n        aliases: [\n            {\n                name: \"my_template_test\",\n            },\n            {\n                name: \"another_test\",\n            },\n        ],\n        settings: JSON.stringify({\n            number_of_shards: \"3\",\n        }),\n    },\n});\nconst myDataStream = new elasticstack.ElasticsearchIndexTemplate(\"myDataStream\", {\n    indexPatterns: [\"stream*\"],\n    dataStream: {},\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nmy_template = elasticstack.ElasticsearchIndexTemplate(\"myTemplate\",\n    priority=42,\n    index_patterns=[\n        \"logstash*\",\n        \"filebeat*\",\n    ],\n    template=elasticstack.ElasticsearchIndexTemplateTemplateArgs(\n        aliases=[\n            elasticstack.ElasticsearchIndexTemplateTemplateAliasArgs(\n                name=\"my_template_test\",\n            ),\n            elasticstack.ElasticsearchIndexTemplateTemplateAliasArgs(\n                name=\"another_test\",\n            ),\n        ],\n        settings=json.dumps({\n            \"number_of_shards\": \"3\",\n        }),\n    ))\nmy_data_stream = elasticstack.ElasticsearchIndexTemplate(\"myDataStream\",\n    index_patterns=[\"stream*\"],\n    data_stream=elasticstack.ElasticsearchIndexTemplateDataStreamArgs())\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myTemplate = new Elasticstack.ElasticsearchIndexTemplate(\"myTemplate\", new Elasticstack.ElasticsearchIndexTemplateArgs\n        {\n            Priority = 42,\n            IndexPatterns = \n            {\n                \"logstash*\",\n                \"filebeat*\",\n            },\n            Template = new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateArgs\n            {\n                Aliases = \n                {\n                    new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateAliasArgs\n                    {\n                        Name = \"my_template_test\",\n                    },\n                    new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateAliasArgs\n                    {\n                        Name = \"another_test\",\n                    },\n                },\n                Settings = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n                {\n                    { \"number_of_shards\", \"3\" },\n                }),\n            },\n        });\n        var myDataStream = new Elasticstack.ElasticsearchIndexTemplate(\"myDataStream\", new Elasticstack.ElasticsearchIndexTemplateArgs\n        {\n            IndexPatterns = \n            {\n                \"stream*\",\n            },\n            DataStream = ,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"number_of_shards\": \"3\",\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := elasticstack.NewElasticsearchIndexTemplate(ctx, \"myTemplate\", \u0026elasticstack.ElasticsearchIndexTemplateArgs{\n\t\t\tPriority: pulumi.Int(42),\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"logstash*\"),\n\t\t\t\tpulumi.String(\"filebeat*\"),\n\t\t\t},\n\t\t\tTemplate: \u0026ElasticsearchIndexTemplateTemplateArgs{\n\t\t\t\tAliases: ElasticsearchIndexTemplateTemplateAliasArray{\n\t\t\t\t\t\u0026ElasticsearchIndexTemplateTemplateAliasArgs{\n\t\t\t\t\t\tName: pulumi.String(\"my_template_test\"),\n\t\t\t\t\t},\n\t\t\t\t\t\u0026ElasticsearchIndexTemplateTemplateAliasArgs{\n\t\t\t\t\t\tName: pulumi.String(\"another_test\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tSettings: pulumi.String(json0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIndexTemplate(ctx, \"myDataStream\", \u0026elasticstack.ElasticsearchIndexTemplateArgs{\n\t\t\tIndexPatterns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"stream*\"),\n\t\t\t},\n\t\t\tDataStream: nil,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate my_template \u003ccluster_uuid\u003e/\u003ctemplate_name\u003e\n```\n\n ",
            "properties": {
                "composedOfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An ordered list of component template names.\n"
                },
                "dataStream": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateDataStream:ElasticsearchIndexTemplateDataStream",
                    "description": "If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateElasticsearchConnection:ElasticsearchIndexTemplateElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of wildcard (*) expressions used to match the names of data streams and indices during creation.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index template to create.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority to determine index template precedence when a new data stream or index is created.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateTemplate:ElasticsearchIndexTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage index templates externally.\n"
                }
            },
            "required": [
                "composedOfs",
                "id",
                "indexPatterns",
                "name"
            ],
            "inputProperties": {
                "composedOfs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "An ordered list of component template names.\n"
                },
                "dataStream": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateDataStream:ElasticsearchIndexTemplateDataStream",
                    "description": "If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateElasticsearchConnection:ElasticsearchIndexTemplateElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "indexPatterns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Array of wildcard (*) expressions used to match the names of data streams and indices during creation.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the index template to create.\n"
                },
                "priority": {
                    "type": "integer",
                    "description": "Priority to determine index template precedence when a new data stream or index is created.\n"
                },
                "template": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateTemplate:ElasticsearchIndexTemplateTemplate",
                    "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                },
                "version": {
                    "type": "integer",
                    "description": "Version number used to manage index templates externally.\n"
                }
            },
            "requiredInputs": [
                "indexPatterns"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchIndexTemplate resources.\n",
                "properties": {
                    "composedOfs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An ordered list of component template names.\n"
                    },
                    "dataStream": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateDataStream:ElasticsearchIndexTemplateDataStream",
                        "description": "If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateElasticsearchConnection:ElasticsearchIndexTemplateElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "indexPatterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of wildcard (*) expressions used to match the names of data streams and indices during creation.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the index template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the index template to create.\n"
                    },
                    "priority": {
                        "type": "integer",
                        "description": "Priority to determine index template precedence when a new data stream or index is created.\n"
                    },
                    "template": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIndexTemplateTemplate:ElasticsearchIndexTemplateTemplate",
                        "description": "Template to be applied. It may optionally include an aliases, mappings, or settings configuration.\n"
                    },
                    "version": {
                        "type": "integer",
                        "description": "Version number used to manage index templates externally.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchIngestPipeline:ElasticsearchIngestPipeline": {
            "description": "\n\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchIngestPipeline:ElasticsearchIngestPipeline my_ingest_pipeline \u003ccluster_uuid\u003e/\u003cingest pipeline name\u003e\n```\n\n ",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the ingest pipeline.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIngestPipelineElasticsearchConnection:ElasticsearchIngestPipelineElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ingest pipeline.\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document\n"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.\n"
                }
            },
            "required": [
                "id",
                "name",
                "processors"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the ingest pipeline.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchIngestPipelineElasticsearchConnection:ElasticsearchIngestPipelineElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional user metadata about the index template.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ingest pipeline.\n"
                },
                "onFailures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document\n"
                },
                "processors": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.\n"
                }
            },
            "requiredInputs": [
                "processors"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchIngestPipeline resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the ingest pipeline.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchIngestPipelineElasticsearchConnection:ElasticsearchIngestPipelineElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional user metadata about the index template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ingest pipeline.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Processors to run immediately after a processor failure. Each processor supports a processor-level `on_failure` value. If a processor without an `on_failure` value fails, Elasticsearch uses this pipeline-level parameter as a fallback. The processors in this parameter run sequentially in the order specified. Elasticsearch will not attempt to run the pipeline’s remaining processors. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document\n"
                    },
                    "processors": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Processors used to perform transformations on documents before indexing. Processors run sequentially in the order specified. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/processors.html. Each record must be a valid JSON document.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchSecurityRole:ElasticsearchSecurityRole": {
            "description": "Adds and updates roles in the native realm. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst roleElasticsearchSecurityRole = new elasticstack.ElasticsearchSecurityRole(\"roleElasticsearchSecurityRole\", {\n    clusters: [\"all\"],\n    indices: [{\n        names: [\n            \"index1\",\n            \"index2\",\n        ],\n        privileges: [\"all\"],\n    }],\n    applications: [{\n        application: \"myapp\",\n        privileges: [\n            \"admin\",\n            \"read\",\n        ],\n        resources: [\"*\"],\n    }],\n    runAs: [\"other_user\"],\n    metadata: JSON.stringify({\n        version: 1,\n    }),\n});\nexport const role = roleElasticsearchSecurityRole;\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nrole_elasticsearch_security_role = elasticstack.ElasticsearchSecurityRole(\"roleElasticsearchSecurityRole\",\n    clusters=[\"all\"],\n    indices=[elasticstack.ElasticsearchSecurityRoleIndexArgs(\n        names=[\n            \"index1\",\n            \"index2\",\n        ],\n        privileges=[\"all\"],\n    )],\n    applications=[elasticstack.ElasticsearchSecurityRoleApplicationArgs(\n        application=\"myapp\",\n        privileges=[\n            \"admin\",\n            \"read\",\n        ],\n        resources=[\"*\"],\n    )],\n    run_as=[\"other_user\"],\n    metadata=json.dumps({\n        \"version\": 1,\n    }))\npulumi.export(\"role\", role_elasticsearch_security_role)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var roleElasticsearchSecurityRole = new Elasticstack.ElasticsearchSecurityRole(\"roleElasticsearchSecurityRole\", new Elasticstack.ElasticsearchSecurityRoleArgs\n        {\n            Clusters = \n            {\n                \"all\",\n            },\n            Indices = \n            {\n                new Elasticstack.Inputs.ElasticsearchSecurityRoleIndexArgs\n                {\n                    Names = \n                    {\n                        \"index1\",\n                        \"index2\",\n                    },\n                    Privileges = \n                    {\n                        \"all\",\n                    },\n                },\n            },\n            Applications = \n            {\n                new Elasticstack.Inputs.ElasticsearchSecurityRoleApplicationArgs\n                {\n                    Application = \"myapp\",\n                    Privileges = \n                    {\n                        \"admin\",\n                        \"read\",\n                    },\n                    Resources = \n                    {\n                        \"*\",\n                    },\n                },\n            },\n            RunAs = \n            {\n                \"other_user\",\n            },\n            Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"version\", 1 },\n            }),\n        });\n        this.Role = roleElasticsearchSecurityRole;\n    }\n\n    [Output(\"role\")]\n    public Output\u003cstring\u003e Role { get; set; }\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"version\": 1,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\troleElasticsearchSecurityRole, err := elasticstack.NewElasticsearchSecurityRole(ctx, \"roleElasticsearchSecurityRole\", \u0026elasticstack.ElasticsearchSecurityRoleArgs{\n\t\t\tClusters: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"all\"),\n\t\t\t},\n\t\t\tIndices: ElasticsearchSecurityRoleIndexArray{\n\t\t\t\t\u0026ElasticsearchSecurityRoleIndexArgs{\n\t\t\t\t\tNames: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"index1\"),\n\t\t\t\t\t\tpulumi.String(\"index2\"),\n\t\t\t\t\t},\n\t\t\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"all\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tApplications: ElasticsearchSecurityRoleApplicationArray{\n\t\t\t\t\u0026ElasticsearchSecurityRoleApplicationArgs{\n\t\t\t\t\tApplication: pulumi.String(\"myapp\"),\n\t\t\t\t\tPrivileges: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"admin\"),\n\t\t\t\t\t\tpulumi.String(\"read\"),\n\t\t\t\t\t},\n\t\t\t\t\tResources: pulumi.StringArray{\n\t\t\t\t\t\tpulumi.String(\"*\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tRunAs: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"other_user\"),\n\t\t\t},\n\t\t\tMetadata: pulumi.String(json0),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"role\", roleElasticsearchSecurityRole)\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchSecurityRole:ElasticsearchSecurityRole elasticstack_elasticsearch_security_role \u003ccluster_uuid\u003e/\u003crole name\u003e\n```\n\n ",
            "properties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleApplication:ElasticsearchSecurityRoleApplication"
                    },
                    "description": "A list of application privilege entries.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleElasticsearchConnection:ElasticsearchSecurityRoleElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "global": {
                    "type": "string",
                    "description": "An object defining global privileges.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleIndex:ElasticsearchSecurityRoleIndex"
                    },
                    "description": "A list of indices permissions entries.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional meta-data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                },
                "runAs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that the owners of this role can impersonate.\n"
                }
            },
            "required": [
                "id",
                "metadata",
                "name"
            ],
            "inputProperties": {
                "applications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleApplication:ElasticsearchSecurityRoleApplication"
                    },
                    "description": "A list of application privilege entries.\n"
                },
                "clusters": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleElasticsearchConnection:ElasticsearchSecurityRoleElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "global": {
                    "type": "string",
                    "description": "An object defining global privileges.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleIndex:ElasticsearchSecurityRoleIndex"
                    },
                    "description": "A list of indices permissions entries.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Optional meta-data.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the role.\n"
                },
                "runAs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of users that the owners of this role can impersonate.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchSecurityRole resources.\n",
                "properties": {
                    "applications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleApplication:ElasticsearchSecurityRoleApplication"
                        },
                        "description": "A list of application privilege entries.\n"
                    },
                    "clusters": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleElasticsearchConnection:ElasticsearchSecurityRoleElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "global": {
                        "type": "string",
                        "description": "An object defining global privileges.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/elasticstack:index/ElasticsearchSecurityRoleIndex:ElasticsearchSecurityRoleIndex"
                        },
                        "description": "A list of indices permissions entries.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Optional meta-data.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the role.\n"
                    },
                    "runAs": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of users that the owners of this role can impersonate.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchSecurityUser:ElasticsearchSecurityUser": {
            "description": "Adds and updates users in the native realm. These users are commonly referred to as native users. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst user = new elasticstack.ElasticsearchSecurityUser(\"user\", {\n    username: \"testuser\",\n    passwordHash: `$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO`,\n    roles: [\"kibana_user\"],\n    metadata: JSON.stringify({\n        env: \"testing\",\n        open: false,\n        number: 49,\n    }),\n    elasticsearchConnection: {\n        endpoints: [\"http://localhost:9200\"],\n        username: \"elastic\",\n        password: \"changeme\",\n    },\n});\nconst dev = new elasticstack.ElasticsearchSecurityUser(\"dev\", {\n    username: \"devuser\",\n    password: \"1234567890\",\n    roles: [\"kibana_user\"],\n    metadata: JSON.stringify({\n        env: \"testing\",\n        open: false,\n        number: 49,\n    }),\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_elasticstack as elasticstack\n\nuser = elasticstack.ElasticsearchSecurityUser(\"user\",\n    username=\"testuser\",\n    password_hash=\"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\",\n    roles=[\"kibana_user\"],\n    metadata=json.dumps({\n        \"env\": \"testing\",\n        \"open\": False,\n        \"number\": 49,\n    }),\n    elasticsearch_connection=elasticstack.ElasticsearchSecurityUserElasticsearchConnectionArgs(\n        endpoints=[\"http://localhost:9200\"],\n        username=\"elastic\",\n        password=\"changeme\",\n    ))\ndev = elasticstack.ElasticsearchSecurityUser(\"dev\",\n    username=\"devuser\",\n    password=\"1234567890\",\n    roles=[\"kibana_user\"],\n    metadata=json.dumps({\n        \"env\": \"testing\",\n        \"open\": False,\n        \"number\": 49,\n    }))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Elasticstack.ElasticsearchSecurityUser(\"user\", new Elasticstack.ElasticsearchSecurityUserArgs\n        {\n            Username = \"testuser\",\n            PasswordHash = \"$2a$10$rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\",\n            Roles = \n            {\n                \"kibana_user\",\n            },\n            Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"env\", \"testing\" },\n                { \"open\", false },\n                { \"number\", 49 },\n            }),\n            ElasticsearchConnection = new Elasticstack.Inputs.ElasticsearchSecurityUserElasticsearchConnectionArgs\n            {\n                Endpoints = \n                {\n                    \"http://localhost:9200\",\n                },\n                Username = \"elastic\",\n                Password = \"changeme\",\n            },\n        });\n        var dev = new Elasticstack.ElasticsearchSecurityUser(\"dev\", new Elasticstack.ElasticsearchSecurityUserArgs\n        {\n            Username = \"devuser\",\n            Password = \"1234567890\",\n            Roles = \n            {\n                \"kibana_user\",\n            },\n            Metadata = JsonSerializer.Serialize(new Dictionary\u003cstring, object?\u003e\n            {\n                { \"env\", \"testing\" },\n                { \"open\", false },\n                { \"number\", 49 },\n            }),\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttmpJSON0, err := json.Marshal(map[string]interface{}{\n\t\t\t\"env\":    \"testing\",\n\t\t\t\"open\":   false,\n\t\t\t\"number\": 49,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err := elasticstack.NewElasticsearchSecurityUser(ctx, \"user\", \u0026elasticstack.ElasticsearchSecurityUserArgs{\n\t\t\tUsername:     pulumi.String(\"testuser\"),\n\t\t\tPasswordHash: pulumi.String(fmt.Sprintf(\"%v%v%v%v%v%v\", \"$\", \"2a\", \"$\", \"10\", \"$\", \"rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO\")),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"kibana_user\"),\n\t\t\t},\n\t\t\tMetadata: pulumi.String(json0),\n\t\t\tElasticsearchConnection: \u0026ElasticsearchSecurityUserElasticsearchConnectionArgs{\n\t\t\t\tEndpoints: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"http://localhost:9200\"),\n\t\t\t\t},\n\t\t\t\tUsername: pulumi.String(\"elastic\"),\n\t\t\t\tPassword: pulumi.String(\"changeme\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON1, err := json.Marshal(map[string]interface{}{\n\t\t\t\"env\":    \"testing\",\n\t\t\t\"open\":   false,\n\t\t\t\"number\": 49,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson1 := string(tmpJSON1)\n\t\t_, err = elasticstack.NewElasticsearchSecurityUser(ctx, \"dev\", \u0026elasticstack.ElasticsearchSecurityUserArgs{\n\t\t\tUsername: pulumi.String(\"devuser\"),\n\t\t\tPassword: pulumi.String(\"1234567890\"),\n\t\t\tRoles: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"kibana_user\"),\n\t\t\t},\n\t\t\tMetadata: pulumi.String(json1),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchSecurityUser:ElasticsearchSecurityUser user \u003ccluster_uuid\u003e/elastic\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSecurityUserElasticsearchConnection:ElasticsearchSecurityUserElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user is enabled. The default value is true.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the user.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Arbitrary metadata that you want to associate with the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user’s password. Passwords must be at least 6 characters long.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                },
                "username": {
                    "type": "string",
                    "description": "An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).\n"
                }
            },
            "required": [
                "id",
                "metadata",
                "roles",
                "username"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSecurityUserElasticsearchConnection:ElasticsearchSecurityUserElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "email": {
                    "type": "string",
                    "description": "The email of the user.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether the user is enabled. The default value is true.\n"
                },
                "fullName": {
                    "type": "string",
                    "description": "The full name of the user.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Arbitrary metadata that you want to associate with the user.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The user’s password. Passwords must be at least 6 characters long.\n"
                },
                "passwordHash": {
                    "type": "string",
                    "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                },
                "username": {
                    "type": "string",
                    "description": "An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).\n"
                }
            },
            "requiredInputs": [
                "roles",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchSecurityUser resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSecurityUserElasticsearchConnection:ElasticsearchSecurityUserElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "The email of the user.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Specifies whether the user is enabled. The default value is true.\n"
                    },
                    "fullName": {
                        "type": "string",
                        "description": "The full name of the user.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Arbitrary metadata that you want to associate with the user.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The user’s password. Passwords must be at least 6 characters long.\n"
                    },
                    "passwordHash": {
                        "type": "string",
                        "description": "A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A set of roles the user has. The roles determine the user’s access permissions. Default is [].\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchSnapshotLifecycle:ElasticsearchSnapshotLifecycle": {
            "description": "Creates or updates a snapshot lifecycle policy. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\n// create a repository for snapshots\nconst repo = new elasticstack.ElasticsearchSnapshotRepository(\"repo\", {fs: {\n    location: \"/tmp/snapshots\",\n    compress: true,\n    maxRestoreBytesPerSec: \"20mb\",\n}});\n// create a SLM policy and use the above created repository\nconst slmPolicy = new elasticstack.ElasticsearchSnapshotLifecycle(\"slmPolicy\", {\n    schedule: \"0 30 1 * * ?\",\n    snapshotName: \"\u003cdaily-snap-{now/d}\u003e\",\n    repository: repo.name,\n    indices: [\n        \"data-*\",\n        \"important\",\n    ],\n    ignoreUnavailable: false,\n    includeGlobalState: false,\n    expireAfter: \"30d\",\n    minCount: 5,\n    maxCount: 50,\n});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\n# create a repository for snapshots\nrepo = elasticstack.ElasticsearchSnapshotRepository(\"repo\", fs=elasticstack.ElasticsearchSnapshotRepositoryFsArgs(\n    location=\"/tmp/snapshots\",\n    compress=True,\n    max_restore_bytes_per_sec=\"20mb\",\n))\n# create a SLM policy and use the above created repository\nslm_policy = elasticstack.ElasticsearchSnapshotLifecycle(\"slmPolicy\",\n    schedule=\"0 30 1 * * ?\",\n    snapshot_name=\"\u003cdaily-snap-{now/d}\u003e\",\n    repository=repo.name,\n    indices=[\n        \"data-*\",\n        \"important\",\n    ],\n    ignore_unavailable=False,\n    include_global_state=False,\n    expire_after=\"30d\",\n    min_count=5,\n    max_count=50)\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // create a repository for snapshots\n        var repo = new Elasticstack.ElasticsearchSnapshotRepository(\"repo\", new Elasticstack.ElasticsearchSnapshotRepositoryArgs\n        {\n            Fs = new Elasticstack.Inputs.ElasticsearchSnapshotRepositoryFsArgs\n            {\n                Location = \"/tmp/snapshots\",\n                Compress = true,\n                MaxRestoreBytesPerSec = \"20mb\",\n            },\n        });\n        // create a SLM policy and use the above created repository\n        var slmPolicy = new Elasticstack.ElasticsearchSnapshotLifecycle(\"slmPolicy\", new Elasticstack.ElasticsearchSnapshotLifecycleArgs\n        {\n            Schedule = \"0 30 1 * * ?\",\n            SnapshotName = \"\u003cdaily-snap-{now/d}\u003e\",\n            Repository = repo.Name,\n            Indices = \n            {\n                \"data-*\",\n                \"important\",\n            },\n            IgnoreUnavailable = false,\n            IncludeGlobalState = false,\n            ExpireAfter = \"30d\",\n            MinCount = 5,\n            MaxCount = 50,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trepo, err := elasticstack.NewElasticsearchSnapshotRepository(ctx, \"repo\", \u0026elasticstack.ElasticsearchSnapshotRepositoryArgs{\n\t\t\tFs: \u0026ElasticsearchSnapshotRepositoryFsArgs{\n\t\t\t\tLocation:              pulumi.String(\"/tmp/snapshots\"),\n\t\t\t\tCompress:              pulumi.Bool(true),\n\t\t\t\tMaxRestoreBytesPerSec: pulumi.String(\"20mb\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchSnapshotLifecycle(ctx, \"slmPolicy\", \u0026elasticstack.ElasticsearchSnapshotLifecycleArgs{\n\t\t\tSchedule:     pulumi.String(\"0 30 1 * * ?\"),\n\t\t\tSnapshotName: pulumi.String(\"\u003cdaily-snap-{now/d}\u003e\"),\n\t\t\tRepository:   repo.Name,\n\t\t\tIndices: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"data-*\"),\n\t\t\t\tpulumi.String(\"important\"),\n\t\t\t},\n\t\t\tIgnoreUnavailable:  pulumi.Bool(false),\n\t\t\tIncludeGlobalState: pulumi.Bool(false),\n\t\t\tExpireAfter:        pulumi.String(\"30d\"),\n\t\t\tMinCount:           pulumi.Int(5),\n\t\t\tMaxCount:           pulumi.Int(50),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchSnapshotLifecycle:ElasticsearchSnapshotLifecycle my_policy \u003ccluster_uuid\u003e/\u003cslm policy name\u003e\n```\n\n ",
            "properties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotLifecycleElasticsearchConnection:ElasticsearchSnapshotLifecycleElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "expandWildcards": {
                    "type": "string",
                    "description": "Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.\n"
                },
                "expireAfter": {
                    "type": "string",
                    "description": "Time period after which a snapshot is considered expired and eligible for deletion.\n"
                },
                "featureStates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Feature states to include in the snapshot.\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "ignoreUnavailable": {
                    "type": "boolean",
                    "description": "If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.\n"
                },
                "includeGlobalState": {
                    "type": "boolean",
                    "description": "If `true`, include the cluster state in the snapshot.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma-separated list of data streams and indices to include in the snapshot.\n"
                },
                "maxCount": {
                    "type": "integer",
                    "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Attaches arbitrary metadata to the snapshot.\n"
                },
                "minCount": {
                    "type": "integer",
                    "description": "Minimum number of snapshots to retain, even if the snapshots have expired.\n"
                },
                "name": {
                    "type": "string",
                    "description": "ID for the snapshot lifecycle policy you want to create or update.\n"
                },
                "partial": {
                    "type": "boolean",
                    "description": "If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository used to store snapshots created by this policy.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Periodic or absolute schedule at which the policy creates snapshots.\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Name automatically assigned to each snapshot created by the policy.\n"
                }
            },
            "required": [
                "featureStates",
                "id",
                "indices",
                "metadata",
                "name",
                "repository",
                "schedule"
            ],
            "inputProperties": {
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotLifecycleElasticsearchConnection:ElasticsearchSnapshotLifecycleElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "expandWildcards": {
                    "type": "string",
                    "description": "Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.\n"
                },
                "expireAfter": {
                    "type": "string",
                    "description": "Time period after which a snapshot is considered expired and eligible for deletion.\n"
                },
                "featureStates": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Feature states to include in the snapshot.\n"
                },
                "ignoreUnavailable": {
                    "type": "boolean",
                    "description": "If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.\n"
                },
                "includeGlobalState": {
                    "type": "boolean",
                    "description": "If `true`, include the cluster state in the snapshot.\n"
                },
                "indices": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Comma-separated list of data streams and indices to include in the snapshot.\n"
                },
                "maxCount": {
                    "type": "integer",
                    "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired.\n"
                },
                "metadata": {
                    "type": "string",
                    "description": "Attaches arbitrary metadata to the snapshot.\n"
                },
                "minCount": {
                    "type": "integer",
                    "description": "Minimum number of snapshots to retain, even if the snapshots have expired.\n"
                },
                "name": {
                    "type": "string",
                    "description": "ID for the snapshot lifecycle policy you want to create or update.\n"
                },
                "partial": {
                    "type": "boolean",
                    "description": "If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Repository used to store snapshots created by this policy.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "Periodic or absolute schedule at which the policy creates snapshots.\n"
                },
                "snapshotName": {
                    "type": "string",
                    "description": "Name automatically assigned to each snapshot created by the policy.\n"
                }
            },
            "requiredInputs": [
                "repository",
                "schedule"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchSnapshotLifecycle resources.\n",
                "properties": {
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotLifecycleElasticsearchConnection:ElasticsearchSnapshotLifecycleElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "expandWildcards": {
                        "type": "string",
                        "description": "Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.\n"
                    },
                    "expireAfter": {
                        "type": "string",
                        "description": "Time period after which a snapshot is considered expired and eligible for deletion.\n"
                    },
                    "featureStates": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Feature states to include in the snapshot.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "ignoreUnavailable": {
                        "type": "boolean",
                        "description": "If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.\n"
                    },
                    "includeGlobalState": {
                        "type": "boolean",
                        "description": "If `true`, include the cluster state in the snapshot.\n"
                    },
                    "indices": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Comma-separated list of data streams and indices to include in the snapshot.\n"
                    },
                    "maxCount": {
                        "type": "integer",
                        "description": "Maximum number of snapshots to retain, even if the snapshots have not yet expired.\n"
                    },
                    "metadata": {
                        "type": "string",
                        "description": "Attaches arbitrary metadata to the snapshot.\n"
                    },
                    "minCount": {
                        "type": "integer",
                        "description": "Minimum number of snapshots to retain, even if the snapshots have expired.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "ID for the snapshot lifecycle policy you want to create or update.\n"
                    },
                    "partial": {
                        "type": "boolean",
                        "description": "If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.\n"
                    },
                    "repository": {
                        "type": "string",
                        "description": "Repository used to store snapshots created by this policy.\n"
                    },
                    "schedule": {
                        "type": "string",
                        "description": "Periodic or absolute schedule at which the policy creates snapshots.\n"
                    },
                    "snapshotName": {
                        "type": "string",
                        "description": "Name automatically assigned to each snapshot created by the policy.\n"
                    }
                },
                "type": "object"
            }
        },
        "elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository": {
            "description": "Registers or updates a snapshot repository. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/put-snapshot-repo-api.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst myUrlRepo = new elasticstack.ElasticsearchSnapshotRepository(\"my_url_repo\", {\n    url: {\n        url: \"https://example.com/repo\",\n    },\n});\nconst myFsRepo = new elasticstack.ElasticsearchSnapshotRepository(\"my_fs_repo\", {\n    fs: {\n        compress: true,\n        location: \"/tmp\",\n        maxRestoreBytesPerSec: \"10mb\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nmy_url_repo = elasticstack.ElasticsearchSnapshotRepository(\"myUrlRepo\", url=elasticstack.ElasticsearchSnapshotRepositoryUrlArgs(\n    url=\"https://example.com/repo\",\n))\nmy_fs_repo = elasticstack.ElasticsearchSnapshotRepository(\"myFsRepo\", fs=elasticstack.ElasticsearchSnapshotRepositoryFsArgs(\n    compress=True,\n    location=\"/tmp\",\n    max_restore_bytes_per_sec=\"10mb\",\n))\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myUrlRepo = new Elasticstack.ElasticsearchSnapshotRepository(\"myUrlRepo\", new Elasticstack.ElasticsearchSnapshotRepositoryArgs\n        {\n            Url = new Elasticstack.Inputs.ElasticsearchSnapshotRepositoryUrlArgs\n            {\n                Url = \"https://example.com/repo\",\n            },\n        });\n        var myFsRepo = new Elasticstack.ElasticsearchSnapshotRepository(\"myFsRepo\", new Elasticstack.ElasticsearchSnapshotRepositoryArgs\n        {\n            Fs = new Elasticstack.Inputs.ElasticsearchSnapshotRepositoryFsArgs\n            {\n                Compress = true,\n                Location = \"/tmp\",\n                MaxRestoreBytesPerSec = \"10mb\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := elasticstack.NewElasticsearchSnapshotRepository(ctx, \"myUrlRepo\", \u0026elasticstack.ElasticsearchSnapshotRepositoryArgs{\n\t\t\tUrl: \u0026ElasticsearchSnapshotRepositoryUrlArgs{\n\t\t\t\tUrl: pulumi.String(\"https://example.com/repo\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchSnapshotRepository(ctx, \"myFsRepo\", \u0026elasticstack.ElasticsearchSnapshotRepositoryArgs{\n\t\t\tFs: \u0026ElasticsearchSnapshotRepositoryFsArgs{\n\t\t\t\tCompress:              pulumi.Bool(true),\n\t\t\t\tLocation:              pulumi.String(\"/tmp\"),\n\t\t\t\tMaxRestoreBytesPerSec: pulumi.String(\"10mb\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\n\n\n```sh\n $ pulumi import elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository my_repository \u003ccluster_uuid\u003e/\u003crepository name\u003e\n```\n\n ",
            "properties": {
                "azure": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryAzure:ElasticsearchSnapshotRepositoryAzure",
                    "description": "Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryElasticsearchConnection:ElasticsearchSnapshotRepositoryElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "fs": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryFs:ElasticsearchSnapshotRepositoryFs",
                    "description": "Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.\n"
                },
                "gcs": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryGcs:ElasticsearchSnapshotRepositoryGcs",
                    "description": "Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html\n"
                },
                "hdfs": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryHdfs:ElasticsearchSnapshotRepositoryHdfs",
                    "description": "Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html\n"
                },
                "id": {
                    "type": "string",
                    "description": "Internal identifier of the resource\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the snapshot repository to register or update.\n"
                },
                "s3": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryS3:ElasticsearchSnapshotRepositoryS3",
                    "description": "Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html\n"
                },
                "url": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryUrl:ElasticsearchSnapshotRepositoryUrl",
                    "description": "URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.\n"
                },
                "verify": {
                    "type": "boolean",
                    "description": "If true, the request verifies the repository is functional on all master and data nodes in the cluster.\n"
                }
            },
            "required": [
                "id",
                "name"
            ],
            "inputProperties": {
                "azure": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryAzure:ElasticsearchSnapshotRepositoryAzure",
                    "description": "Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html\n"
                },
                "elasticsearchConnection": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryElasticsearchConnection:ElasticsearchSnapshotRepositoryElasticsearchConnection",
                    "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                },
                "fs": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryFs:ElasticsearchSnapshotRepositoryFs",
                    "description": "Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.\n"
                },
                "gcs": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryGcs:ElasticsearchSnapshotRepositoryGcs",
                    "description": "Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html\n"
                },
                "hdfs": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryHdfs:ElasticsearchSnapshotRepositoryHdfs",
                    "description": "Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the snapshot repository to register or update.\n"
                },
                "s3": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryS3:ElasticsearchSnapshotRepositoryS3",
                    "description": "Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html\n"
                },
                "url": {
                    "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryUrl:ElasticsearchSnapshotRepositoryUrl",
                    "description": "URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.\n"
                },
                "verify": {
                    "type": "boolean",
                    "description": "If true, the request verifies the repository is functional on all master and data nodes in the cluster.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ElasticsearchSnapshotRepository resources.\n",
                "properties": {
                    "azure": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryAzure:ElasticsearchSnapshotRepositoryAzure",
                        "description": "Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html\n"
                    },
                    "elasticsearchConnection": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryElasticsearchConnection:ElasticsearchSnapshotRepositoryElasticsearchConnection",
                        "description": "Used to establish connection to Elasticsearch server. Overrides environment variables if present.\n"
                    },
                    "fs": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryFs:ElasticsearchSnapshotRepositoryFs",
                        "description": "Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.\n"
                    },
                    "gcs": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryGcs:ElasticsearchSnapshotRepositoryGcs",
                        "description": "Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html\n"
                    },
                    "hdfs": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryHdfs:ElasticsearchSnapshotRepositoryHdfs",
                        "description": "Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the snapshot repository to register or update.\n"
                    },
                    "s3": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryS3:ElasticsearchSnapshotRepositoryS3",
                        "description": "Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html\n"
                    },
                    "url": {
                        "$ref": "#/types/elasticstack:index/ElasticsearchSnapshotRepositoryUrl:ElasticsearchSnapshotRepositoryUrl",
                        "description": "URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.\n"
                    },
                    "verify": {
                        "type": "boolean",
                        "description": "If true, the request verifies the repository is functional on all master and data nodes in the cluster.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "elasticstack:index/elasticsearchIngestProcessorAppend:ElasticsearchIngestProcessorAppend": {
            "description": "Helper data source to which can be used to create a processor to append one or more values to an existing array if the field already exists and it is an array.\nConverts a scalar to an array and appends one or more values to it if the field exists and it is a scalar. Creates an array containing the provided values if the field doesn’t exist.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/append-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst tags = elasticstack.ElasticsearchIngestProcessorAppend({\n    field: \"tags\",\n    values: [\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [tags.then(tags =\u003e tags.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ntags = elasticstack.elasticsearch_ingest_processor_append(field=\"tags\",\n    values=[\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ])\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[tags.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var tags = Output.Create(Elasticstack.ElasticsearchIngestProcessorAppend.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorAppendArgs\n        {\n            Field = \"tags\",\n            Values = \n            {\n                \"production\",\n                \"{{{app}}}\",\n                \"{{{owner}}}\",\n            },\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                tags.Apply(tags =\u003e tags.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttags, err := elasticstack.ElasticsearchIngestProcessorAppend(ctx, \u0026ElasticsearchIngestProcessorAppendArgs{\n\t\t\tField: \"tags\",\n\t\t\tValues: []string{\n\t\t\t\t\"production\",\n\t\t\t\t\"{{{app}}}\",\n\t\t\t\t\"{{{owner}}}\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(tags.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorAppend.\n",
                "properties": {
                    "allowDuplicates": {
                        "type": "boolean",
                        "description": "If `false`, the processor does not append values already present in the field.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be appended to.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value. Applies only when value is a template snippet. Must be one of `application/json`, `text/plain`, or `application/x-www-form-urlencoded`.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The value to be appended.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "values"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorAppend.\n",
                "properties": {
                    "allowDuplicates": {
                        "type": "boolean",
                        "description": "If `false`, the processor does not append values already present in the field.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be appended to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value. Applies only when value is a template snippet. Must be one of `application/json`, `text/plain`, or `application/x-www-form-urlencoded`.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The value to be appended.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "values"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorBytes:ElasticsearchIngestProcessorBytes": {
            "description": "Helper data source to which can be used to create a processor to convert a human readable byte value (e.g. 1kb) to its value in bytes (e.g. 1024). If the field is an array of strings, all members of the array will be converted.\n\nSupported human readable units are \"b\", \"kb\", \"mb\", \"gb\", \"tb\", \"pb\" case insensitive. An error will occur if the field is not a supported format or resultant value exceeds 2^63.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/bytes-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst bytes = elasticstack.ElasticsearchIngestProcessorBytes({\n    field: \"file.size\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [bytes.then(bytes =\u003e bytes.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nbytes = elasticstack.elasticsearch_ingest_processor_bytes(field=\"file.size\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[bytes.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var bytes = Output.Create(Elasticstack.ElasticsearchIngestProcessorBytes.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorBytesArgs\n        {\n            Field = \"file.size\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                bytes.Apply(bytes =\u003e bytes.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tbytes, err := elasticstack.ElasticsearchIngestProcessorBytes(ctx, \u0026ElasticsearchIngestProcessorBytesArgs{\n\t\t\tField: \"file.size\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(bytes.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorBytes.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to convert\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorBytes.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to convert\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorCircle:ElasticsearchIngestProcessorCircle": {
            "description": "Helper data source to which can be used to create a processor to convert circle definitions of shapes to regular polygons which approximate them.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst circle = elasticstack.ElasticsearchIngestProcessorCircle({\n    field: \"circle\",\n    errorDistance: 28.1,\n    shapeType: \"geo_shape\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [circle.then(circle =\u003e circle.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ncircle = elasticstack.elasticsearch_ingest_processor_circle(field=\"circle\",\n    error_distance=28.1,\n    shape_type=\"geo_shape\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[circle.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var circle = Output.Create(Elasticstack.ElasticsearchIngestProcessorCircle.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorCircleArgs\n        {\n            Field = \"circle\",\n            ErrorDistance = 28.1,\n            ShapeType = \"geo_shape\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                circle.Apply(circle =\u003e circle.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcircle, err := elasticstack.ElasticsearchIngestProcessorCircle(ctx, \u0026ElasticsearchIngestProcessorCircleArgs{\n\t\t\tField:         \"circle\",\n\t\t\tErrorDistance: 28.1,\n\t\t\tShapeType:     \"geo_shape\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(circle.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorCircle.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "errorDistance": {
                        "type": "number",
                        "description": "The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geo_shape`, unit-less for `shape`)\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "shapeType": {
                        "type": "string",
                        "description": "Which field mapping type is to be used when processing the circle.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "errorDistance",
                    "field",
                    "shapeType"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorCircle.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "errorDistance": {
                        "type": "number",
                        "description": "The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geo_shape`, unit-less for `shape`)\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "shapeType": {
                        "type": "string",
                        "description": "Which field mapping type is to be used when processing the circle.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "errorDistance",
                    "field",
                    "id",
                    "json",
                    "shapeType"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorCommunityId:ElasticsearchIngestProcessorCommunityId": {
            "description": "Helper data source to which can be used to create a processor to compute the Community ID for network flow data as defined in the [Community ID Specification](https://github.com/corelight/community-id-spec). \nYou can use a community ID to correlate network events related to a single flow.\n\nThe community ID processor reads network flow data from related [Elastic Common Schema (ECS)](https://www.elastic.co/guide/en/ecs/1.12) fields by default. If you use the ECS, no configuration is required.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/community-id-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst community = elasticstack.ElasticsearchIngestProcessorCommunityId({});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [community.then(community =\u003e community.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ncommunity = elasticstack.elasticsearch_ingest_processor_community_id()\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[community.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var community = Output.Create(Elasticstack.ElasticsearchIngestProcessorCommunityId.InvokeAsync());\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                community.Apply(community =\u003e community.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcommunity, err := elasticstack.ElasticsearchIngestProcessorCommunityId(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(community.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorCommunityId.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "destinationPort": {
                        "type": "integer",
                        "description": "Field containing the destination port.\n"
                    },
                    "ianaNumber": {
                        "type": "integer",
                        "description": "Field containing the IANA number.\n"
                    },
                    "icmpCode": {
                        "type": "integer",
                        "description": "Field containing the ICMP code.\n"
                    },
                    "icmpType": {
                        "type": "integer",
                        "description": "Field containing the ICMP type.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "sourcePort": {
                        "type": "integer",
                        "description": "Field containing the source port.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the community ID.\n"
                    },
                    "transport": {
                        "type": "string",
                        "description": "Field containing the transport protocol. Used only when the `iana_number` field is not present.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorCommunityId.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "destinationPort": {
                        "type": "integer",
                        "description": "Field containing the destination port.\n"
                    },
                    "ianaNumber": {
                        "type": "integer",
                        "description": "Field containing the IANA number.\n"
                    },
                    "icmpCode": {
                        "type": "integer",
                        "description": "Field containing the ICMP code.\n"
                    },
                    "icmpType": {
                        "type": "integer",
                        "description": "Field containing the ICMP type.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Seed for the community ID hash. Must be between 0 and 65535 (inclusive). The seed can prevent hash collisions between network domains, such as a staging and production network that use the same addressing scheme.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "sourcePort": {
                        "type": "integer",
                        "description": "Field containing the source port.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the community ID.\n"
                    },
                    "transport": {
                        "type": "string",
                        "description": "Field containing the transport protocol. Used only when the `iana_number` field is not present.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorConvert:ElasticsearchIngestProcessorConvert": {
            "description": "Helper data source to which can be used to convert a field in the currently ingested document to a different type, such as converting a string to an integer. If the field value is an array, all members will be converted.\n\nThe supported types include: `integer`, `long`, `float`, `double`, `string`, `boolean`, `ip`, and `auto`.\n\nSpecifying `boolean` will set the field to true if its string value is equal to true (ignore case), to false if its string value is equal to false (ignore case), or it will throw an exception otherwise.\n\nSpecifying `ip` will set the target field to the value of `field` if it contains a valid IPv4 or IPv6 address that can be indexed into an IP field type.\n\nSpecifying `auto` will attempt to convert the string-valued `field` into the closest non-string, non-IP type. For example, a field whose value is \"true\" will be converted to its respective boolean type: true. Do note that float takes precedence of double in auto. A value of \"242.15\" will \"automatically\" be converted to 242.15 of type `float`. If a provided field cannot be appropriately converted, the processor will still process successfully and leave the field value as-is. In such a case, `target_field` will be updated with the unconverted field value.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/convert-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst convert = elasticstack.ElasticsearchIngestProcessorConvert({\n    description: \"converts the content of the id field to an integer\",\n    field: \"id\",\n    type: \"integer\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [convert.then(convert =\u003e convert.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nconvert = elasticstack.elasticsearch_ingest_processor_convert(description=\"converts the content of the id field to an integer\",\n    field=\"id\",\n    type=\"integer\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[convert.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var convert = Output.Create(Elasticstack.ElasticsearchIngestProcessorConvert.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorConvertArgs\n        {\n            Description = \"converts the content of the id field to an integer\",\n            Field = \"id\",\n            Type = \"integer\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                convert.Apply(convert =\u003e convert.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"converts the content of the id field to an integer\"\n\t\tconvert, err := elasticstack.ElasticsearchIngestProcessorConvert(ctx, \u0026ElasticsearchIngestProcessorConvertArgs{\n\t\t\tDescription: \u0026opt0,\n\t\t\tField:       \"id\",\n\t\t\tType:        \"integer\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(convert.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorConvert.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field whose value is to be converted.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type to convert the existing value to\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "type"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorConvert.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field whose value is to be converted.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type to convert the existing value to\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "type"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorCsv:ElasticsearchIngestProcessorCsv": {
            "description": "Helper data source to which can be used to extract fields from CSV line out of a single text field within a document. Any empty field in CSV will be skipped.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/csv-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst csv = elasticstack.ElasticsearchIngestProcessorCsv({\n    field: \"my_field\",\n    targetFields: [\n        \"field1\",\n        \"field2\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [csv.then(csv =\u003e csv.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ncsv = elasticstack.elasticsearch_ingest_processor_csv(field=\"my_field\",\n    target_fields=[\n        \"field1\",\n        \"field2\",\n    ])\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[csv.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var csv = Output.Create(Elasticstack.ElasticsearchIngestProcessorCsv.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorCsvArgs\n        {\n            Field = \"my_field\",\n            TargetFields = \n            {\n                \"field1\",\n                \"field2\",\n            },\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                csv.Apply(csv =\u003e csv.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcsv, err := elasticstack.ElasticsearchIngestProcessorCsv(ctx, \u0026ElasticsearchIngestProcessorCsvArgs{\n\t\t\tField: \"my_field\",\n\t\t\tTargetFields: []string{\n\t\t\t\t\"field1\",\n\t\t\t\t\"field2\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(csv.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\nIf the `trim` option is enabled then any whitespace in the beginning and in the end of each unquoted field will be trimmed. For example with configuration above, a value of A, B will result in field field2 having value {nbsp}B (with space at the beginning). If trim is enabled A, B will result in field field2 having value B (no whitespace). Quoted fields will be left untouched.\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorCsv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "emptyValue": {
                        "type": "string",
                        "description": "Value used to fill empty fields, empty fields will be skipped if this is not provided.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to extract data from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "quote": {
                        "type": "string",
                        "description": "Quote used in CSV, has to be single character string\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "Separator used in CSV, has to be single character string.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The array of fields to assign extracted values to.\n"
                    },
                    "trim": {
                        "type": "boolean",
                        "description": "Trim whitespaces in unquoted fields.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "targetFields"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorCsv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "emptyValue": {
                        "type": "string",
                        "description": "Value used to fill empty fields, empty fields will be skipped if this is not provided.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to extract data from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "quote": {
                        "type": "string",
                        "description": "Quote used in CSV, has to be single character string\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "Separator used in CSV, has to be single character string.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetFields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The array of fields to assign extracted values to.\n"
                    },
                    "trim": {
                        "type": "boolean",
                        "description": "Trim whitespaces in unquoted fields.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "targetFields"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorDate:ElasticsearchIngestProcessorDate": {
            "description": "Helper data source to which can be used to parse dates from fields, and then uses the date or timestamp as the timestamp for the document. \nBy default, the date processor adds the parsed date as a new field called `@timestamp`. You can specify a different field by setting the `target_field` configuration parameter. Multiple date formats are supported as part of the same date processor definition. They will be used sequentially to attempt parsing the date field, in the same order they were defined as part of the processor definition.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/date-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\nHere is an example that adds the parsed date to the `timestamp` field based on the `initial_date` field:\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst date = elasticstack.ElasticsearchIngestProcessorDate({\n    field: \"initial_date\",\n    targetField: \"timestamp\",\n    formats: [\"dd/MM/yyyy HH:mm:ss\"],\n    timezone: \"Europe/Amsterdam\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [date.then(date =\u003e date.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndate = elasticstack.elasticsearch_ingest_processor_date(field=\"initial_date\",\n    target_field=\"timestamp\",\n    formats=[\"dd/MM/yyyy HH:mm:ss\"],\n    timezone=\"Europe/Amsterdam\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[date.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var date = Output.Create(Elasticstack.ElasticsearchIngestProcessorDate.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorDateArgs\n        {\n            Field = \"initial_date\",\n            TargetField = \"timestamp\",\n            Formats = \n            {\n                \"dd/MM/yyyy HH:mm:ss\",\n            },\n            Timezone = \"Europe/Amsterdam\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                date.Apply(date =\u003e date.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"timestamp\"\n\t\topt1 := \"Europe/Amsterdam\"\n\t\tdate, err := elasticstack.ElasticsearchIngestProcessorDate(ctx, \u0026ElasticsearchIngestProcessorDateArgs{\n\t\t\tField:       \"initial_date\",\n\t\t\tTargetField: \u0026opt0,\n\t\t\tFormats: []string{\n\t\t\t\t\"dd/MM/yyyy HH:mm:ss\",\n\t\t\t},\n\t\t\tTimezone: \u0026opt1,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(date.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorDate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date from.\n"
                    },
                    "formats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "outputFormat": {
                        "type": "string",
                        "description": "The format to use when writing the date to `target_field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the parsed date.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "formats"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorDate.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date from.\n"
                    },
                    "formats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "outputFormat": {
                        "type": "string",
                        "description": "The format to use when writing the date to `target_field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the parsed date.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "formats",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorDateIndexName:ElasticsearchIngestProcessorDateIndexName": {
            "description": "The purpose of this processor is to point documents to the right time based index based on a date or timestamp field in a document by using the date math index name support.\n\nThe processor sets the _index metadata field with a date math index name expression based on the provided index name prefix, a date or timestamp field in the documents being processed and the provided date rounding.\n\nFirst, this processor fetches the date or timestamp from a field in the document being processed. Optionally, date formatting can be configured on how the field’s value should be parsed into a date. Then this date, the provided index name prefix and the provided date rounding get formatted into a date math index name expression. Also here optionally date formatting can be specified on how the date should be formatted into a date math index name expression.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/date-index-name-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst dateIndexName = elasticstack.ElasticsearchIngestProcessorDateIndexName({\n    description: \"monthly date-time index naming\",\n    field: \"date1\",\n    indexNamePrefix: \"my-index-\",\n    dateRounding: \"M\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [dateIndexName.then(dateIndexName =\u003e dateIndexName.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndate_index_name = elasticstack.elasticsearch_ingest_processor_date_index_name(description=\"monthly date-time index naming\",\n    field=\"date1\",\n    index_name_prefix=\"my-index-\",\n    date_rounding=\"M\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[date_index_name.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dateIndexName = Output.Create(Elasticstack.ElasticsearchIngestProcessorDateIndexName.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorDateIndexNameArgs\n        {\n            Description = \"monthly date-time index naming\",\n            Field = \"date1\",\n            IndexNamePrefix = \"my-index-\",\n            DateRounding = \"M\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                dateIndexName.Apply(dateIndexName =\u003e dateIndexName.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"monthly date-time index naming\"\n\t\topt1 := \"my-index-\"\n\t\tdateIndexName, err := elasticstack.ElasticsearchIngestProcessorDateIndexName(ctx, \u0026ElasticsearchIngestProcessorDateIndexNameArgs{\n\t\t\tDescription:     \u0026opt0,\n\t\t\tField:           \"date1\",\n\t\t\tIndexNamePrefix: \u0026opt1,\n\t\t\tDateRounding:    \"M\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(dateIndexName.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorDateIndexName.\n",
                "properties": {
                    "dateFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.\n"
                    },
                    "dateRounding": {
                        "type": "string",
                        "description": "How to round the date when formatting the date into the index name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date or timestamp from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "indexNameFormat": {
                        "type": "string",
                        "description": "The format to be used when printing the parsed date into the index name.\n"
                    },
                    "indexNamePrefix": {
                        "type": "string",
                        "description": "A prefix of the index name to be prepended before the printed date.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateRounding",
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorDateIndexName.\n",
                "properties": {
                    "dateFormats": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An array of the expected date formats for parsing dates / timestamps in the document being preprocessed.\n"
                    },
                    "dateRounding": {
                        "type": "string",
                        "description": "How to round the date when formatting the date into the index name.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the date or timestamp from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "indexNameFormat": {
                        "type": "string",
                        "description": "The format to be used when printing the parsed date into the index name.\n"
                    },
                    "indexNamePrefix": {
                        "type": "string",
                        "description": "A prefix of the index name to be prepended before the printed date.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "locale": {
                        "type": "string",
                        "description": "The locale to use when parsing the date from the document being preprocessed, relevant when parsing month names or week days.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "timezone": {
                        "type": "string",
                        "description": "The timezone to use when parsing the date and when date math index supports resolves expressions into concrete index names.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dateRounding",
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorDissect:ElasticsearchIngestProcessorDissect": {
            "description": "Similar to the Grok Processor, dissect also extracts structured fields out of a single text field within a document. However unlike the Grok Processor, dissect does not use Regular Expressions. This allows dissect’s syntax to be simple and for some cases faster than the Grok Processor.\n\nDissect matches a single text field against a defined pattern.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/dissect-processor.html\n",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorDissect.\n",
                "properties": {
                    "appendSeparator": {
                        "type": "string",
                        "description": "The character(s) that separate the appended fields.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to dissect.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to apply to the field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "pattern"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorDissect.\n",
                "properties": {
                    "appendSeparator": {
                        "type": "string",
                        "description": "The character(s) that separate the appended fields.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to dissect.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to apply to the field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "pattern"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorDotExpander:ElasticsearchIngestProcessorDotExpander": {
            "description": "Expands a field with dots into an object field. This processor allows fields with dots in the name to be accessible by other processors in the pipeline. Otherwise these fields can’t be accessed by any processor.\n\nSee: elastic.co/guide/en/elasticsearch/reference/current/dot-expand-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst dotExpander = elasticstack.ElasticsearchIngestProcessorDotExpander({\n    field: \"foo.bar\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [dotExpander.then(dotExpander =\u003e dotExpander.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndot_expander = elasticstack.elasticsearch_ingest_processor_dot_expander(field=\"foo.bar\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[dot_expander.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var dotExpander = Output.Create(Elasticstack.ElasticsearchIngestProcessorDotExpander.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorDotExpanderArgs\n        {\n            Field = \"foo.bar\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                dotExpander.Apply(dotExpander =\u003e dotExpander.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tdotExpander, err := elasticstack.ElasticsearchIngestProcessorDotExpander(ctx, \u0026ElasticsearchIngestProcessorDotExpanderArgs{\n\t\t\tField: \"foo.bar\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(dotExpander.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorDotExpander.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to expand into an object field. If set to *, all top-level fields will be expanded.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "Controls the behavior when there is already an existing nested object that conflicts with the expanded field.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The field that contains the field to expand.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorDotExpander.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to expand into an object field. If set to *, all top-level fields will be expanded.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "Controls the behavior when there is already an existing nested object that conflicts with the expanded field.\n"
                    },
                    "path": {
                        "type": "string",
                        "description": "The field that contains the field to expand.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorDrop:ElasticsearchIngestProcessorDrop": {
            "description": "Drops the document without raising any errors. This is useful to prevent the document from getting indexed based on some condition.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/drop-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst drop = elasticstack.ElasticsearchIngestProcessorDrop({\n    \"if\": \"ctx.network_name == 'Guest'\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [drop.then(drop =\u003e drop.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndrop = elasticstack.elasticsearch_ingest_processor_drop(if_=\"ctx.network_name == 'Guest'\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[drop.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var drop = Output.Create(Elasticstack.ElasticsearchIngestProcessorDrop.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorDropArgs\n        {\n            If = \"ctx.network_name == 'Guest'\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                drop.Apply(drop =\u003e drop.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"ctx.network_name == 'Guest'\"\n\t\tdrop, err := elasticstack.ElasticsearchIngestProcessorDrop(ctx, \u0026ElasticsearchIngestProcessorDropArgs{\n\t\t\tIf: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(drop.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorDrop.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorDrop.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorEnrich:ElasticsearchIngestProcessorEnrich": {
            "description": "The enrich processor can enrich documents with data from another index. See enrich data section for more information about how to set this up.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-enriching-data.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/enrich-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst enrich = elasticstack.ElasticsearchIngestProcessorEnrich({\n    policyName: \"users-policy\",\n    field: \"email\",\n    targetField: \"user\",\n    maxMatches: 1,\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [enrich.then(enrich =\u003e enrich.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nenrich = elasticstack.elasticsearch_ingest_processor_enrich(policy_name=\"users-policy\",\n    field=\"email\",\n    target_field=\"user\",\n    max_matches=1)\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[enrich.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var enrich = Output.Create(Elasticstack.ElasticsearchIngestProcessorEnrich.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorEnrichArgs\n        {\n            PolicyName = \"users-policy\",\n            Field = \"email\",\n            TargetField = \"user\",\n            MaxMatches = 1,\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                enrich.Apply(enrich =\u003e enrich.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := 1\n\t\tenrich, err := elasticstack.ElasticsearchIngestProcessorEnrich(ctx, \u0026ElasticsearchIngestProcessorEnrichArgs{\n\t\t\tPolicyName:  \"users-policy\",\n\t\t\tField:       \"email\",\n\t\t\tTargetField: \"user\",\n\t\t\tMaxMatches:  \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(enrich.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorEnrich.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field in the input document that matches the policies match_field used to retrieve the enrichment data.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "maxMatches": {
                        "type": "integer",
                        "description": "The maximum number of matched documents to include under the configured target field.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The name of the enrich policy to use.\n"
                    },
                    "shapeRelation": {
                        "type": "string",
                        "description": "A spatial relation operator used to match the geoshape of incoming documents to documents in the enrich index.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Field added to incoming documents to contain enrich data.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "policyName",
                    "targetField"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorEnrich.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field in the input document that matches the policies match_field used to retrieve the enrichment data.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "maxMatches": {
                        "type": "integer",
                        "description": "The maximum number of matched documents to include under the configured target field.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "policyName": {
                        "type": "string",
                        "description": "The name of the enrich policy to use.\n"
                    },
                    "shapeRelation": {
                        "type": "string",
                        "description": "A spatial relation operator used to match the geoshape of incoming documents to documents in the enrich index.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Field added to incoming documents to contain enrich data.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "policyName",
                    "targetField"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorFail:ElasticsearchIngestProcessorFail": {
            "description": "Raises an exception. This is useful for when you expect a pipeline to fail and want to relay a specific message to the requester.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/fail-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst fail = elasticstack.ElasticsearchIngestProcessorFail({\n    \"if\": \"ctx.tags.contains('production') != true\",\n    message: \"The production tag is not present, found tags: {{{tags}}}\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [fail.then(fail =\u003e fail.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nfail = elasticstack.elasticsearch_ingest_processor_fail(if_=\"ctx.tags.contains('production') != true\",\n    message=\"The production tag is not present, found tags: {{{tags}}}\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[fail.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fail = Output.Create(Elasticstack.ElasticsearchIngestProcessorFail.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorFailArgs\n        {\n            If = \"ctx.tags.contains('production') != true\",\n            Message = \"The production tag is not present, found tags: {{{tags}}}\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                fail.Apply(fail =\u003e fail.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"ctx.tags.contains('production') != true\"\n\t\tfail, err := elasticstack.ElasticsearchIngestProcessorFail(ctx, \u0026ElasticsearchIngestProcessorFailArgs{\n\t\t\tIf:      \u0026opt0,\n\t\t\tMessage: \"The production tag is not present, found tags: {{{tags}}}\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(fail.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorFail.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message thrown by the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "message"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorFail.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "message": {
                        "type": "string",
                        "description": "The error message thrown by the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json",
                    "message"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorFingerprint:ElasticsearchIngestProcessorFingerprint": {
            "description": "Computes a hash of the document’s content. You can use this hash for content fingerprinting.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/fingerprint-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst fingerprint = elasticstack.ElasticsearchIngestProcessorFingerprint({\n    fields: [\"user\"],\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [fingerprint.then(fingerprint =\u003e fingerprint.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nfingerprint = elasticstack.elasticsearch_ingest_processor_fingerprint(fields=[\"user\"])\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[fingerprint.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var fingerprint = Output.Create(Elasticstack.ElasticsearchIngestProcessorFingerprint.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorFingerprintArgs\n        {\n            Fields = \n            {\n                \"user\",\n            },\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                fingerprint.Apply(fingerprint =\u003e fingerprint.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tfingerprint, err := elasticstack.ElasticsearchIngestProcessorFingerprint(ctx, \u0026ElasticsearchIngestProcessorFingerprintArgs{\n\t\t\tFields: []string{\n\t\t\t\t\"user\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(fingerprint.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorFingerprint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of fields to include in the fingerprint.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The hash method used to compute the fingerprint.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "salt": {
                        "type": "string",
                        "description": "Salt value for the hash function.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the fingerprint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorFingerprint.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Array of fields to include in the fingerprint.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor ignores any missing `fields`. If all fields are missing, the processor silently exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "method": {
                        "type": "string",
                        "description": "The hash method used to compute the fingerprint.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "salt": {
                        "type": "string",
                        "description": "Salt value for the hash function.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the fingerprint.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorForeach:ElasticsearchIngestProcessorForeach": {
            "description": "Runs an ingest processor on each element of an array or object.\n\nAll ingest processors can run on array or object elements. However, if the number of elements is unknown, it can be cumbersome to process each one in the same way.\n\nThe `foreach` processor lets you specify a `field` containing array or object values and a `processor` to run on each element in the field.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/foreach-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst convert = elasticstack.ElasticsearchIngestProcessorConvert({\n    field: \"_ingest._value\",\n    type: \"integer\",\n});\nconst foreach = convert.then(convert =\u003e elasticstack.ElasticsearchIngestProcessorForeach({\n    field: \"values\",\n    processor: convert.json,\n}));\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [foreach.then(foreach =\u003e foreach.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nconvert = elasticstack.elasticsearch_ingest_processor_convert(field=\"_ingest._value\",\n    type=\"integer\")\nforeach = elasticstack.elasticsearch_ingest_processor_foreach(field=\"values\",\n    processor=convert.json)\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[foreach.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var convert = Output.Create(Elasticstack.ElasticsearchIngestProcessorConvert.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorConvertArgs\n        {\n            Field = \"_ingest._value\",\n            Type = \"integer\",\n        }));\n        var @foreach = convert.Apply(convert =\u003e Output.Create(Elasticstack.ElasticsearchIngestProcessorForeach.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorForeachArgs\n        {\n            Field = \"values\",\n            Processor = convert.Json,\n        })));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                @foreach.Apply(@foreach =\u003e @foreach.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tconvert, err := elasticstack.ElasticsearchIngestProcessorConvert(ctx, \u0026ElasticsearchIngestProcessorConvertArgs{\n\t\t\tField: \"_ingest._value\",\n\t\t\tType:  \"integer\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tforeach, err := elasticstack.ElasticsearchIngestProcessorForeach(ctx, \u0026ElasticsearchIngestProcessorForeachArgs{\n\t\t\tField:     \"values\",\n\t\t\tProcessor: convert.Json,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(foreach.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorForeach.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array or object values.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor silently exits without changing the document if the `field` is `null` or missing.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "processor": {
                        "type": "string",
                        "description": "Ingest processor to run on each element.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "processor"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorForeach.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array or object values.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true`, the processor silently exits without changing the document if the `field` is `null` or missing.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "processor": {
                        "type": "string",
                        "description": "Ingest processor to run on each element.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "processor"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorGeoip:ElasticsearchIngestProcessorGeoip": {
            "description": "The geoip processor adds information about the geographical location of an IPv4 or IPv6 address.\n\nBy default, the processor uses the GeoLite2 City, GeoLite2 Country, and GeoLite2 ASN GeoIP2 databases from MaxMind, shared under the CC BY-SA 4.0 license. Elasticsearch automatically downloads updates for these databases from the Elastic GeoIP endpoint: https://geoip.elastic.co/v1/database. To get download statistics for these updates, use the GeoIP stats API.\n\nIf your cluster can’t connect to the Elastic GeoIP endpoint or you want to manage your own updates, [see Manage your own GeoIP2 database updates](https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html#manage-geoip-database-updates).\n\nIf Elasticsearch can’t connect to the endpoint for 30 days all updated databases will become invalid. Elasticsearch will stop enriching documents with geoip data and will add tags: [\"_geoip_expired_database\"] field instead.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst geoip = elasticstack.ElasticsearchIngestProcessorGeoip({\n    field: \"ip\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [geoip.then(geoip =\u003e geoip.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ngeoip = elasticstack.elasticsearch_ingest_processor_geoip(field=\"ip\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[geoip.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var geoip = Output.Create(Elasticstack.ElasticsearchIngestProcessorGeoip.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorGeoipArgs\n        {\n            Field = \"ip\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                geoip.Apply(geoip =\u003e geoip.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgeoip, err := elasticstack.ElasticsearchIngestProcessorGeoip(ctx, \u0026ElasticsearchIngestProcessorGeoipArgs{\n\t\t\tField: \"ip\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(geoip.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorGeoip.\n",
                "properties": {
                    "databaseFile": {
                        "type": "string",
                        "description": "The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the ip address from for the geographical lookup.\n"
                    },
                    "firstOnly": {
                        "type": "boolean",
                        "description": "If `true` only first found geoip data will be returned, even if field contains array.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist, the processor quietly exits without modifying the document.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to the `target_field` based on the geoip lookup.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the geographical information looked up from the MaxMind database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorGeoip.\n",
                "properties": {
                    "databaseFile": {
                        "type": "string",
                        "description": "The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to get the ip address from for the geographical lookup.\n"
                    },
                    "firstOnly": {
                        "type": "boolean",
                        "description": "If `true` only first found geoip data will be returned, even if field contains array.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to the `target_field` based on the geoip lookup.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will hold the geographical information looked up from the MaxMind database.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorGrok:ElasticsearchIngestProcessorGrok": {
            "description": "Extracts structured fields out of a single text field within a document. You choose which field to extract matched fields from, as well as the grok pattern you expect will match. A grok pattern is like a regular expression that supports aliased expressions that can be reused.\n\nThis processor comes packaged with many [reusable patterns](https://github.com/elastic/elasticsearch/blob/master/libs/grok/src/main/resources/patterns).\n\nIf you need help building patterns to match your logs, you will find the [Grok Debugger](https://www.elastic.co/guide/en/kibana/master/xpack-grokdebugger.html) tool quite useful! [The Grok Constructor](https://grokconstructor.appspot.com/) is also a useful tool.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/grok-processor.html\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorGrok.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "ecsCompatibility": {
                        "type": "string",
                        "description": "Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to use for grok expression parsing\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "patternDefinitions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "traceMatch": {
                        "type": "boolean",
                        "description": "when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "patterns"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorGrok.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "ecsCompatibility": {
                        "type": "string",
                        "description": "Must be disabled or v1. If v1, the processor uses patterns with Elastic Common Schema (ECS) field names. **NOTE:** Supported only starting from version of Elasticsearch **7.16.x**.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to use for grok expression parsing\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "patternDefinitions": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "A map of pattern-name and pattern tuples defining custom patterns to be used by the current processor. Patterns matching existing names will override the pre-existing definition.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "An ordered list of grok expression to match and extract named captures with. Returns on the first expression in the list that matches.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "traceMatch": {
                        "type": "boolean",
                        "description": "when true, `_ingest._grok_match_index` will be inserted into your matched document’s metadata with the index into the pattern found in `patterns` that matched.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "patterns"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorGsub:ElasticsearchIngestProcessorGsub": {
            "description": "Converts a string field by applying a regular expression and a replacement. If the field is an array of string, all members of the array will be converted. If any non-string values are encountered, the processor will throw an exception.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/gsub-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst gsub = elasticstack.ElasticsearchIngestProcessorGsub({\n    field: \"field1\",\n    pattern: \"\\\\.\",\n    replacement: \"-\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [gsub.then(gsub =\u003e gsub.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ngsub = elasticstack.elasticsearch_ingest_processor_gsub(field=\"field1\",\n    pattern=\"\\\\.\",\n    replacement=\"-\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[gsub.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var gsub = Output.Create(Elasticstack.ElasticsearchIngestProcessorGsub.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorGsubArgs\n        {\n            Field = \"field1\",\n            Pattern = \"\\\\.\",\n            Replacement = \"-\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                gsub.Apply(gsub =\u003e gsub.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgsub, err := elasticstack.ElasticsearchIngestProcessorGsub(ctx, \u0026ElasticsearchIngestProcessorGsubArgs{\n\t\t\tField:       \"field1\",\n\t\t\tPattern:     \"\\\\.\",\n\t\t\tReplacement: \"-\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(gsub.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorGsub.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to be replaced.\n"
                    },
                    "replacement": {
                        "type": "string",
                        "description": "The string to replace the matching patterns with.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "pattern",
                    "replacement"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorGsub.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "pattern": {
                        "type": "string",
                        "description": "The pattern to be replaced.\n"
                    },
                    "replacement": {
                        "type": "string",
                        "description": "The string to replace the matching patterns with.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "pattern",
                    "replacement"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorHtmlStrip:ElasticsearchIngestProcessorHtmlStrip": {
            "description": "Removes HTML tags from the field. If the field is an array of strings, HTML tags will be removed from all members of the array.\n\nSee: templates/data-sources/elasticsearch_ingest_processor_html_strip.md.tmpl\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst htmlStrip = elasticstack.ElasticsearchIngestProcessorHtmlStrip({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [htmlStrip.then(htmlStrip =\u003e htmlStrip.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nhtml_strip = elasticstack.elasticsearch_ingest_processor_html_strip(field=\"foo\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[html_strip.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var htmlStrip = Output.Create(Elasticstack.ElasticsearchIngestProcessorHtmlStrip.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorHtmlStripArgs\n        {\n            Field = \"foo\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                htmlStrip.Apply(htmlStrip =\u003e htmlStrip.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\thtmlStrip, err := elasticstack.ElasticsearchIngestProcessorHtmlStrip(ctx, \u0026ElasticsearchIngestProcessorHtmlStripArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(htmlStrip.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorHtmlStrip.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorHtmlStrip.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to apply the replacement to.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorJoin:ElasticsearchIngestProcessorJoin": {
            "description": "Joins each element of an array into a single string using a separator character between each element. Throws an error when the field is not an array.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/join-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst join = elasticstack.ElasticsearchIngestProcessorJoin({\n    field: \"joined_array_field\",\n    separator: \"-\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [join.then(join =\u003e join.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\njoin = elasticstack.elasticsearch_ingest_processor_join(field=\"joined_array_field\",\n    separator=\"-\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[join.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @join = Output.Create(Elasticstack.ElasticsearchIngestProcessorJoin.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorJoinArgs\n        {\n            Field = \"joined_array_field\",\n            Separator = \"-\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                @join.Apply(@join =\u003e @join.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjoin, err := elasticstack.ElasticsearchIngestProcessorJoin(ctx, \u0026ElasticsearchIngestProcessorJoinArgs{\n\t\t\tField:     \"joined_array_field\",\n\t\t\tSeparator: \"-\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(join.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorJoin.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array values to join.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "The separator character.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "separator"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorJoin.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing array values to join.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "The separator character.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "separator"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorJson:ElasticsearchIngestProcessorJson": {
            "description": "Converts a JSON string into a structured JSON object.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/json-processor.html\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst jsonProc = elasticstack.ElasticsearchIngestProcessorJson({\n    field: \"string_source\",\n    targetField: \"json_target\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [jsonProc.then(jsonProc =\u003e jsonProc.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\njson_proc = elasticstack.elasticsearch_ingest_processor_json(field=\"string_source\",\n    target_field=\"json_target\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[json_proc.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jsonProc = Output.Create(Elasticstack.ElasticsearchIngestProcessorJson.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorJsonArgs\n        {\n            Field = \"string_source\",\n            TargetField = \"json_target\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                jsonProc.Apply(jsonProc =\u003e jsonProc.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"json_target\"\n\t\tjsonProc, err := elasticstack.ElasticsearchIngestProcessorJson(ctx, \u0026ElasticsearchIngestProcessorJsonArgs{\n\t\t\tField:       \"string_source\",\n\t\t\tTargetField: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(jsonProc.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorJson.\n",
                "properties": {
                    "addToRoot": {
                        "type": "boolean",
                        "description": "Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.\n"
                    },
                    "addToRootConflictStrategy": {
                        "type": "string",
                        "description": "When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.\n"
                    },
                    "allowDuplicateKeys": {
                        "type": "boolean",
                        "description": "When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that the converted structured object will be written into. Any existing content in this field will be overwritten.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorJson.\n",
                "properties": {
                    "addToRoot": {
                        "type": "boolean",
                        "description": "Flag that forces the parsed JSON to be added at the top level of the document. `target_field` must not be set when this option is chosen.\n"
                    },
                    "addToRootConflictStrategy": {
                        "type": "string",
                        "description": "When set to `replace`, root fields that conflict with fields from the parsed JSON will be overridden. When set to `merge`, conflicting fields will be merged. Only applicable if `add_to_root` is set to `true`.\n"
                    },
                    "allowDuplicateKeys": {
                        "type": "boolean",
                        "description": "When set to `true`, the JSON parser will not fail if the JSON contains duplicate keys. Instead, the last encountered value for any duplicate key wins.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that the converted structured object will be written into. Any existing content in this field will be overwritten.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorKv:ElasticsearchIngestProcessorKv": {
            "description": "This processor helps automatically parse messages (or specific event fields) which are of the `foo=bar` variety.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/kv-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst kv = elasticstack.ElasticsearchIngestProcessorKv({\n    field: \"message\",\n    fieldSplit: \" \",\n    valueSplit: \"=\",\n    excludeKeys: [\"tags\"],\n    prefix: \"setting_\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [kv.then(kv =\u003e kv.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nkv = elasticstack.elasticsearch_ingest_processor_kv(field=\"message\",\n    field_split=\" \",\n    value_split=\"=\",\n    exclude_keys=[\"tags\"],\n    prefix=\"setting_\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[kv.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var kv = Output.Create(Elasticstack.ElasticsearchIngestProcessorKv.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorKvArgs\n        {\n            Field = \"message\",\n            FieldSplit = \" \",\n            ValueSplit = \"=\",\n            ExcludeKeys = \n            {\n                \"tags\",\n            },\n            Prefix = \"setting_\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                kv.Apply(kv =\u003e kv.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"setting_\"\n\t\tkv, err := elasticstack.ElasticsearchIngestProcessorKv(ctx, \u0026ElasticsearchIngestProcessorKvArgs{\n\t\t\tField:      \"message\",\n\t\t\tFieldSplit: \" \",\n\t\t\tValueSplit: \"=\",\n\t\t\tExcludeKeys: []string{\n\t\t\t\t\"tags\",\n\t\t\t},\n\t\t\tPrefix: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(kv.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorKv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "excludeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to exclude from document\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed. Supports template snippets.\n"
                    },
                    "fieldSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting key-value pairs.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "includeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to filter and insert into document. Defaults to including all keys\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix to be added to extracted keys.\n"
                    },
                    "stripBrackets": {
                        "type": "boolean",
                        "description": "If `true` strip brackets `()`, `\u003c\u003e`, `[]` as well as quotes `'` and `\"` from extracted values.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to insert the extracted keys into. Defaults to the root of the document.\n"
                    },
                    "trimKey": {
                        "type": "string",
                        "description": "String of characters to trim from extracted keys.\n"
                    },
                    "trimValue": {
                        "type": "string",
                        "description": "String of characters to trim from extracted values.\n"
                    },
                    "valueSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting the key from the value within a key-value pair.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "fieldSplit",
                    "valueSplit"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorKv.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "excludeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to exclude from document\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be parsed. Supports template snippets.\n"
                    },
                    "fieldSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting key-value pairs.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "includeKeys": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of keys to filter and insert into document. Defaults to including all keys\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "Prefix to be added to extracted keys.\n"
                    },
                    "stripBrackets": {
                        "type": "boolean",
                        "description": "If `true` strip brackets `()`, `\u003c\u003e`, `[]` as well as quotes `'` and `\"` from extracted values.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to insert the extracted keys into. Defaults to the root of the document.\n"
                    },
                    "trimKey": {
                        "type": "string",
                        "description": "String of characters to trim from extracted keys.\n"
                    },
                    "trimValue": {
                        "type": "string",
                        "description": "String of characters to trim from extracted values.\n"
                    },
                    "valueSplit": {
                        "type": "string",
                        "description": "Regex pattern to use for splitting the key from the value within a key-value pair.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "fieldSplit",
                    "id",
                    "json",
                    "valueSplit"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorLowercase:ElasticsearchIngestProcessorLowercase": {
            "description": "Converts a string to its lowercase equivalent. If the field is an array of strings, all members of the array will be converted.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/lowercase-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst lowercase = elasticstack.ElasticsearchIngestProcessorLowercase({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [lowercase.then(lowercase =\u003e lowercase.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nlowercase = elasticstack.elasticsearch_ingest_processor_lowercase(field=\"foo\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[lowercase.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var lowercase = Output.Create(Elasticstack.ElasticsearchIngestProcessorLowercase.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorLowercaseArgs\n        {\n            Field = \"foo\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                lowercase.Apply(lowercase =\u003e lowercase.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlowercase, err := elasticstack.ElasticsearchIngestProcessorLowercase(ctx, \u0026ElasticsearchIngestProcessorLowercaseArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(lowercase.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorLowercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make lowercase.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorLowercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make lowercase.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorNetworkDirection:ElasticsearchIngestProcessorNetworkDirection": {
            "description": "Calculates the network direction given a source IP address, destination IP address, and a list of internal networks.\n\nThe network direction processor reads IP addresses from Elastic Common Schema (ECS) fields by default. If you use the ECS, only the `internal_networks` option must be specified.\n\n\nOne of either `internal_networks` or `internal_networks_field` must be specified. If `internal_networks_field` is specified, it follows the behavior specified by `ignore_missing`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst networkDirection = elasticstack.ElasticsearchIngestProcessorNetworkDirection({\n    internalNetworks: [\"private\"],\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [networkDirection.then(networkDirection =\u003e networkDirection.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nnetwork_direction = elasticstack.elasticsearch_ingest_processor_network_direction(internal_networks=[\"private\"])\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[network_direction.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var networkDirection = Output.Create(Elasticstack.ElasticsearchIngestProcessorNetworkDirection.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorNetworkDirectionArgs\n        {\n            InternalNetworks = \n            {\n                \"private\",\n            },\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                networkDirection.Apply(networkDirection =\u003e networkDirection.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnetworkDirection, err := elasticstack.ElasticsearchIngestProcessorNetworkDirection(ctx, \u0026ElasticsearchIngestProcessorNetworkDirectionArgs{\n\t\t\tInternalNetworks: []string{\n\t\t\t\t\"private\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(networkDirection.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorNetworkDirection.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "internalNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of internal networks.\n"
                    },
                    "internalNetworksField": {
                        "type": "string",
                        "description": "A field on the given document to read the internal_networks configuration from.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the network direction.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorNetworkDirection.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "destinationIp": {
                        "type": "string",
                        "description": "Field containing the destination IP address.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "internalNetworks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of internal networks.\n"
                    },
                    "internalNetworksField": {
                        "type": "string",
                        "description": "A field on the given document to read the internal_networks configuration from.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "Field containing the source IP address.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the network direction.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorPipeline:ElasticsearchIngestProcessorPipeline": {
            "description": "Executes another pipeline.\n\nThe name of the current pipeline can be accessed from the `_ingest.pipeline` ingest metadata key.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/pipeline-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst appendTags = elasticstack.ElasticsearchIngestProcessorAppend({\n    field: \"tags\",\n    values: [\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ],\n});\nconst pipelineA = new elasticstack.ElasticsearchIngestPipeline(\"pipelineA\", {processors: [appendTags.then(appendTags =\u003e appendTags.json)]});\nconst fingerprint = elasticstack.ElasticsearchIngestProcessorFingerprint({\n    fields: [\"owner\"],\n});\nconst pipeline = elasticstack.ElasticsearchIngestProcessorPipelineOutput({\n    name: pipelineA.name,\n});\nconst pipelineB = new elasticstack.ElasticsearchIngestPipeline(\"pipelineB\", {processors: [\n    pipeline.apply(pipeline =\u003e pipeline.json),\n    fingerprint.then(fingerprint =\u003e fingerprint.json),\n]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nappend_tags = elasticstack.elasticsearch_ingest_processor_append(field=\"tags\",\n    values=[\n        \"production\",\n        \"{{{app}}}\",\n        \"{{{owner}}}\",\n    ])\npipeline_a = elasticstack.ElasticsearchIngestPipeline(\"pipelineA\", processors=[append_tags.json])\nfingerprint = elasticstack.elasticsearch_ingest_processor_fingerprint(fields=[\"owner\"])\npipeline = elasticstack.elasticsearch_ingest_processor_pipeline_output(name=pipeline_a.name)\npipeline_b = elasticstack.ElasticsearchIngestPipeline(\"pipelineB\", processors=[\n    pipeline.json,\n    fingerprint.json,\n])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var appendTags = Output.Create(Elasticstack.ElasticsearchIngestProcessorAppend.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorAppendArgs\n        {\n            Field = \"tags\",\n            Values = \n            {\n                \"production\",\n                \"{{{app}}}\",\n                \"{{{owner}}}\",\n            },\n        }));\n        var pipelineA = new Elasticstack.ElasticsearchIngestPipeline(\"pipelineA\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                appendTags.Apply(appendTags =\u003e appendTags.Json),\n            },\n        });\n        var fingerprint = Output.Create(Elasticstack.ElasticsearchIngestProcessorFingerprint.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorFingerprintArgs\n        {\n            Fields = \n            {\n                \"owner\",\n            },\n        }));\n        var pipeline = Elasticstack.ElasticsearchIngestProcessorPipeline.Invoke(new Elasticstack.ElasticsearchIngestProcessorPipelineInvokeArgs\n        {\n            Name = pipelineA.Name,\n        });\n        var pipelineB = new Elasticstack.ElasticsearchIngestPipeline(\"pipelineB\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                pipeline.Apply(pipeline =\u003e pipeline.Json),\n                fingerprint.Apply(fingerprint =\u003e fingerprint.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tappendTags, err := elasticstack.ElasticsearchIngestProcessorAppend(ctx, \u0026ElasticsearchIngestProcessorAppendArgs{\n\t\t\tField: \"tags\",\n\t\t\tValues: []string{\n\t\t\t\t\"production\",\n\t\t\t\t\"{{{app}}}\",\n\t\t\t\t\"{{{owner}}}\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpipelineA, err := elasticstack.NewElasticsearchIngestPipeline(ctx, \"pipelineA\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(appendTags.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tfingerprint, err := elasticstack.ElasticsearchIngestProcessorFingerprint(ctx, \u0026ElasticsearchIngestProcessorFingerprintArgs{\n\t\t\tFields: []string{\n\t\t\t\t\"owner\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tpipeline := elasticstack.ElasticsearchIngestProcessorPipelineOutput(ctx, ElasticsearchIngestProcessorPipelineOutputArgs{\n\t\t\tName: pipelineA.Name,\n\t\t}, nil)\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"pipelineB\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpipeline.ApplyT(func(pipeline ElasticsearchIngestProcessorPipelineResult) (string, error) {\n\t\t\t\t\treturn pipeline.Json, nil\n\t\t\t\t}).(pulumi.StringOutput),\n\t\t\t\tpulumi.String(fingerprint.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorPipeline.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline to execute.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorPipeline.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the pipeline to execute.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json",
                    "name"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorRegisteredDomain:ElasticsearchIngestProcessorRegisteredDomain": {
            "description": "Extracts the registered domain (also known as the effective top-level domain or eTLD), sub-domain, and top-level domain from a fully qualified domain name (FQDN). Uses the registered domains defined in the Mozilla Public Suffix List.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/registered-domain-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst domain = elasticstack.ElasticsearchIngestProcessorRegisteredDomain({\n    field: \"fqdn\",\n    targetField: \"url\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [domain.then(domain =\u003e domain.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ndomain = elasticstack.elasticsearch_ingest_processor_registered_domain(field=\"fqdn\",\n    target_field=\"url\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[domain.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var domain = Output.Create(Elasticstack.ElasticsearchIngestProcessorRegisteredDomain.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorRegisteredDomainArgs\n        {\n            Field = \"fqdn\",\n            TargetField = \"url\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                domain.Apply(domain =\u003e domain.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"url\"\n\t\tdomain, err := elasticstack.ElasticsearchIngestProcessorRegisteredDomain(ctx, \u0026ElasticsearchIngestProcessorRegisteredDomainArgs{\n\t\t\tField:       \"fqdn\",\n\t\t\tTargetField: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(domain.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorRegisteredDomain.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the source FQDN.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Object field containing extracted domain components. If an `\u003cempty string\u003e`, the processor adds components to the document’s root.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorRegisteredDomain.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the source FQDN.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Object field containing extracted domain components. If an `\u003cempty string\u003e`, the processor adds components to the document’s root.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorRemove:ElasticsearchIngestProcessorRemove": {
            "description": "Removes existing fields. If one field doesn’t exist, an exception will be thrown.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/remove-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst remove = elasticstack.ElasticsearchIngestProcessorRemove({\n    fields: [\n        \"user_agent\",\n        \"url\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [remove.then(remove =\u003e remove.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nremove = elasticstack.elasticsearch_ingest_processor_remove(fields=[\n    \"user_agent\",\n    \"url\",\n])\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[remove.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @remove = Output.Create(Elasticstack.ElasticsearchIngestProcessorRemove.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorRemoveArgs\n        {\n            Fields = \n            {\n                \"user_agent\",\n                \"url\",\n            },\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                @remove.Apply(@remove =\u003e @remove.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tremove, err := elasticstack.ElasticsearchIngestProcessorRemove(ctx, \u0026ElasticsearchIngestProcessorRemoveArgs{\n\t\t\tFields: []string{\n\t\t\t\t\"user_agent\",\n\t\t\t\t\"url\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(remove.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorRemove.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Fields to be removed.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorRemove.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "fields": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Fields to be removed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "fields",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorRename:ElasticsearchIngestProcessorRename": {
            "description": "Renames an existing field. If the field doesn’t exist or the new name is already used, an exception will be thrown.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/rename-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst rename = elasticstack.ElasticsearchIngestProcessorRename({\n    field: \"provider\",\n    targetField: \"cloud.provider\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [rename.then(rename =\u003e rename.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nrename = elasticstack.elasticsearch_ingest_processor_rename(field=\"provider\",\n    target_field=\"cloud.provider\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[rename.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var rename = Output.Create(Elasticstack.ElasticsearchIngestProcessorRename.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorRenameArgs\n        {\n            Field = \"provider\",\n            TargetField = \"cloud.provider\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                rename.Apply(rename =\u003e rename.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trename, err := elasticstack.ElasticsearchIngestProcessorRename(ctx, \u0026ElasticsearchIngestProcessorRenameArgs{\n\t\t\tField:       \"provider\",\n\t\t\tTargetField: \"cloud.provider\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(rename.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorRename.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be renamed.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The new name of the field.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "targetField"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorRename.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be renamed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The new name of the field.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "targetField"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorScript:ElasticsearchIngestProcessorScript": {
            "description": "Runs an inline or stored script on incoming documents. The script runs in the ingest context.\n\nThe script processor uses the script cache to avoid recompiling the script for each incoming document. To improve performance, ensure the script cache is properly sized before using a script processor in production.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/script-processor.html\n",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorScript.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "lang": {
                        "type": "string",
                        "description": "Script language.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "params": {
                        "type": "string",
                        "description": "Object containing parameters for the script.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "ID of a stored script. If no `source` is specified, this parameter is required.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Inline script. If no id is specified, this parameter is required.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorScript.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "lang": {
                        "type": "string",
                        "description": "Script language.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "params": {
                        "type": "string",
                        "description": "Object containing parameters for the script.\n"
                    },
                    "scriptId": {
                        "type": "string",
                        "description": "ID of a stored script. If no `source` is specified, this parameter is required.\n"
                    },
                    "source": {
                        "type": "string",
                        "description": "Inline script. If no id is specified, this parameter is required.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorSet:ElasticsearchIngestProcessorSet": {
            "description": "Sets one field and associates it with the specified value. If the field already exists, its value will be replaced with the provided one.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/set-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst set = elasticstack.ElasticsearchIngestProcessorSet({\n    field: \"count\",\n    value: 1,\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [set.then(set =\u003e set.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nset = elasticstack.elasticsearch_ingest_processor_set(field=\"count\",\n    value=\"1\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[set.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var @set = Output.Create(Elasticstack.ElasticsearchIngestProcessorSet.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorSetArgs\n        {\n            Field = \"count\",\n            Value = \"1\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                @set.Apply(@set =\u003e @set.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"1\"\n\t\tset, err := elasticstack.ElasticsearchIngestProcessorSet(ctx, \u0026ElasticsearchIngestProcessorSetArgs{\n\t\t\tField: \"count\",\n\t\t\tValue: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(set.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorSet.\n",
                "properties": {
                    "copyFrom": {
                        "type": "string",
                        "description": "The origin field which will be copied to `field`, cannot set `value` simultaneously.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to insert, upsert, or update.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreEmptyValue": {
                        "type": "boolean",
                        "description": "If `true` and `value` is a template snippet that evaluates to `null` or the empty string, the processor quietly exits without modifying the document\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be set for the field. Supports template snippets. May specify only one of `value` or `copy_from`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorSet.\n",
                "properties": {
                    "copyFrom": {
                        "type": "string",
                        "description": "The origin field which will be copied to `field`, cannot set `value` simultaneously.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to insert, upsert, or update.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreEmptyValue": {
                        "type": "boolean",
                        "description": "If `true` and `value` is a template snippet that evaluates to `null` or the empty string, the processor quietly exits without modifying the document\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "mediaType": {
                        "type": "string",
                        "description": "The media type for encoding value.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "override": {
                        "type": "boolean",
                        "description": "If processor will update fields with pre-existing non-null-valued field.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value to be set for the field. Supports template snippets. May specify only one of `value` or `copy_from`.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorSetSecurityUser:ElasticsearchIngestProcessorSetSecurityUser": {
            "description": "Sets user-related details (such as `username`, `roles`, `email`, `full_name`, `metadata`, `api_key`, `realm` and `authentication_typ`e) from the current authenticated user to the current document by pre-processing the ingest. The `api_key` property exists only if the user authenticates with an API key. It is an object containing the id, name and metadata (if it exists and is non-empty) fields of the API key. The realm property is also an object with two fields, name and type. When using API key authentication, the realm property refers to the realm from which the API key is created. The `authentication_type property` is a string that can take value from `REALM`, `API_KEY`, `TOKEN` and `ANONYMOUS`.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-node-set-security-user-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst user = elasticstack.ElasticsearchIngestProcessorSetSecurityUser({\n    field: \"user\",\n    properties: [\n        \"username\",\n        \"realm\",\n    ],\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [user.then(user =\u003e user.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nuser = elasticstack.elasticsearch_ingest_processor_set_security_user(field=\"user\",\n    properties=[\n        \"username\",\n        \"realm\",\n    ])\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[user.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = Output.Create(Elasticstack.ElasticsearchIngestProcessorSetSecurityUser.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorSetSecurityUserArgs\n        {\n            Field = \"user\",\n            Properties = \n            {\n                \"username\",\n                \"realm\",\n            },\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                user.Apply(user =\u003e user.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuser, err := elasticstack.ElasticsearchIngestProcessorSetSecurityUser(ctx, \u0026ElasticsearchIngestProcessorSetSecurityUserArgs{\n\t\t\tField: \"user\",\n\t\t\tProperties: []string{\n\t\t\t\t\"username\",\n\t\t\t\t\"realm\",\n\t\t\t},\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(user.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorSetSecurityUser.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to store the user information into.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what user related properties are added to the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorSetSecurityUser.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to store the user information into.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what user related properties are added to the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorSort:ElasticsearchIngestProcessorSort": {
            "description": "Sorts the elements of an array ascending or descending. Homogeneous arrays of numbers will be sorted numerically, while arrays of strings or heterogeneous arrays of strings + numbers will be sorted lexicographically. Throws an error when the field is not an array.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/sort-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst sort = elasticstack.ElasticsearchIngestProcessorSort({\n    field: \"array_field_to_sort\",\n    order: \"desc\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [sort.then(sort =\u003e sort.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nsort = elasticstack.elasticsearch_ingest_processor_sort(field=\"array_field_to_sort\",\n    order=\"desc\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[sort.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sort = Output.Create(Elasticstack.ElasticsearchIngestProcessorSort.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorSortArgs\n        {\n            Field = \"array_field_to_sort\",\n            Order = \"desc\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                sort.Apply(sort =\u003e sort.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"desc\"\n\t\tsort, err := elasticstack.ElasticsearchIngestProcessorSort(ctx, \u0026ElasticsearchIngestProcessorSortArgs{\n\t\t\tField: \"array_field_to_sort\",\n\t\t\tOrder: \u0026opt0,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(sort.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorSort.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be sorted\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The sort order to use. Accepts `asc` or `desc`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the sorted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorSort.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to be sorted\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "order": {
                        "type": "string",
                        "description": "The sort order to use. Accepts `asc` or `desc`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the sorted value to, by default `field` is updated in-place\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorSplit:ElasticsearchIngestProcessorSplit": {
            "description": "Splits a field into an array using a separator character. Only works on string fields.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/split-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst split = elasticstack.ElasticsearchIngestProcessorSplit({\n    field: \"my_field\",\n    separator: \"\\\\s+\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [split.then(split =\u003e split.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nsplit = elasticstack.elasticsearch_ingest_processor_split(field=\"my_field\",\n    separator=\"\\\\s+\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[split.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var split = Output.Create(Elasticstack.ElasticsearchIngestProcessorSplit.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorSplitArgs\n        {\n            Field = \"my_field\",\n            Separator = \"\\\\s+\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                split.Apply(split =\u003e split.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsplit, err := elasticstack.ElasticsearchIngestProcessorSplit(ctx, \u0026ElasticsearchIngestProcessorSplitArgs{\n\t\t\tField:     \"my_field\",\n\t\t\tSeparator: \"\\\\s+\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(split.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorSplit.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to split\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "preserveTrailing": {
                        "type": "boolean",
                        "description": "Preserves empty trailing fields, if any.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "A regex which matches the separator, eg `,` or `\\s+`\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "separator"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorSplit.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to split\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "preserveTrailing": {
                        "type": "boolean",
                        "description": "Preserves empty trailing fields, if any.\n"
                    },
                    "separator": {
                        "type": "string",
                        "description": "A regex which matches the separator, eg `,` or `\\s+`\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json",
                    "separator"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorTrim:ElasticsearchIngestProcessorTrim": {
            "description": "Trims whitespace from field. If the field is an array of strings, all members of the array will be trimmed.\n\n**NOTE:** This only works on leading and trailing whitespace.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/trim-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst trim = elasticstack.ElasticsearchIngestProcessorTrim({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [trim.then(trim =\u003e trim.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\ntrim = elasticstack.elasticsearch_ingest_processor_trim(field=\"foo\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[trim.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var trim = Output.Create(Elasticstack.ElasticsearchIngestProcessorTrim.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorTrimArgs\n        {\n            Field = \"foo\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                trim.Apply(trim =\u003e trim.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttrim, err := elasticstack.ElasticsearchIngestProcessorTrim(ctx, \u0026ElasticsearchIngestProcessorTrimArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(trim.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorTrim.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the trimmed value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorTrim.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The string-valued field to trim whitespace from.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the trimmed value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorUppercase:ElasticsearchIngestProcessorUppercase": {
            "description": "Converts a string to its uppercase equivalent. If the field is an array of strings, all members of the array will be converted.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/uppercase-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst uppercase = elasticstack.ElasticsearchIngestProcessorUppercase({\n    field: \"foo\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [uppercase.then(uppercase =\u003e uppercase.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nuppercase = elasticstack.elasticsearch_ingest_processor_uppercase(field=\"foo\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[uppercase.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var uppercase = Output.Create(Elasticstack.ElasticsearchIngestProcessorUppercase.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorUppercaseArgs\n        {\n            Field = \"foo\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                uppercase.Apply(uppercase =\u003e uppercase.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tuppercase, err := elasticstack.ElasticsearchIngestProcessorUppercase(ctx, \u0026ElasticsearchIngestProcessorUppercaseArgs{\n\t\t\tField: \"foo\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(uppercase.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorUppercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make uppercase.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorUppercase.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to make uppercase.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorUriParts:ElasticsearchIngestProcessorUriParts": {
            "description": "Parses a Uniform Resource Identifier (URI) string and extracts its components as an object. This URI object includes properties for the URI’s domain, path, fragment, port, query, scheme, user info, username, and password.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/uri-parts-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst parts = elasticstack.ElasticsearchIngestProcessorUriParts({\n    field: \"input_field\",\n    targetField: \"url\",\n    keepOriginal: true,\n    removeIfSuccessful: false,\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [parts.then(parts =\u003e parts.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nparts = elasticstack.elasticsearch_ingest_processor_uri_parts(field=\"input_field\",\n    target_field=\"url\",\n    keep_original=True,\n    remove_if_successful=False)\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[parts.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var parts = Output.Create(Elasticstack.ElasticsearchIngestProcessorUriParts.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorUriPartsArgs\n        {\n            Field = \"input_field\",\n            TargetField = \"url\",\n            KeepOriginal = true,\n            RemoveIfSuccessful = false,\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                parts.Apply(parts =\u003e parts.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\topt0 := \"url\"\n\t\topt1 := true\n\t\topt2 := false\n\t\tparts, err := elasticstack.ElasticsearchIngestProcessorUriParts(ctx, \u0026ElasticsearchIngestProcessorUriPartsArgs{\n\t\t\tField:              \"input_field\",\n\t\t\tTargetField:        \u0026opt0,\n\t\t\tKeepOriginal:       \u0026opt1,\n\t\t\tRemoveIfSuccessful: \u0026opt2,\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(parts.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorUriParts.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the URI string.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "keepOriginal": {
                        "type": "boolean",
                        "description": "If true, the processor copies the unparsed URI to `\u003ctarget_field\u003e.original.`\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "removeIfSuccessful": {
                        "type": "boolean",
                        "description": "If `true`, the processor removes the `field` after parsing the URI string. If parsing fails, the processor does not remove the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the URI object.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorUriParts.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "Field containing the URI string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "keepOriginal": {
                        "type": "boolean",
                        "description": "If true, the processor copies the unparsed URI to `\u003ctarget_field\u003e.original.`\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "removeIfSuccessful": {
                        "type": "boolean",
                        "description": "If `true`, the processor removes the `field` after parsing the URI string. If parsing fails, the processor does not remove the `field`.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "Output field for the URI object.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorUrldecode:ElasticsearchIngestProcessorUrldecode": {
            "description": "URL-decodes a string. If the field is an array of strings, all members of the array will be decoded.\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/urldecode-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst urldecode = elasticstack.ElasticsearchIngestProcessorUrldecode({\n    field: \"my_url_to_decode\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [urldecode.then(urldecode =\u003e urldecode.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nurldecode = elasticstack.elasticsearch_ingest_processor_urldecode(field=\"my_url_to_decode\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[urldecode.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var urldecode = Output.Create(Elasticstack.ElasticsearchIngestProcessorUrldecode.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorUrldecodeArgs\n        {\n            Field = \"my_url_to_decode\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                urldecode.Apply(urldecode =\u003e urldecode.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\turldecode, err := elasticstack.ElasticsearchIngestProcessorUrldecode(ctx, \u0026ElasticsearchIngestProcessorUrldecodeArgs{\n\t\t\tField: \"my_url_to_decode\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(urldecode.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorUrldecode.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to decode\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorUrldecode.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the processor.\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field to decode\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "if": {
                        "type": "string",
                        "description": "Conditionally execute the processor\n"
                    },
                    "ignoreFailure": {
                        "type": "boolean",
                        "description": "Ignore failures for the processor.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "onFailures": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Handle failures for the processor.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "Identifier for the processor.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field to assign the converted value to, by default `field` is updated in-place.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        },
        "elasticstack:index/elasticsearchIngestProcessorUserAgent:ElasticsearchIngestProcessorUserAgent": {
            "description": "The `user_agent` processor extracts details from the user agent string a browser sends with its web requests. This processor adds this information by default under the `user_agent` field.\n\nThe ingest-user-agent module ships by default with the regexes.yaml made available by uap-java with an Apache 2.0 license. For more details see https://github.com/ua-parser/uap-core.\n\n\nSee: https://www.elastic.co/guide/en/elasticsearch/reference/current/user-agent-processor.html\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as elasticstack from \"@pulumi/elasticstack\";\n\nconst agent = elasticstack.ElasticsearchIngestProcessorUserAgent({\n    field: \"agent\",\n});\nconst myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", {processors: [agent.then(agent =\u003e agent.json)]});\n```\n```python\nimport pulumi\nimport pulumi_elasticstack as elasticstack\n\nagent = elasticstack.elasticsearch_ingest_processor_user_agent(field=\"agent\")\nmy_ingest_pipeline = elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", processors=[agent.json])\n```\n```csharp\nusing Pulumi;\nusing Elasticstack = Pulumi.Elasticstack;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var agent = Output.Create(Elasticstack.ElasticsearchIngestProcessorUserAgent.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorUserAgentArgs\n        {\n            Field = \"agent\",\n        }));\n        var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline(\"myIngestPipeline\", new Elasticstack.ElasticsearchIngestPipelineArgs\n        {\n            Processors = \n            {\n                agent.Apply(agent =\u003e agent.Json),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tagent, err := elasticstack.ElasticsearchIngestProcessorUserAgent(ctx, \u0026ElasticsearchIngestProcessorUserAgentArgs{\n\t\t\tField: \"agent\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, \"myIngestPipeline\", \u0026elasticstack.ElasticsearchIngestPipelineArgs{\n\t\t\tProcessors: pulumi.StringArray{\n\t\t\t\tpulumi.String(agent.Json),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking ElasticsearchIngestProcessorUserAgent.\n",
                "properties": {
                    "extractDeviceType": {
                        "type": "boolean",
                        "description": "Extracts device type from the user agent string on a best-effort basis. Supported only starting from Elasticsearch version **8.0**\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field containing the user agent string.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to `target_field`.\n"
                    },
                    "regexFile": {
                        "type": "string",
                        "description": "The name of the file in the `config/ingest-user-agent` directory containing the regular expressions for parsing the user agent string.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will be filled with the user agent details.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by ElasticsearchIngestProcessorUserAgent.\n",
                "properties": {
                    "extractDeviceType": {
                        "type": "boolean",
                        "description": "Extracts device type from the user agent string on a best-effort basis. Supported only starting from Elasticsearch version **8.0**\n"
                    },
                    "field": {
                        "type": "string",
                        "description": "The field containing the user agent string.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "Internal identifier of the resource.\n"
                    },
                    "ignoreMissing": {
                        "type": "boolean",
                        "description": "If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.\n"
                    },
                    "json": {
                        "type": "string",
                        "description": "JSON representation of this data source.\n"
                    },
                    "properties": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Controls what properties are added to `target_field`.\n"
                    },
                    "regexFile": {
                        "type": "string",
                        "description": "The name of the file in the `config/ingest-user-agent` directory containing the regular expressions for parsing the user agent string.\n"
                    },
                    "targetField": {
                        "type": "string",
                        "description": "The field that will be filled with the user agent details.\n"
                    }
                },
                "type": "object",
                "required": [
                    "field",
                    "id",
                    "json"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing elasticstack cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vinaybabu16/terraform-provider-elasticstack)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-elasticstack` repo](https://github.com/pulumi/pulumi-elasticstack/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`vinaybabu16/terraform-provider-elasticstack` repo](https://github.com/vinaybabu16/terraform-provider-elasticstack/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/vinaybabu16/terraform-provider-elasticstack)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-elasticstack` repo](https://github.com/pulumi/pulumi-elasticstack/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`vinaybabu16/terraform-provider-elasticstack` repo](https://github.com/vinaybabu16/terraform-provider-elasticstack/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}