// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates a snapshot lifecycle policy. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/slm-api-put-policy.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		repo, err := elasticstack.NewElasticsearchSnapshotRepository(ctx, "repo", &elasticstack.ElasticsearchSnapshotRepositoryArgs{
// 			Fs: &ElasticsearchSnapshotRepositoryFsArgs{
// 				Location:              pulumi.String("/tmp/snapshots"),
// 				Compress:              pulumi.Bool(true),
// 				MaxRestoreBytesPerSec: pulumi.String("20mb"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewElasticsearchSnapshotLifecycle(ctx, "slmPolicy", &elasticstack.ElasticsearchSnapshotLifecycleArgs{
// 			Schedule:     pulumi.String("0 30 1 * * ?"),
// 			SnapshotName: pulumi.String("<daily-snap-{now/d}>"),
// 			Repository:   repo.Name,
// 			Indices: pulumi.StringArray{
// 				pulumi.String("data-*"),
// 				pulumi.String("important"),
// 			},
// 			IgnoreUnavailable:  pulumi.Bool(false),
// 			IncludeGlobalState: pulumi.Bool(false),
// 			ExpireAfter:        pulumi.String("30d"),
// 			MinCount:           pulumi.Int(5),
// 			MaxCount:           pulumi.Int(50),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchSnapshotLifecycle:ElasticsearchSnapshotLifecycle my_policy <cluster_uuid>/<slm policy name>
// ```
type ElasticsearchSnapshotLifecycle struct {
	pulumi.CustomResourceState

	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSnapshotLifecycleElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards pulumi.StringPtrOutput `pulumi:"expandWildcards"`
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter pulumi.StringPtrOutput `pulumi:"expireAfter"`
	// Feature states to include in the snapshot.
	FeatureStates pulumi.StringArrayOutput `pulumi:"featureStates"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable pulumi.BoolPtrOutput `pulumi:"ignoreUnavailable"`
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState pulumi.BoolPtrOutput `pulumi:"includeGlobalState"`
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices pulumi.StringArrayOutput `pulumi:"indices"`
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount pulumi.IntPtrOutput `pulumi:"maxCount"`
	// Attaches arbitrary metadata to the snapshot.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount pulumi.IntPtrOutput `pulumi:"minCount"`
	// ID for the snapshot lifecycle policy you want to create or update.
	Name pulumi.StringOutput `pulumi:"name"`
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial pulumi.BoolPtrOutput `pulumi:"partial"`
	// Repository used to store snapshots created by this policy.
	Repository pulumi.StringOutput `pulumi:"repository"`
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule pulumi.StringOutput `pulumi:"schedule"`
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName pulumi.StringPtrOutput `pulumi:"snapshotName"`
}

// NewElasticsearchSnapshotLifecycle registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchSnapshotLifecycle(ctx *pulumi.Context,
	name string, args *ElasticsearchSnapshotLifecycleArgs, opts ...pulumi.ResourceOption) (*ElasticsearchSnapshotLifecycle, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Repository == nil {
		return nil, errors.New("invalid value for required argument 'Repository'")
	}
	if args.Schedule == nil {
		return nil, errors.New("invalid value for required argument 'Schedule'")
	}
	var resource ElasticsearchSnapshotLifecycle
	err := ctx.RegisterResource("elasticstack:index/elasticsearchSnapshotLifecycle:ElasticsearchSnapshotLifecycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchSnapshotLifecycle gets an existing ElasticsearchSnapshotLifecycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchSnapshotLifecycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchSnapshotLifecycleState, opts ...pulumi.ResourceOption) (*ElasticsearchSnapshotLifecycle, error) {
	var resource ElasticsearchSnapshotLifecycle
	err := ctx.ReadResource("elasticstack:index/elasticsearchSnapshotLifecycle:ElasticsearchSnapshotLifecycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchSnapshotLifecycle resources.
type elasticsearchSnapshotLifecycleState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSnapshotLifecycleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards *string `pulumi:"expandWildcards"`
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter *string `pulumi:"expireAfter"`
	// Feature states to include in the snapshot.
	FeatureStates []string `pulumi:"featureStates"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable *bool `pulumi:"ignoreUnavailable"`
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState *bool `pulumi:"includeGlobalState"`
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices []string `pulumi:"indices"`
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount *int `pulumi:"maxCount"`
	// Attaches arbitrary metadata to the snapshot.
	Metadata *string `pulumi:"metadata"`
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount *int `pulumi:"minCount"`
	// ID for the snapshot lifecycle policy you want to create or update.
	Name *string `pulumi:"name"`
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial *bool `pulumi:"partial"`
	// Repository used to store snapshots created by this policy.
	Repository *string `pulumi:"repository"`
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule *string `pulumi:"schedule"`
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName *string `pulumi:"snapshotName"`
}

type ElasticsearchSnapshotLifecycleState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSnapshotLifecycleElasticsearchConnectionPtrInput
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards pulumi.StringPtrInput
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter pulumi.StringPtrInput
	// Feature states to include in the snapshot.
	FeatureStates pulumi.StringArrayInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable pulumi.BoolPtrInput
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState pulumi.BoolPtrInput
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices pulumi.StringArrayInput
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount pulumi.IntPtrInput
	// Attaches arbitrary metadata to the snapshot.
	Metadata pulumi.StringPtrInput
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount pulumi.IntPtrInput
	// ID for the snapshot lifecycle policy you want to create or update.
	Name pulumi.StringPtrInput
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial pulumi.BoolPtrInput
	// Repository used to store snapshots created by this policy.
	Repository pulumi.StringPtrInput
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule pulumi.StringPtrInput
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName pulumi.StringPtrInput
}

func (ElasticsearchSnapshotLifecycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSnapshotLifecycleState)(nil)).Elem()
}

type elasticsearchSnapshotLifecycleArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSnapshotLifecycleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards *string `pulumi:"expandWildcards"`
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter *string `pulumi:"expireAfter"`
	// Feature states to include in the snapshot.
	FeatureStates []string `pulumi:"featureStates"`
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable *bool `pulumi:"ignoreUnavailable"`
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState *bool `pulumi:"includeGlobalState"`
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices []string `pulumi:"indices"`
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount *int `pulumi:"maxCount"`
	// Attaches arbitrary metadata to the snapshot.
	Metadata *string `pulumi:"metadata"`
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount *int `pulumi:"minCount"`
	// ID for the snapshot lifecycle policy you want to create or update.
	Name *string `pulumi:"name"`
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial *bool `pulumi:"partial"`
	// Repository used to store snapshots created by this policy.
	Repository string `pulumi:"repository"`
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule string `pulumi:"schedule"`
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName *string `pulumi:"snapshotName"`
}

// The set of arguments for constructing a ElasticsearchSnapshotLifecycle resource.
type ElasticsearchSnapshotLifecycleArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSnapshotLifecycleElasticsearchConnectionPtrInput
	// Determines how wildcard patterns in the `indices` parameter match data streams and indices. Supports comma-separated values, such as `closed,hidden`.
	ExpandWildcards pulumi.StringPtrInput
	// Time period after which a snapshot is considered expired and eligible for deletion.
	ExpireAfter pulumi.StringPtrInput
	// Feature states to include in the snapshot.
	FeatureStates pulumi.StringArrayInput
	// If `false`, the snapshot fails if any data stream or index in indices is missing or closed. If `true`, the snapshot ignores missing or closed data streams and indices.
	IgnoreUnavailable pulumi.BoolPtrInput
	// If `true`, include the cluster state in the snapshot.
	IncludeGlobalState pulumi.BoolPtrInput
	// Comma-separated list of data streams and indices to include in the snapshot.
	Indices pulumi.StringArrayInput
	// Maximum number of snapshots to retain, even if the snapshots have not yet expired.
	MaxCount pulumi.IntPtrInput
	// Attaches arbitrary metadata to the snapshot.
	Metadata pulumi.StringPtrInput
	// Minimum number of snapshots to retain, even if the snapshots have expired.
	MinCount pulumi.IntPtrInput
	// ID for the snapshot lifecycle policy you want to create or update.
	Name pulumi.StringPtrInput
	// If `false`, the entire snapshot will fail if one or more indices included in the snapshot do not have all primary shards available.
	Partial pulumi.BoolPtrInput
	// Repository used to store snapshots created by this policy.
	Repository pulumi.StringInput
	// Periodic or absolute schedule at which the policy creates snapshots.
	Schedule pulumi.StringInput
	// Name automatically assigned to each snapshot created by the policy.
	SnapshotName pulumi.StringPtrInput
}

func (ElasticsearchSnapshotLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSnapshotLifecycleArgs)(nil)).Elem()
}

type ElasticsearchSnapshotLifecycleInput interface {
	pulumi.Input

	ToElasticsearchSnapshotLifecycleOutput() ElasticsearchSnapshotLifecycleOutput
	ToElasticsearchSnapshotLifecycleOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleOutput
}

func (*ElasticsearchSnapshotLifecycle) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSnapshotLifecycle)(nil)).Elem()
}

func (i *ElasticsearchSnapshotLifecycle) ToElasticsearchSnapshotLifecycleOutput() ElasticsearchSnapshotLifecycleOutput {
	return i.ToElasticsearchSnapshotLifecycleOutputWithContext(context.Background())
}

func (i *ElasticsearchSnapshotLifecycle) ToElasticsearchSnapshotLifecycleOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSnapshotLifecycleOutput)
}

// ElasticsearchSnapshotLifecycleArrayInput is an input type that accepts ElasticsearchSnapshotLifecycleArray and ElasticsearchSnapshotLifecycleArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSnapshotLifecycleArrayInput` via:
//
//          ElasticsearchSnapshotLifecycleArray{ ElasticsearchSnapshotLifecycleArgs{...} }
type ElasticsearchSnapshotLifecycleArrayInput interface {
	pulumi.Input

	ToElasticsearchSnapshotLifecycleArrayOutput() ElasticsearchSnapshotLifecycleArrayOutput
	ToElasticsearchSnapshotLifecycleArrayOutputWithContext(context.Context) ElasticsearchSnapshotLifecycleArrayOutput
}

type ElasticsearchSnapshotLifecycleArray []ElasticsearchSnapshotLifecycleInput

func (ElasticsearchSnapshotLifecycleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSnapshotLifecycle)(nil)).Elem()
}

func (i ElasticsearchSnapshotLifecycleArray) ToElasticsearchSnapshotLifecycleArrayOutput() ElasticsearchSnapshotLifecycleArrayOutput {
	return i.ToElasticsearchSnapshotLifecycleArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSnapshotLifecycleArray) ToElasticsearchSnapshotLifecycleArrayOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSnapshotLifecycleArrayOutput)
}

// ElasticsearchSnapshotLifecycleMapInput is an input type that accepts ElasticsearchSnapshotLifecycleMap and ElasticsearchSnapshotLifecycleMapOutput values.
// You can construct a concrete instance of `ElasticsearchSnapshotLifecycleMapInput` via:
//
//          ElasticsearchSnapshotLifecycleMap{ "key": ElasticsearchSnapshotLifecycleArgs{...} }
type ElasticsearchSnapshotLifecycleMapInput interface {
	pulumi.Input

	ToElasticsearchSnapshotLifecycleMapOutput() ElasticsearchSnapshotLifecycleMapOutput
	ToElasticsearchSnapshotLifecycleMapOutputWithContext(context.Context) ElasticsearchSnapshotLifecycleMapOutput
}

type ElasticsearchSnapshotLifecycleMap map[string]ElasticsearchSnapshotLifecycleInput

func (ElasticsearchSnapshotLifecycleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSnapshotLifecycle)(nil)).Elem()
}

func (i ElasticsearchSnapshotLifecycleMap) ToElasticsearchSnapshotLifecycleMapOutput() ElasticsearchSnapshotLifecycleMapOutput {
	return i.ToElasticsearchSnapshotLifecycleMapOutputWithContext(context.Background())
}

func (i ElasticsearchSnapshotLifecycleMap) ToElasticsearchSnapshotLifecycleMapOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSnapshotLifecycleMapOutput)
}

type ElasticsearchSnapshotLifecycleOutput struct{ *pulumi.OutputState }

func (ElasticsearchSnapshotLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSnapshotLifecycle)(nil)).Elem()
}

func (o ElasticsearchSnapshotLifecycleOutput) ToElasticsearchSnapshotLifecycleOutput() ElasticsearchSnapshotLifecycleOutput {
	return o
}

func (o ElasticsearchSnapshotLifecycleOutput) ToElasticsearchSnapshotLifecycleOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleOutput {
	return o
}

type ElasticsearchSnapshotLifecycleArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSnapshotLifecycleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSnapshotLifecycle)(nil)).Elem()
}

func (o ElasticsearchSnapshotLifecycleArrayOutput) ToElasticsearchSnapshotLifecycleArrayOutput() ElasticsearchSnapshotLifecycleArrayOutput {
	return o
}

func (o ElasticsearchSnapshotLifecycleArrayOutput) ToElasticsearchSnapshotLifecycleArrayOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleArrayOutput {
	return o
}

func (o ElasticsearchSnapshotLifecycleArrayOutput) Index(i pulumi.IntInput) ElasticsearchSnapshotLifecycleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchSnapshotLifecycle {
		return vs[0].([]*ElasticsearchSnapshotLifecycle)[vs[1].(int)]
	}).(ElasticsearchSnapshotLifecycleOutput)
}

type ElasticsearchSnapshotLifecycleMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchSnapshotLifecycleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSnapshotLifecycle)(nil)).Elem()
}

func (o ElasticsearchSnapshotLifecycleMapOutput) ToElasticsearchSnapshotLifecycleMapOutput() ElasticsearchSnapshotLifecycleMapOutput {
	return o
}

func (o ElasticsearchSnapshotLifecycleMapOutput) ToElasticsearchSnapshotLifecycleMapOutputWithContext(ctx context.Context) ElasticsearchSnapshotLifecycleMapOutput {
	return o
}

func (o ElasticsearchSnapshotLifecycleMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchSnapshotLifecycleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchSnapshotLifecycle {
		return vs[0].(map[string]*ElasticsearchSnapshotLifecycle)[vs[1].(string)]
	}).(ElasticsearchSnapshotLifecycleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSnapshotLifecycleInput)(nil)).Elem(), &ElasticsearchSnapshotLifecycle{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSnapshotLifecycleArrayInput)(nil)).Elem(), ElasticsearchSnapshotLifecycleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSnapshotLifecycleMapInput)(nil)).Elem(), ElasticsearchSnapshotLifecycleMap{})
	pulumi.RegisterOutputType(ElasticsearchSnapshotLifecycleOutput{})
	pulumi.RegisterOutputType(ElasticsearchSnapshotLifecycleArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSnapshotLifecycleMapOutput{})
}
