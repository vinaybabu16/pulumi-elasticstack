// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"term": map[string]interface{}{
// 				"user.id": "developer",
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"properties": map[string]interface{}{
// 				"field1": map[string]interface{}{
// 					"type": "keyword",
// 				},
// 				"field2": map[string]interface{}{
// 					"type": "text",
// 				},
// 				"field3": map[string]interface{}{
// 					"properties": map[string]interface{}{
// 						"inner_field1": map[string]interface{}{
// 							"type":  "text",
// 							"index": false,
// 						},
// 						"inner_field2": map[string]interface{}{
// 							"type":  "integer",
// 							"index": false,
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		_, err := elasticstack.NewElasticsearchIndex(ctx, "myIndex", &elasticstack.ElasticsearchIndexArgs{
// 			Aliases: ElasticsearchIndexAliasArray{
// 				&ElasticsearchIndexAliasArgs{
// 					Name: pulumi.String("my_alias_1"),
// 				},
// 				&ElasticsearchIndexAliasArgs{
// 					Name:   pulumi.String("my_alias_2"),
// 					Filter: pulumi.String(json0),
// 				},
// 			},
// 			Mappings: pulumi.String(json1),
// 			Settings: &ElasticsearchIndexSettingsArgs{
// 				Settings: ElasticsearchIndexSettingsSettingArray{
// 					&ElasticsearchIndexSettingsSettingArgs{
// 						Name:  pulumi.String("index.number_of_shards"),
// 						Value: pulumi.String("1"),
// 					},
// 					&ElasticsearchIndexSettingsSettingArgs{
// 						Name:  pulumi.String("index.number_of_replicas"),
// 						Value: pulumi.String("2"),
// 					},
// 					&ElasticsearchIndexSettingsSettingArgs{
// 						Name:  pulumi.String("index.search.idle.after"),
// 						Value: pulumi.String("20s"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// You can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. # NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too # You can later adjust the index configuration to account for those imported settings
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchIndex:ElasticsearchIndex my_index <cluster_uuid>/<index_name>
// ```
type ElasticsearchIndex struct {
	pulumi.CustomResourceState

	// Aliases for the index.
	Aliases ElasticsearchIndexAliasArrayOutput `pulumi:"aliases"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings pulumi.StringPtrOutput `pulumi:"mappings"`
	// Name of the index you wish to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	Settings ElasticsearchIndexSettingsPtrOutput `pulumi:"settings"`
	// All raw settings fetched from the cluster.
	SettingsRaw pulumi.StringOutput `pulumi:"settingsRaw"`
}

// NewElasticsearchIndex registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchIndex(ctx *pulumi.Context,
	name string, args *ElasticsearchIndexArgs, opts ...pulumi.ResourceOption) (*ElasticsearchIndex, error) {
	if args == nil {
		args = &ElasticsearchIndexArgs{}
	}

	var resource ElasticsearchIndex
	err := ctx.RegisterResource("elasticstack:index/elasticsearchIndex:ElasticsearchIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchIndex gets an existing ElasticsearchIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchIndexState, opts ...pulumi.ResourceOption) (*ElasticsearchIndex, error) {
	var resource ElasticsearchIndex
	err := ctx.ReadResource("elasticstack:index/elasticsearchIndex:ElasticsearchIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchIndex resources.
type elasticsearchIndexState struct {
	// Aliases for the index.
	Aliases []ElasticsearchIndexAlias `pulumi:"aliases"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchIndexElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings *string `pulumi:"mappings"`
	// Name of the index you wish to create.
	Name *string `pulumi:"name"`
	// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	Settings *ElasticsearchIndexSettings `pulumi:"settings"`
	// All raw settings fetched from the cluster.
	SettingsRaw *string `pulumi:"settingsRaw"`
}

type ElasticsearchIndexState struct {
	// Aliases for the index.
	Aliases ElasticsearchIndexAliasArrayInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexElasticsearchConnectionPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings pulumi.StringPtrInput
	// Name of the index you wish to create.
	Name pulumi.StringPtrInput
	// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	Settings ElasticsearchIndexSettingsPtrInput
	// All raw settings fetched from the cluster.
	SettingsRaw pulumi.StringPtrInput
}

func (ElasticsearchIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchIndexState)(nil)).Elem()
}

type elasticsearchIndexArgs struct {
	// Aliases for the index.
	Aliases []ElasticsearchIndexAlias `pulumi:"aliases"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchIndexElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings *string `pulumi:"mappings"`
	// Name of the index you wish to create.
	Name *string `pulumi:"name"`
	// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	Settings *ElasticsearchIndexSettings `pulumi:"settings"`
}

// The set of arguments for constructing a ElasticsearchIndex resource.
type ElasticsearchIndexArgs struct {
	// Aliases for the index.
	Aliases ElasticsearchIndexAliasArrayInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexElasticsearchConnectionPtrInput
	// Mapping for fields in the index.
	// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
	// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
	Mappings pulumi.StringPtrInput
	// Name of the index you wish to create.
	Name pulumi.StringPtrInput
	// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
	// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
	Settings ElasticsearchIndexSettingsPtrInput
}

func (ElasticsearchIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchIndexArgs)(nil)).Elem()
}

type ElasticsearchIndexInput interface {
	pulumi.Input

	ToElasticsearchIndexOutput() ElasticsearchIndexOutput
	ToElasticsearchIndexOutputWithContext(ctx context.Context) ElasticsearchIndexOutput
}

func (*ElasticsearchIndex) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchIndex)(nil)).Elem()
}

func (i *ElasticsearchIndex) ToElasticsearchIndexOutput() ElasticsearchIndexOutput {
	return i.ToElasticsearchIndexOutputWithContext(context.Background())
}

func (i *ElasticsearchIndex) ToElasticsearchIndexOutputWithContext(ctx context.Context) ElasticsearchIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexOutput)
}

// ElasticsearchIndexArrayInput is an input type that accepts ElasticsearchIndexArray and ElasticsearchIndexArrayOutput values.
// You can construct a concrete instance of `ElasticsearchIndexArrayInput` via:
//
//          ElasticsearchIndexArray{ ElasticsearchIndexArgs{...} }
type ElasticsearchIndexArrayInput interface {
	pulumi.Input

	ToElasticsearchIndexArrayOutput() ElasticsearchIndexArrayOutput
	ToElasticsearchIndexArrayOutputWithContext(context.Context) ElasticsearchIndexArrayOutput
}

type ElasticsearchIndexArray []ElasticsearchIndexInput

func (ElasticsearchIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchIndex)(nil)).Elem()
}

func (i ElasticsearchIndexArray) ToElasticsearchIndexArrayOutput() ElasticsearchIndexArrayOutput {
	return i.ToElasticsearchIndexArrayOutputWithContext(context.Background())
}

func (i ElasticsearchIndexArray) ToElasticsearchIndexArrayOutputWithContext(ctx context.Context) ElasticsearchIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexArrayOutput)
}

// ElasticsearchIndexMapInput is an input type that accepts ElasticsearchIndexMap and ElasticsearchIndexMapOutput values.
// You can construct a concrete instance of `ElasticsearchIndexMapInput` via:
//
//          ElasticsearchIndexMap{ "key": ElasticsearchIndexArgs{...} }
type ElasticsearchIndexMapInput interface {
	pulumi.Input

	ToElasticsearchIndexMapOutput() ElasticsearchIndexMapOutput
	ToElasticsearchIndexMapOutputWithContext(context.Context) ElasticsearchIndexMapOutput
}

type ElasticsearchIndexMap map[string]ElasticsearchIndexInput

func (ElasticsearchIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchIndex)(nil)).Elem()
}

func (i ElasticsearchIndexMap) ToElasticsearchIndexMapOutput() ElasticsearchIndexMapOutput {
	return i.ToElasticsearchIndexMapOutputWithContext(context.Background())
}

func (i ElasticsearchIndexMap) ToElasticsearchIndexMapOutputWithContext(ctx context.Context) ElasticsearchIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexMapOutput)
}

type ElasticsearchIndexOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchIndex)(nil)).Elem()
}

func (o ElasticsearchIndexOutput) ToElasticsearchIndexOutput() ElasticsearchIndexOutput {
	return o
}

func (o ElasticsearchIndexOutput) ToElasticsearchIndexOutputWithContext(ctx context.Context) ElasticsearchIndexOutput {
	return o
}

type ElasticsearchIndexArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchIndex)(nil)).Elem()
}

func (o ElasticsearchIndexArrayOutput) ToElasticsearchIndexArrayOutput() ElasticsearchIndexArrayOutput {
	return o
}

func (o ElasticsearchIndexArrayOutput) ToElasticsearchIndexArrayOutputWithContext(ctx context.Context) ElasticsearchIndexArrayOutput {
	return o
}

func (o ElasticsearchIndexArrayOutput) Index(i pulumi.IntInput) ElasticsearchIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchIndex {
		return vs[0].([]*ElasticsearchIndex)[vs[1].(int)]
	}).(ElasticsearchIndexOutput)
}

type ElasticsearchIndexMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchIndex)(nil)).Elem()
}

func (o ElasticsearchIndexMapOutput) ToElasticsearchIndexMapOutput() ElasticsearchIndexMapOutput {
	return o
}

func (o ElasticsearchIndexMapOutput) ToElasticsearchIndexMapOutputWithContext(ctx context.Context) ElasticsearchIndexMapOutput {
	return o
}

func (o ElasticsearchIndexMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchIndex {
		return vs[0].(map[string]*ElasticsearchIndex)[vs[1].(string)]
	}).(ElasticsearchIndexOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexInput)(nil)).Elem(), &ElasticsearchIndex{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexArrayInput)(nil)).Elem(), ElasticsearchIndexArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexMapInput)(nil)).Elem(), ElasticsearchIndexMap{})
	pulumi.RegisterOutputType(ElasticsearchIndexOutput{})
	pulumi.RegisterOutputType(ElasticsearchIndexArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchIndexMapOutput{})
}
