// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates a component template. Component templates are building blocks for constructing index templates that specify index mappings, settings, and aliases. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-component-template.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"number_of_shards": "3",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		myTemplateElasticsearchComponentTemplate, err := elasticstack.NewElasticsearchComponentTemplate(ctx, "myTemplateElasticsearchComponentTemplate", &elasticstack.ElasticsearchComponentTemplateArgs{
// 			Template: &ElasticsearchComponentTemplateTemplateArgs{
// 				Aliases: ElasticsearchComponentTemplateTemplateAliasArray{
// 					&ElasticsearchComponentTemplateTemplateAliasArgs{
// 						Name: pulumi.String("my_template_test"),
// 					},
// 				},
// 				Settings: pulumi.String(json0),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewElasticsearchIndexTemplate(ctx, "myTemplateElasticsearchIndexTemplate", &elasticstack.ElasticsearchIndexTemplateArgs{
// 			IndexPatterns: pulumi.StringArray{
// 				pulumi.String("stream*"),
// 			},
// 			ComposedOfs: pulumi.StringArray{
// 				myTemplateElasticsearchComponentTemplate.Name,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchComponentTemplate:ElasticsearchComponentTemplate my_template <cluster_uuid>/<component_name>
// ```
type ElasticsearchComponentTemplate struct {
	pulumi.CustomResourceState

	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchComponentTemplateElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Optional user metadata about the component template.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// Name of the component template to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchComponentTemplateTemplateOutput `pulumi:"template"`
	// Version number used to manage component templates externally.
	Version pulumi.IntPtrOutput `pulumi:"version"`
}

// NewElasticsearchComponentTemplate registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchComponentTemplate(ctx *pulumi.Context,
	name string, args *ElasticsearchComponentTemplateArgs, opts ...pulumi.ResourceOption) (*ElasticsearchComponentTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	var resource ElasticsearchComponentTemplate
	err := ctx.RegisterResource("elasticstack:index/elasticsearchComponentTemplate:ElasticsearchComponentTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchComponentTemplate gets an existing ElasticsearchComponentTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchComponentTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchComponentTemplateState, opts ...pulumi.ResourceOption) (*ElasticsearchComponentTemplate, error) {
	var resource ElasticsearchComponentTemplate
	err := ctx.ReadResource("elasticstack:index/elasticsearchComponentTemplate:ElasticsearchComponentTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchComponentTemplate resources.
type elasticsearchComponentTemplateState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchComponentTemplateElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Optional user metadata about the component template.
	Metadata *string `pulumi:"metadata"`
	// Name of the component template to create.
	Name *string `pulumi:"name"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template *ElasticsearchComponentTemplateTemplate `pulumi:"template"`
	// Version number used to manage component templates externally.
	Version *int `pulumi:"version"`
}

type ElasticsearchComponentTemplateState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchComponentTemplateElasticsearchConnectionPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Optional user metadata about the component template.
	Metadata pulumi.StringPtrInput
	// Name of the component template to create.
	Name pulumi.StringPtrInput
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchComponentTemplateTemplatePtrInput
	// Version number used to manage component templates externally.
	Version pulumi.IntPtrInput
}

func (ElasticsearchComponentTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchComponentTemplateState)(nil)).Elem()
}

type elasticsearchComponentTemplateArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchComponentTemplateElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Optional user metadata about the component template.
	Metadata *string `pulumi:"metadata"`
	// Name of the component template to create.
	Name *string `pulumi:"name"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchComponentTemplateTemplate `pulumi:"template"`
	// Version number used to manage component templates externally.
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a ElasticsearchComponentTemplate resource.
type ElasticsearchComponentTemplateArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchComponentTemplateElasticsearchConnectionPtrInput
	// Optional user metadata about the component template.
	Metadata pulumi.StringPtrInput
	// Name of the component template to create.
	Name pulumi.StringPtrInput
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchComponentTemplateTemplateInput
	// Version number used to manage component templates externally.
	Version pulumi.IntPtrInput
}

func (ElasticsearchComponentTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchComponentTemplateArgs)(nil)).Elem()
}

type ElasticsearchComponentTemplateInput interface {
	pulumi.Input

	ToElasticsearchComponentTemplateOutput() ElasticsearchComponentTemplateOutput
	ToElasticsearchComponentTemplateOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateOutput
}

func (*ElasticsearchComponentTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchComponentTemplate)(nil)).Elem()
}

func (i *ElasticsearchComponentTemplate) ToElasticsearchComponentTemplateOutput() ElasticsearchComponentTemplateOutput {
	return i.ToElasticsearchComponentTemplateOutputWithContext(context.Background())
}

func (i *ElasticsearchComponentTemplate) ToElasticsearchComponentTemplateOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchComponentTemplateOutput)
}

// ElasticsearchComponentTemplateArrayInput is an input type that accepts ElasticsearchComponentTemplateArray and ElasticsearchComponentTemplateArrayOutput values.
// You can construct a concrete instance of `ElasticsearchComponentTemplateArrayInput` via:
//
//          ElasticsearchComponentTemplateArray{ ElasticsearchComponentTemplateArgs{...} }
type ElasticsearchComponentTemplateArrayInput interface {
	pulumi.Input

	ToElasticsearchComponentTemplateArrayOutput() ElasticsearchComponentTemplateArrayOutput
	ToElasticsearchComponentTemplateArrayOutputWithContext(context.Context) ElasticsearchComponentTemplateArrayOutput
}

type ElasticsearchComponentTemplateArray []ElasticsearchComponentTemplateInput

func (ElasticsearchComponentTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchComponentTemplate)(nil)).Elem()
}

func (i ElasticsearchComponentTemplateArray) ToElasticsearchComponentTemplateArrayOutput() ElasticsearchComponentTemplateArrayOutput {
	return i.ToElasticsearchComponentTemplateArrayOutputWithContext(context.Background())
}

func (i ElasticsearchComponentTemplateArray) ToElasticsearchComponentTemplateArrayOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchComponentTemplateArrayOutput)
}

// ElasticsearchComponentTemplateMapInput is an input type that accepts ElasticsearchComponentTemplateMap and ElasticsearchComponentTemplateMapOutput values.
// You can construct a concrete instance of `ElasticsearchComponentTemplateMapInput` via:
//
//          ElasticsearchComponentTemplateMap{ "key": ElasticsearchComponentTemplateArgs{...} }
type ElasticsearchComponentTemplateMapInput interface {
	pulumi.Input

	ToElasticsearchComponentTemplateMapOutput() ElasticsearchComponentTemplateMapOutput
	ToElasticsearchComponentTemplateMapOutputWithContext(context.Context) ElasticsearchComponentTemplateMapOutput
}

type ElasticsearchComponentTemplateMap map[string]ElasticsearchComponentTemplateInput

func (ElasticsearchComponentTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchComponentTemplate)(nil)).Elem()
}

func (i ElasticsearchComponentTemplateMap) ToElasticsearchComponentTemplateMapOutput() ElasticsearchComponentTemplateMapOutput {
	return i.ToElasticsearchComponentTemplateMapOutputWithContext(context.Background())
}

func (i ElasticsearchComponentTemplateMap) ToElasticsearchComponentTemplateMapOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchComponentTemplateMapOutput)
}

type ElasticsearchComponentTemplateOutput struct{ *pulumi.OutputState }

func (ElasticsearchComponentTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchComponentTemplate)(nil)).Elem()
}

func (o ElasticsearchComponentTemplateOutput) ToElasticsearchComponentTemplateOutput() ElasticsearchComponentTemplateOutput {
	return o
}

func (o ElasticsearchComponentTemplateOutput) ToElasticsearchComponentTemplateOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateOutput {
	return o
}

type ElasticsearchComponentTemplateArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchComponentTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchComponentTemplate)(nil)).Elem()
}

func (o ElasticsearchComponentTemplateArrayOutput) ToElasticsearchComponentTemplateArrayOutput() ElasticsearchComponentTemplateArrayOutput {
	return o
}

func (o ElasticsearchComponentTemplateArrayOutput) ToElasticsearchComponentTemplateArrayOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateArrayOutput {
	return o
}

func (o ElasticsearchComponentTemplateArrayOutput) Index(i pulumi.IntInput) ElasticsearchComponentTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchComponentTemplate {
		return vs[0].([]*ElasticsearchComponentTemplate)[vs[1].(int)]
	}).(ElasticsearchComponentTemplateOutput)
}

type ElasticsearchComponentTemplateMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchComponentTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchComponentTemplate)(nil)).Elem()
}

func (o ElasticsearchComponentTemplateMapOutput) ToElasticsearchComponentTemplateMapOutput() ElasticsearchComponentTemplateMapOutput {
	return o
}

func (o ElasticsearchComponentTemplateMapOutput) ToElasticsearchComponentTemplateMapOutputWithContext(ctx context.Context) ElasticsearchComponentTemplateMapOutput {
	return o
}

func (o ElasticsearchComponentTemplateMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchComponentTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchComponentTemplate {
		return vs[0].(map[string]*ElasticsearchComponentTemplate)[vs[1].(string)]
	}).(ElasticsearchComponentTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchComponentTemplateInput)(nil)).Elem(), &ElasticsearchComponentTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchComponentTemplateArrayInput)(nil)).Elem(), ElasticsearchComponentTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchComponentTemplateMapInput)(nil)).Elem(), ElasticsearchComponentTemplateMap{})
	pulumi.RegisterOutputType(ElasticsearchComponentTemplateOutput{})
	pulumi.RegisterOutputType(ElasticsearchComponentTemplateArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchComponentTemplateMapOutput{})
}
