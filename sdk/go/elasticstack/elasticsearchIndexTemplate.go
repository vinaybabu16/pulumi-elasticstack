// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates an index template. Index templates define settings, mappings, and aliases that can be applied automatically to new indices. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"number_of_shards": "3",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := elasticstack.NewElasticsearchIndexTemplate(ctx, "myTemplate", &elasticstack.ElasticsearchIndexTemplateArgs{
// 			Priority: pulumi.Int(42),
// 			IndexPatterns: pulumi.StringArray{
// 				pulumi.String("logstash*"),
// 				pulumi.String("filebeat*"),
// 			},
// 			Template: &ElasticsearchIndexTemplateTemplateArgs{
// 				Aliases: ElasticsearchIndexTemplateTemplateAliasArray{
// 					&ElasticsearchIndexTemplateTemplateAliasArgs{
// 						Name: pulumi.String("my_template_test"),
// 					},
// 					&ElasticsearchIndexTemplateTemplateAliasArgs{
// 						Name: pulumi.String("another_test"),
// 					},
// 				},
// 				Settings: pulumi.String(json0),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewElasticsearchIndexTemplate(ctx, "myDataStream", &elasticstack.ElasticsearchIndexTemplateArgs{
// 			IndexPatterns: pulumi.StringArray{
// 				pulumi.String("stream*"),
// 			},
// 			DataStream: nil,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate my_template <cluster_uuid>/<template_name>
// ```
type ElasticsearchIndexTemplate struct {
	pulumi.CustomResourceState

	// An ordered list of component template names.
	ComposedOfs pulumi.StringArrayOutput `pulumi:"composedOfs"`
	// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
	DataStream ElasticsearchIndexTemplateDataStreamPtrOutput `pulumi:"dataStream"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexTemplateElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
	IndexPatterns pulumi.StringArrayOutput `pulumi:"indexPatterns"`
	// Optional user metadata about the index template.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// Name of the index template to create.
	Name pulumi.StringOutput `pulumi:"name"`
	// Priority to determine index template precedence when a new data stream or index is created.
	Priority pulumi.IntPtrOutput `pulumi:"priority"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchIndexTemplateTemplatePtrOutput `pulumi:"template"`
	// Version number used to manage index templates externally.
	Version pulumi.IntPtrOutput `pulumi:"version"`
}

// NewElasticsearchIndexTemplate registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchIndexTemplate(ctx *pulumi.Context,
	name string, args *ElasticsearchIndexTemplateArgs, opts ...pulumi.ResourceOption) (*ElasticsearchIndexTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IndexPatterns == nil {
		return nil, errors.New("invalid value for required argument 'IndexPatterns'")
	}
	var resource ElasticsearchIndexTemplate
	err := ctx.RegisterResource("elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchIndexTemplate gets an existing ElasticsearchIndexTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchIndexTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchIndexTemplateState, opts ...pulumi.ResourceOption) (*ElasticsearchIndexTemplate, error) {
	var resource ElasticsearchIndexTemplate
	err := ctx.ReadResource("elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchIndexTemplate resources.
type elasticsearchIndexTemplateState struct {
	// An ordered list of component template names.
	ComposedOfs []string `pulumi:"composedOfs"`
	// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
	DataStream *ElasticsearchIndexTemplateDataStream `pulumi:"dataStream"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchIndexTemplateElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
	IndexPatterns []string `pulumi:"indexPatterns"`
	// Optional user metadata about the index template.
	Metadata *string `pulumi:"metadata"`
	// Name of the index template to create.
	Name *string `pulumi:"name"`
	// Priority to determine index template precedence when a new data stream or index is created.
	Priority *int `pulumi:"priority"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template *ElasticsearchIndexTemplateTemplate `pulumi:"template"`
	// Version number used to manage index templates externally.
	Version *int `pulumi:"version"`
}

type ElasticsearchIndexTemplateState struct {
	// An ordered list of component template names.
	ComposedOfs pulumi.StringArrayInput
	// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
	DataStream ElasticsearchIndexTemplateDataStreamPtrInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexTemplateElasticsearchConnectionPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
	IndexPatterns pulumi.StringArrayInput
	// Optional user metadata about the index template.
	Metadata pulumi.StringPtrInput
	// Name of the index template to create.
	Name pulumi.StringPtrInput
	// Priority to determine index template precedence when a new data stream or index is created.
	Priority pulumi.IntPtrInput
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchIndexTemplateTemplatePtrInput
	// Version number used to manage index templates externally.
	Version pulumi.IntPtrInput
}

func (ElasticsearchIndexTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchIndexTemplateState)(nil)).Elem()
}

type elasticsearchIndexTemplateArgs struct {
	// An ordered list of component template names.
	ComposedOfs []string `pulumi:"composedOfs"`
	// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
	DataStream *ElasticsearchIndexTemplateDataStream `pulumi:"dataStream"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchIndexTemplateElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
	IndexPatterns []string `pulumi:"indexPatterns"`
	// Optional user metadata about the index template.
	Metadata *string `pulumi:"metadata"`
	// Name of the index template to create.
	Name *string `pulumi:"name"`
	// Priority to determine index template precedence when a new data stream or index is created.
	Priority *int `pulumi:"priority"`
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template *ElasticsearchIndexTemplateTemplate `pulumi:"template"`
	// Version number used to manage index templates externally.
	Version *int `pulumi:"version"`
}

// The set of arguments for constructing a ElasticsearchIndexTemplate resource.
type ElasticsearchIndexTemplateArgs struct {
	// An ordered list of component template names.
	ComposedOfs pulumi.StringArrayInput
	// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
	DataStream ElasticsearchIndexTemplateDataStreamPtrInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexTemplateElasticsearchConnectionPtrInput
	// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
	IndexPatterns pulumi.StringArrayInput
	// Optional user metadata about the index template.
	Metadata pulumi.StringPtrInput
	// Name of the index template to create.
	Name pulumi.StringPtrInput
	// Priority to determine index template precedence when a new data stream or index is created.
	Priority pulumi.IntPtrInput
	// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
	Template ElasticsearchIndexTemplateTemplatePtrInput
	// Version number used to manage index templates externally.
	Version pulumi.IntPtrInput
}

func (ElasticsearchIndexTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchIndexTemplateArgs)(nil)).Elem()
}

type ElasticsearchIndexTemplateInput interface {
	pulumi.Input

	ToElasticsearchIndexTemplateOutput() ElasticsearchIndexTemplateOutput
	ToElasticsearchIndexTemplateOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateOutput
}

func (*ElasticsearchIndexTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchIndexTemplate)(nil)).Elem()
}

func (i *ElasticsearchIndexTemplate) ToElasticsearchIndexTemplateOutput() ElasticsearchIndexTemplateOutput {
	return i.ToElasticsearchIndexTemplateOutputWithContext(context.Background())
}

func (i *ElasticsearchIndexTemplate) ToElasticsearchIndexTemplateOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexTemplateOutput)
}

// ElasticsearchIndexTemplateArrayInput is an input type that accepts ElasticsearchIndexTemplateArray and ElasticsearchIndexTemplateArrayOutput values.
// You can construct a concrete instance of `ElasticsearchIndexTemplateArrayInput` via:
//
//          ElasticsearchIndexTemplateArray{ ElasticsearchIndexTemplateArgs{...} }
type ElasticsearchIndexTemplateArrayInput interface {
	pulumi.Input

	ToElasticsearchIndexTemplateArrayOutput() ElasticsearchIndexTemplateArrayOutput
	ToElasticsearchIndexTemplateArrayOutputWithContext(context.Context) ElasticsearchIndexTemplateArrayOutput
}

type ElasticsearchIndexTemplateArray []ElasticsearchIndexTemplateInput

func (ElasticsearchIndexTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchIndexTemplate)(nil)).Elem()
}

func (i ElasticsearchIndexTemplateArray) ToElasticsearchIndexTemplateArrayOutput() ElasticsearchIndexTemplateArrayOutput {
	return i.ToElasticsearchIndexTemplateArrayOutputWithContext(context.Background())
}

func (i ElasticsearchIndexTemplateArray) ToElasticsearchIndexTemplateArrayOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexTemplateArrayOutput)
}

// ElasticsearchIndexTemplateMapInput is an input type that accepts ElasticsearchIndexTemplateMap and ElasticsearchIndexTemplateMapOutput values.
// You can construct a concrete instance of `ElasticsearchIndexTemplateMapInput` via:
//
//          ElasticsearchIndexTemplateMap{ "key": ElasticsearchIndexTemplateArgs{...} }
type ElasticsearchIndexTemplateMapInput interface {
	pulumi.Input

	ToElasticsearchIndexTemplateMapOutput() ElasticsearchIndexTemplateMapOutput
	ToElasticsearchIndexTemplateMapOutputWithContext(context.Context) ElasticsearchIndexTemplateMapOutput
}

type ElasticsearchIndexTemplateMap map[string]ElasticsearchIndexTemplateInput

func (ElasticsearchIndexTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchIndexTemplate)(nil)).Elem()
}

func (i ElasticsearchIndexTemplateMap) ToElasticsearchIndexTemplateMapOutput() ElasticsearchIndexTemplateMapOutput {
	return i.ToElasticsearchIndexTemplateMapOutputWithContext(context.Background())
}

func (i ElasticsearchIndexTemplateMap) ToElasticsearchIndexTemplateMapOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexTemplateMapOutput)
}

type ElasticsearchIndexTemplateOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchIndexTemplate)(nil)).Elem()
}

func (o ElasticsearchIndexTemplateOutput) ToElasticsearchIndexTemplateOutput() ElasticsearchIndexTemplateOutput {
	return o
}

func (o ElasticsearchIndexTemplateOutput) ToElasticsearchIndexTemplateOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateOutput {
	return o
}

type ElasticsearchIndexTemplateArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchIndexTemplate)(nil)).Elem()
}

func (o ElasticsearchIndexTemplateArrayOutput) ToElasticsearchIndexTemplateArrayOutput() ElasticsearchIndexTemplateArrayOutput {
	return o
}

func (o ElasticsearchIndexTemplateArrayOutput) ToElasticsearchIndexTemplateArrayOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateArrayOutput {
	return o
}

func (o ElasticsearchIndexTemplateArrayOutput) Index(i pulumi.IntInput) ElasticsearchIndexTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchIndexTemplate {
		return vs[0].([]*ElasticsearchIndexTemplate)[vs[1].(int)]
	}).(ElasticsearchIndexTemplateOutput)
}

type ElasticsearchIndexTemplateMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchIndexTemplate)(nil)).Elem()
}

func (o ElasticsearchIndexTemplateMapOutput) ToElasticsearchIndexTemplateMapOutput() ElasticsearchIndexTemplateMapOutput {
	return o
}

func (o ElasticsearchIndexTemplateMapOutput) ToElasticsearchIndexTemplateMapOutputWithContext(ctx context.Context) ElasticsearchIndexTemplateMapOutput {
	return o
}

func (o ElasticsearchIndexTemplateMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchIndexTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchIndexTemplate {
		return vs[0].(map[string]*ElasticsearchIndexTemplate)[vs[1].(string)]
	}).(ElasticsearchIndexTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexTemplateInput)(nil)).Elem(), &ElasticsearchIndexTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexTemplateArrayInput)(nil)).Elem(), ElasticsearchIndexTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexTemplateMapInput)(nil)).Elem(), ElasticsearchIndexTemplateMap{})
	pulumi.RegisterOutputType(ElasticsearchIndexTemplateOutput{})
	pulumi.RegisterOutputType(ElasticsearchIndexTemplateArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchIndexTemplateMapOutput{})
}
