// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Helper data source to which can be used to create a processor to convert circle definitions of shapes to regular polygons which approximate them.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		circle, err := elasticstack.ElasticsearchIngestProcessorCircle(ctx, &ElasticsearchIngestProcessorCircleArgs{
// 			Field:         "circle",
// 			ErrorDistance: 28.1,
// 			ShapeType:     "geo_shape",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, "myIngestPipeline", &elasticstack.ElasticsearchIngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				pulumi.String(circle.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func ElasticsearchIngestProcessorCircle(ctx *pulumi.Context, args *ElasticsearchIngestProcessorCircleArgs, opts ...pulumi.InvokeOption) (*ElasticsearchIngestProcessorCircleResult, error) {
	var rv ElasticsearchIngestProcessorCircleResult
	err := ctx.Invoke("elasticstack:index/elasticsearchIngestProcessorCircle:ElasticsearchIngestProcessorCircle", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ElasticsearchIngestProcessorCircle.
type ElasticsearchIngestProcessorCircleArgs struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
	ErrorDistance float64 `pulumi:"errorDistance"`
	// The string-valued field to trim whitespace from.
	Field string `pulumi:"field"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Which field mapping type is to be used when processing the circle.
	ShapeType string `pulumi:"shapeType"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place
	TargetField *string `pulumi:"targetField"`
}

// A collection of values returned by ElasticsearchIngestProcessorCircle.
type ElasticsearchIngestProcessorCircleResult struct {
	// Description of the processor.
	Description *string `pulumi:"description"`
	// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
	ErrorDistance float64 `pulumi:"errorDistance"`
	// The string-valued field to trim whitespace from.
	Field string `pulumi:"field"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// Conditionally execute the processor
	If *string `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure *bool `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Handle failures for the processor.
	OnFailures []string `pulumi:"onFailures"`
	// Which field mapping type is to be used when processing the circle.
	ShapeType string `pulumi:"shapeType"`
	// Identifier for the processor.
	Tag *string `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place
	TargetField *string `pulumi:"targetField"`
}

func ElasticsearchIngestProcessorCircleOutput(ctx *pulumi.Context, args ElasticsearchIngestProcessorCircleOutputArgs, opts ...pulumi.InvokeOption) ElasticsearchIngestProcessorCircleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ElasticsearchIngestProcessorCircleResult, error) {
			args := v.(ElasticsearchIngestProcessorCircleArgs)
			r, err := ElasticsearchIngestProcessorCircle(ctx, &args, opts...)
			return *r, err
		}).(ElasticsearchIngestProcessorCircleResultOutput)
}

// A collection of arguments for invoking ElasticsearchIngestProcessorCircle.
type ElasticsearchIngestProcessorCircleOutputArgs struct {
	// Description of the processor.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
	ErrorDistance pulumi.Float64Input `pulumi:"errorDistance"`
	// The string-valued field to trim whitespace from.
	Field pulumi.StringInput `pulumi:"field"`
	// Conditionally execute the processor
	If pulumi.StringPtrInput `pulumi:"if"`
	// Ignore failures for the processor.
	IgnoreFailure pulumi.BoolPtrInput `pulumi:"ignoreFailure"`
	// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Handle failures for the processor.
	OnFailures pulumi.StringArrayInput `pulumi:"onFailures"`
	// Which field mapping type is to be used when processing the circle.
	ShapeType pulumi.StringInput `pulumi:"shapeType"`
	// Identifier for the processor.
	Tag pulumi.StringPtrInput `pulumi:"tag"`
	// The field to assign the converted value to, by default `field` is updated in-place
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
}

func (ElasticsearchIngestProcessorCircleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchIngestProcessorCircleArgs)(nil)).Elem()
}

// A collection of values returned by ElasticsearchIngestProcessorCircle.
type ElasticsearchIngestProcessorCircleResultOutput struct{ *pulumi.OutputState }

func (ElasticsearchIngestProcessorCircleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchIngestProcessorCircleResult)(nil)).Elem()
}

func (o ElasticsearchIngestProcessorCircleResultOutput) ToElasticsearchIngestProcessorCircleResultOutput() ElasticsearchIngestProcessorCircleResultOutput {
	return o
}

func (o ElasticsearchIngestProcessorCircleResultOutput) ToElasticsearchIngestProcessorCircleResultOutputWithContext(ctx context.Context) ElasticsearchIngestProcessorCircleResultOutput {
	return o
}

// Description of the processor.
func (o ElasticsearchIngestProcessorCircleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
func (o ElasticsearchIngestProcessorCircleResultOutput) ErrorDistance() pulumi.Float64Output {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) float64 { return v.ErrorDistance }).(pulumi.Float64Output)
}

// The string-valued field to trim whitespace from.
func (o ElasticsearchIngestProcessorCircleResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) string { return v.Field }).(pulumi.StringOutput)
}

// Internal identifier of the resource
func (o ElasticsearchIngestProcessorCircleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Conditionally execute the processor
func (o ElasticsearchIngestProcessorCircleResultOutput) If() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) *string { return v.If }).(pulumi.StringPtrOutput)
}

// Ignore failures for the processor.
func (o ElasticsearchIngestProcessorCircleResultOutput) IgnoreFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) *bool { return v.IgnoreFailure }).(pulumi.BoolPtrOutput)
}

// If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
func (o ElasticsearchIngestProcessorCircleResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o ElasticsearchIngestProcessorCircleResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) string { return v.Json }).(pulumi.StringOutput)
}

// Handle failures for the processor.
func (o ElasticsearchIngestProcessorCircleResultOutput) OnFailures() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) []string { return v.OnFailures }).(pulumi.StringArrayOutput)
}

// Which field mapping type is to be used when processing the circle.
func (o ElasticsearchIngestProcessorCircleResultOutput) ShapeType() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) string { return v.ShapeType }).(pulumi.StringOutput)
}

// Identifier for the processor.
func (o ElasticsearchIngestProcessorCircleResultOutput) Tag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) *string { return v.Tag }).(pulumi.StringPtrOutput)
}

// The field to assign the converted value to, by default `field` is updated in-place
func (o ElasticsearchIngestProcessorCircleResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorCircleResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticsearchIngestProcessorCircleResultOutput{})
}
