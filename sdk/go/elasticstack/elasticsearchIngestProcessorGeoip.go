// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The geoip processor adds information about the geographical location of an IPv4 or IPv6 address.
//
// By default, the processor uses the GeoLite2 City, GeoLite2 Country, and GeoLite2 ASN GeoIP2 databases from MaxMind, shared under the CC BY-SA 4.0 license. Elasticsearch automatically downloads updates for these databases from the Elastic GeoIP endpoint: https://geoip.elastic.co/v1/database. To get download statistics for these updates, use the GeoIP stats API.
//
// If your cluster can’t connect to the Elastic GeoIP endpoint or you want to manage your own updates, [see Manage your own GeoIP2 database updates](https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html#manage-geoip-database-updates).
//
// If Elasticsearch can’t connect to the endpoint for 30 days all updated databases will become invalid. Elasticsearch will stop enriching documents with geoip data and will add tags: ["_geoip_expired_database"] field instead.
//
// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/geoip-processor.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		geoip, err := elasticstack.ElasticsearchIngestProcessorGeoip(ctx, &ElasticsearchIngestProcessorGeoipArgs{
// 			Field: "ip",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewElasticsearchIngestPipeline(ctx, "myIngestPipeline", &elasticstack.ElasticsearchIngestPipelineArgs{
// 			Processors: pulumi.StringArray{
// 				pulumi.String(geoip.Json),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func ElasticsearchIngestProcessorGeoip(ctx *pulumi.Context, args *ElasticsearchIngestProcessorGeoipArgs, opts ...pulumi.InvokeOption) (*ElasticsearchIngestProcessorGeoipResult, error) {
	var rv ElasticsearchIngestProcessorGeoipResult
	err := ctx.Invoke("elasticstack:index/elasticsearchIngestProcessorGeoip:ElasticsearchIngestProcessorGeoip", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking ElasticsearchIngestProcessorGeoip.
type ElasticsearchIngestProcessorGeoipArgs struct {
	// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
	DatabaseFile *string `pulumi:"databaseFile"`
	// The field to get the ip address from for the geographical lookup.
	Field string `pulumi:"field"`
	// If `true` only first found geoip data will be returned, even if field contains array.
	FirstOnly *bool `pulumi:"firstOnly"`
	// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// Controls what properties are added to the `targetField` based on the geoip lookup.
	Properties []string `pulumi:"properties"`
	// The field that will hold the geographical information looked up from the MaxMind database.
	TargetField *string `pulumi:"targetField"`
}

// A collection of values returned by ElasticsearchIngestProcessorGeoip.
type ElasticsearchIngestProcessorGeoipResult struct {
	// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
	DatabaseFile *string `pulumi:"databaseFile"`
	// The field to get the ip address from for the geographical lookup.
	Field string `pulumi:"field"`
	// If `true` only first found geoip data will be returned, even if field contains array.
	FirstOnly *bool `pulumi:"firstOnly"`
	// Internal identifier of the resource
	Id string `pulumi:"id"`
	// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
	IgnoreMissing *bool `pulumi:"ignoreMissing"`
	// JSON representation of this data source.
	Json string `pulumi:"json"`
	// Controls what properties are added to the `targetField` based on the geoip lookup.
	Properties []string `pulumi:"properties"`
	// The field that will hold the geographical information looked up from the MaxMind database.
	TargetField *string `pulumi:"targetField"`
}

func ElasticsearchIngestProcessorGeoipOutput(ctx *pulumi.Context, args ElasticsearchIngestProcessorGeoipOutputArgs, opts ...pulumi.InvokeOption) ElasticsearchIngestProcessorGeoipResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (ElasticsearchIngestProcessorGeoipResult, error) {
			args := v.(ElasticsearchIngestProcessorGeoipArgs)
			r, err := ElasticsearchIngestProcessorGeoip(ctx, &args, opts...)
			return *r, err
		}).(ElasticsearchIngestProcessorGeoipResultOutput)
}

// A collection of arguments for invoking ElasticsearchIngestProcessorGeoip.
type ElasticsearchIngestProcessorGeoipOutputArgs struct {
	// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
	DatabaseFile pulumi.StringPtrInput `pulumi:"databaseFile"`
	// The field to get the ip address from for the geographical lookup.
	Field pulumi.StringInput `pulumi:"field"`
	// If `true` only first found geoip data will be returned, even if field contains array.
	FirstOnly pulumi.BoolPtrInput `pulumi:"firstOnly"`
	// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
	IgnoreMissing pulumi.BoolPtrInput `pulumi:"ignoreMissing"`
	// Controls what properties are added to the `targetField` based on the geoip lookup.
	Properties pulumi.StringArrayInput `pulumi:"properties"`
	// The field that will hold the geographical information looked up from the MaxMind database.
	TargetField pulumi.StringPtrInput `pulumi:"targetField"`
}

func (ElasticsearchIngestProcessorGeoipOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchIngestProcessorGeoipArgs)(nil)).Elem()
}

// A collection of values returned by ElasticsearchIngestProcessorGeoip.
type ElasticsearchIngestProcessorGeoipResultOutput struct{ *pulumi.OutputState }

func (ElasticsearchIngestProcessorGeoipResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ElasticsearchIngestProcessorGeoipResult)(nil)).Elem()
}

func (o ElasticsearchIngestProcessorGeoipResultOutput) ToElasticsearchIngestProcessorGeoipResultOutput() ElasticsearchIngestProcessorGeoipResultOutput {
	return o
}

func (o ElasticsearchIngestProcessorGeoipResultOutput) ToElasticsearchIngestProcessorGeoipResultOutputWithContext(ctx context.Context) ElasticsearchIngestProcessorGeoipResultOutput {
	return o
}

// The database filename referring to a database the module ships with (GeoLite2-City.mmdb, GeoLite2-Country.mmdb, or GeoLite2-ASN.mmdb) or a custom database in the `ingest-geoip` config directory.
func (o ElasticsearchIngestProcessorGeoipResultOutput) DatabaseFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) *string { return v.DatabaseFile }).(pulumi.StringPtrOutput)
}

// The field to get the ip address from for the geographical lookup.
func (o ElasticsearchIngestProcessorGeoipResultOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) string { return v.Field }).(pulumi.StringOutput)
}

// If `true` only first found geoip data will be returned, even if field contains array.
func (o ElasticsearchIngestProcessorGeoipResultOutput) FirstOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) *bool { return v.FirstOnly }).(pulumi.BoolPtrOutput)
}

// Internal identifier of the resource
func (o ElasticsearchIngestProcessorGeoipResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) string { return v.Id }).(pulumi.StringOutput)
}

// If `true` and `field` does not exist, the processor quietly exits without modifying the document.
func (o ElasticsearchIngestProcessorGeoipResultOutput) IgnoreMissing() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) *bool { return v.IgnoreMissing }).(pulumi.BoolPtrOutput)
}

// JSON representation of this data source.
func (o ElasticsearchIngestProcessorGeoipResultOutput) Json() pulumi.StringOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) string { return v.Json }).(pulumi.StringOutput)
}

// Controls what properties are added to the `targetField` based on the geoip lookup.
func (o ElasticsearchIngestProcessorGeoipResultOutput) Properties() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) []string { return v.Properties }).(pulumi.StringArrayOutput)
}

// The field that will hold the geographical information looked up from the MaxMind database.
func (o ElasticsearchIngestProcessorGeoipResultOutput) TargetField() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ElasticsearchIngestProcessorGeoipResult) *string { return v.TargetField }).(pulumi.StringPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(ElasticsearchIngestProcessorGeoipResultOutput{})
}
