// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates or updates lifecycle policy. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-put-lifecycle.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/ilm-index-lifecycle.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"box_type": "hot",
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := elasticstack.NewElasticsearchIndexLifecycle(ctx, "myIlm", &elasticstack.ElasticsearchIndexLifecycleArgs{
// 			Hot: &ElasticsearchIndexLifecycleHotArgs{
// 				MinAge: pulumi.String("1h"),
// 				SetPriority: &ElasticsearchIndexLifecycleHotSetPriorityArgs{
// 					Priority: pulumi.Int(10),
// 				},
// 				Rollover: &ElasticsearchIndexLifecycleHotRolloverArgs{
// 					MaxAge: pulumi.String("1d"),
// 				},
// 				Readonly: nil,
// 			},
// 			Warm: &ElasticsearchIndexLifecycleWarmArgs{
// 				MinAge: pulumi.String("0ms"),
// 				SetPriority: &ElasticsearchIndexLifecycleWarmSetPriorityArgs{
// 					Priority: pulumi.Int(60),
// 				},
// 				Readonly: nil,
// 				Allocate: &ElasticsearchIndexLifecycleWarmAllocateArgs{
// 					Exclude:          pulumi.String(json0),
// 					NumberOfReplicas: pulumi.Int(0),
// 				},
// 			},
// 			Delete: &ElasticsearchIndexLifecycleDeleteArgs{
// 				MinAge: pulumi.String("2d"),
// 				Delete: nil,
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchIndexLifecycle:ElasticsearchIndexLifecycle my_ilm <cluster_uuid>/<ilm_name>
// ```
type ElasticsearchIndexLifecycle struct {
	pulumi.CustomResourceState

	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold ElasticsearchIndexLifecycleColdPtrOutput `pulumi:"cold"`
	// The index is no longer needed and can safely be removed.
	Delete ElasticsearchIndexLifecycleDeletePtrOutput `pulumi:"delete"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexLifecycleElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen ElasticsearchIndexLifecycleFrozenPtrOutput `pulumi:"frozen"`
	// The index is actively being updated and queried.
	Hot ElasticsearchIndexLifecycleHotPtrOutput `pulumi:"hot"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata pulumi.StringPtrOutput `pulumi:"metadata"`
	// The DateTime of the last modification.
	ModifiedDate pulumi.StringOutput `pulumi:"modifiedDate"`
	// Identifier for the policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// The index is no longer being updated but is still being queried.
	Warm ElasticsearchIndexLifecycleWarmPtrOutput `pulumi:"warm"`
}

// NewElasticsearchIndexLifecycle registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchIndexLifecycle(ctx *pulumi.Context,
	name string, args *ElasticsearchIndexLifecycleArgs, opts ...pulumi.ResourceOption) (*ElasticsearchIndexLifecycle, error) {
	if args == nil {
		args = &ElasticsearchIndexLifecycleArgs{}
	}

	var resource ElasticsearchIndexLifecycle
	err := ctx.RegisterResource("elasticstack:index/elasticsearchIndexLifecycle:ElasticsearchIndexLifecycle", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchIndexLifecycle gets an existing ElasticsearchIndexLifecycle resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchIndexLifecycle(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchIndexLifecycleState, opts ...pulumi.ResourceOption) (*ElasticsearchIndexLifecycle, error) {
	var resource ElasticsearchIndexLifecycle
	err := ctx.ReadResource("elasticstack:index/elasticsearchIndexLifecycle:ElasticsearchIndexLifecycle", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchIndexLifecycle resources.
type elasticsearchIndexLifecycleState struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold *ElasticsearchIndexLifecycleCold `pulumi:"cold"`
	// The index is no longer needed and can safely be removed.
	Delete *ElasticsearchIndexLifecycleDelete `pulumi:"delete"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchIndexLifecycleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen *ElasticsearchIndexLifecycleFrozen `pulumi:"frozen"`
	// The index is actively being updated and queried.
	Hot *ElasticsearchIndexLifecycleHot `pulumi:"hot"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata *string `pulumi:"metadata"`
	// The DateTime of the last modification.
	ModifiedDate *string `pulumi:"modifiedDate"`
	// Identifier for the policy.
	Name *string `pulumi:"name"`
	// The index is no longer being updated but is still being queried.
	Warm *ElasticsearchIndexLifecycleWarm `pulumi:"warm"`
}

type ElasticsearchIndexLifecycleState struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold ElasticsearchIndexLifecycleColdPtrInput
	// The index is no longer needed and can safely be removed.
	Delete ElasticsearchIndexLifecycleDeletePtrInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexLifecycleElasticsearchConnectionPtrInput
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen ElasticsearchIndexLifecycleFrozenPtrInput
	// The index is actively being updated and queried.
	Hot ElasticsearchIndexLifecycleHotPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata pulumi.StringPtrInput
	// The DateTime of the last modification.
	ModifiedDate pulumi.StringPtrInput
	// Identifier for the policy.
	Name pulumi.StringPtrInput
	// The index is no longer being updated but is still being queried.
	Warm ElasticsearchIndexLifecycleWarmPtrInput
}

func (ElasticsearchIndexLifecycleState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchIndexLifecycleState)(nil)).Elem()
}

type elasticsearchIndexLifecycleArgs struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold *ElasticsearchIndexLifecycleCold `pulumi:"cold"`
	// The index is no longer needed and can safely be removed.
	Delete *ElasticsearchIndexLifecycleDelete `pulumi:"delete"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchIndexLifecycleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen *ElasticsearchIndexLifecycleFrozen `pulumi:"frozen"`
	// The index is actively being updated and queried.
	Hot *ElasticsearchIndexLifecycleHot `pulumi:"hot"`
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata *string `pulumi:"metadata"`
	// Identifier for the policy.
	Name *string `pulumi:"name"`
	// The index is no longer being updated but is still being queried.
	Warm *ElasticsearchIndexLifecycleWarm `pulumi:"warm"`
}

// The set of arguments for constructing a ElasticsearchIndexLifecycle resource.
type ElasticsearchIndexLifecycleArgs struct {
	// The index is no longer being updated and is queried infrequently. The information still needs to be searchable, but it’s okay if those queries are slower.
	Cold ElasticsearchIndexLifecycleColdPtrInput
	// The index is no longer needed and can safely be removed.
	Delete ElasticsearchIndexLifecycleDeletePtrInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchIndexLifecycleElasticsearchConnectionPtrInput
	// The index is no longer being updated and is queried rarely. The information still needs to be searchable, but it’s okay if those queries are extremely slow.
	Frozen ElasticsearchIndexLifecycleFrozenPtrInput
	// The index is actively being updated and queried.
	Hot ElasticsearchIndexLifecycleHotPtrInput
	// Optional user metadata about the ilm policy. Must be valid JSON document.
	Metadata pulumi.StringPtrInput
	// Identifier for the policy.
	Name pulumi.StringPtrInput
	// The index is no longer being updated but is still being queried.
	Warm ElasticsearchIndexLifecycleWarmPtrInput
}

func (ElasticsearchIndexLifecycleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchIndexLifecycleArgs)(nil)).Elem()
}

type ElasticsearchIndexLifecycleInput interface {
	pulumi.Input

	ToElasticsearchIndexLifecycleOutput() ElasticsearchIndexLifecycleOutput
	ToElasticsearchIndexLifecycleOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleOutput
}

func (*ElasticsearchIndexLifecycle) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchIndexLifecycle)(nil)).Elem()
}

func (i *ElasticsearchIndexLifecycle) ToElasticsearchIndexLifecycleOutput() ElasticsearchIndexLifecycleOutput {
	return i.ToElasticsearchIndexLifecycleOutputWithContext(context.Background())
}

func (i *ElasticsearchIndexLifecycle) ToElasticsearchIndexLifecycleOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexLifecycleOutput)
}

// ElasticsearchIndexLifecycleArrayInput is an input type that accepts ElasticsearchIndexLifecycleArray and ElasticsearchIndexLifecycleArrayOutput values.
// You can construct a concrete instance of `ElasticsearchIndexLifecycleArrayInput` via:
//
//          ElasticsearchIndexLifecycleArray{ ElasticsearchIndexLifecycleArgs{...} }
type ElasticsearchIndexLifecycleArrayInput interface {
	pulumi.Input

	ToElasticsearchIndexLifecycleArrayOutput() ElasticsearchIndexLifecycleArrayOutput
	ToElasticsearchIndexLifecycleArrayOutputWithContext(context.Context) ElasticsearchIndexLifecycleArrayOutput
}

type ElasticsearchIndexLifecycleArray []ElasticsearchIndexLifecycleInput

func (ElasticsearchIndexLifecycleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchIndexLifecycle)(nil)).Elem()
}

func (i ElasticsearchIndexLifecycleArray) ToElasticsearchIndexLifecycleArrayOutput() ElasticsearchIndexLifecycleArrayOutput {
	return i.ToElasticsearchIndexLifecycleArrayOutputWithContext(context.Background())
}

func (i ElasticsearchIndexLifecycleArray) ToElasticsearchIndexLifecycleArrayOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexLifecycleArrayOutput)
}

// ElasticsearchIndexLifecycleMapInput is an input type that accepts ElasticsearchIndexLifecycleMap and ElasticsearchIndexLifecycleMapOutput values.
// You can construct a concrete instance of `ElasticsearchIndexLifecycleMapInput` via:
//
//          ElasticsearchIndexLifecycleMap{ "key": ElasticsearchIndexLifecycleArgs{...} }
type ElasticsearchIndexLifecycleMapInput interface {
	pulumi.Input

	ToElasticsearchIndexLifecycleMapOutput() ElasticsearchIndexLifecycleMapOutput
	ToElasticsearchIndexLifecycleMapOutputWithContext(context.Context) ElasticsearchIndexLifecycleMapOutput
}

type ElasticsearchIndexLifecycleMap map[string]ElasticsearchIndexLifecycleInput

func (ElasticsearchIndexLifecycleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchIndexLifecycle)(nil)).Elem()
}

func (i ElasticsearchIndexLifecycleMap) ToElasticsearchIndexLifecycleMapOutput() ElasticsearchIndexLifecycleMapOutput {
	return i.ToElasticsearchIndexLifecycleMapOutputWithContext(context.Background())
}

func (i ElasticsearchIndexLifecycleMap) ToElasticsearchIndexLifecycleMapOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchIndexLifecycleMapOutput)
}

type ElasticsearchIndexLifecycleOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexLifecycleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchIndexLifecycle)(nil)).Elem()
}

func (o ElasticsearchIndexLifecycleOutput) ToElasticsearchIndexLifecycleOutput() ElasticsearchIndexLifecycleOutput {
	return o
}

func (o ElasticsearchIndexLifecycleOutput) ToElasticsearchIndexLifecycleOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleOutput {
	return o
}

type ElasticsearchIndexLifecycleArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexLifecycleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchIndexLifecycle)(nil)).Elem()
}

func (o ElasticsearchIndexLifecycleArrayOutput) ToElasticsearchIndexLifecycleArrayOutput() ElasticsearchIndexLifecycleArrayOutput {
	return o
}

func (o ElasticsearchIndexLifecycleArrayOutput) ToElasticsearchIndexLifecycleArrayOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleArrayOutput {
	return o
}

func (o ElasticsearchIndexLifecycleArrayOutput) Index(i pulumi.IntInput) ElasticsearchIndexLifecycleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchIndexLifecycle {
		return vs[0].([]*ElasticsearchIndexLifecycle)[vs[1].(int)]
	}).(ElasticsearchIndexLifecycleOutput)
}

type ElasticsearchIndexLifecycleMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchIndexLifecycleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchIndexLifecycle)(nil)).Elem()
}

func (o ElasticsearchIndexLifecycleMapOutput) ToElasticsearchIndexLifecycleMapOutput() ElasticsearchIndexLifecycleMapOutput {
	return o
}

func (o ElasticsearchIndexLifecycleMapOutput) ToElasticsearchIndexLifecycleMapOutputWithContext(ctx context.Context) ElasticsearchIndexLifecycleMapOutput {
	return o
}

func (o ElasticsearchIndexLifecycleMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchIndexLifecycleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchIndexLifecycle {
		return vs[0].(map[string]*ElasticsearchIndexLifecycle)[vs[1].(string)]
	}).(ElasticsearchIndexLifecycleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexLifecycleInput)(nil)).Elem(), &ElasticsearchIndexLifecycle{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexLifecycleArrayInput)(nil)).Elem(), ElasticsearchIndexLifecycleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchIndexLifecycleMapInput)(nil)).Elem(), ElasticsearchIndexLifecycleMap{})
	pulumi.RegisterOutputType(ElasticsearchIndexLifecycleOutput{})
	pulumi.RegisterOutputType(ElasticsearchIndexLifecycleArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchIndexLifecycleMapOutput{})
}
