// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := elasticstack.NewElasticsearchClusterSettings(ctx, "myClusterSettings", &elasticstack.ElasticsearchClusterSettingsArgs{
// 			Persistent: &ElasticsearchClusterSettingsPersistentArgs{
// 				Settings: ElasticsearchClusterSettingsPersistentSettingArray{
// 					&ElasticsearchClusterSettingsPersistentSettingArgs{
// 						Name:  pulumi.String("indices.lifecycle.poll_interval"),
// 						Value: pulumi.String("10m"),
// 					},
// 					&ElasticsearchClusterSettingsPersistentSettingArgs{
// 						Name:  pulumi.String("indices.recovery.max_bytes_per_sec"),
// 						Value: pulumi.String("50mb"),
// 					},
// 					&ElasticsearchClusterSettingsPersistentSettingArgs{
// 						Name:  pulumi.String("indices.breaker.accounting.limit"),
// 						Value: pulumi.String(fmt.Sprintf("%v%v", "100", "%")),
// 					},
// 					&ElasticsearchClusterSettingsPersistentSettingArgs{
// 						Name: pulumi.String("xpack.security.audit.logfile.events.include"),
// 						ValueList: []string{
// 							"ACCESS_DENIED",
// 							"ACCESS_GRANTED",
// 						},
// 					},
// 				},
// 			},
// 			Transient: &ElasticsearchClusterSettingsTransientArgs{
// 				Settings: ElasticsearchClusterSettingsTransientSettingArray{
// 					&ElasticsearchClusterSettingsTransientSettingArgs{
// 						Name:  pulumi.String("indices.breaker.accounting.limit"),
// 						Value: pulumi.String(fmt.Sprintf("%v%v", "99", "%")),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ElasticsearchClusterSettings struct {
	pulumi.CustomResourceState

	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchClusterSettingsElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Settings will apply across restarts.
	Persistent ElasticsearchClusterSettingsPersistentPtrOutput `pulumi:"persistent"`
	// Settings do not survive a full cluster restart.
	Transient ElasticsearchClusterSettingsTransientPtrOutput `pulumi:"transient"`
}

// NewElasticsearchClusterSettings registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchClusterSettings(ctx *pulumi.Context,
	name string, args *ElasticsearchClusterSettingsArgs, opts ...pulumi.ResourceOption) (*ElasticsearchClusterSettings, error) {
	if args == nil {
		args = &ElasticsearchClusterSettingsArgs{}
	}

	var resource ElasticsearchClusterSettings
	err := ctx.RegisterResource("elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchClusterSettings gets an existing ElasticsearchClusterSettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchClusterSettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchClusterSettingsState, opts ...pulumi.ResourceOption) (*ElasticsearchClusterSettings, error) {
	var resource ElasticsearchClusterSettings
	err := ctx.ReadResource("elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchClusterSettings resources.
type elasticsearchClusterSettingsState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchClusterSettingsElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Settings will apply across restarts.
	Persistent *ElasticsearchClusterSettingsPersistent `pulumi:"persistent"`
	// Settings do not survive a full cluster restart.
	Transient *ElasticsearchClusterSettingsTransient `pulumi:"transient"`
}

type ElasticsearchClusterSettingsState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchClusterSettingsElasticsearchConnectionPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Settings will apply across restarts.
	Persistent ElasticsearchClusterSettingsPersistentPtrInput
	// Settings do not survive a full cluster restart.
	Transient ElasticsearchClusterSettingsTransientPtrInput
}

func (ElasticsearchClusterSettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchClusterSettingsState)(nil)).Elem()
}

type elasticsearchClusterSettingsArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchClusterSettingsElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Settings will apply across restarts.
	Persistent *ElasticsearchClusterSettingsPersistent `pulumi:"persistent"`
	// Settings do not survive a full cluster restart.
	Transient *ElasticsearchClusterSettingsTransient `pulumi:"transient"`
}

// The set of arguments for constructing a ElasticsearchClusterSettings resource.
type ElasticsearchClusterSettingsArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchClusterSettingsElasticsearchConnectionPtrInput
	// Settings will apply across restarts.
	Persistent ElasticsearchClusterSettingsPersistentPtrInput
	// Settings do not survive a full cluster restart.
	Transient ElasticsearchClusterSettingsTransientPtrInput
}

func (ElasticsearchClusterSettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchClusterSettingsArgs)(nil)).Elem()
}

type ElasticsearchClusterSettingsInput interface {
	pulumi.Input

	ToElasticsearchClusterSettingsOutput() ElasticsearchClusterSettingsOutput
	ToElasticsearchClusterSettingsOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsOutput
}

func (*ElasticsearchClusterSettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchClusterSettings)(nil)).Elem()
}

func (i *ElasticsearchClusterSettings) ToElasticsearchClusterSettingsOutput() ElasticsearchClusterSettingsOutput {
	return i.ToElasticsearchClusterSettingsOutputWithContext(context.Background())
}

func (i *ElasticsearchClusterSettings) ToElasticsearchClusterSettingsOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchClusterSettingsOutput)
}

// ElasticsearchClusterSettingsArrayInput is an input type that accepts ElasticsearchClusterSettingsArray and ElasticsearchClusterSettingsArrayOutput values.
// You can construct a concrete instance of `ElasticsearchClusterSettingsArrayInput` via:
//
//          ElasticsearchClusterSettingsArray{ ElasticsearchClusterSettingsArgs{...} }
type ElasticsearchClusterSettingsArrayInput interface {
	pulumi.Input

	ToElasticsearchClusterSettingsArrayOutput() ElasticsearchClusterSettingsArrayOutput
	ToElasticsearchClusterSettingsArrayOutputWithContext(context.Context) ElasticsearchClusterSettingsArrayOutput
}

type ElasticsearchClusterSettingsArray []ElasticsearchClusterSettingsInput

func (ElasticsearchClusterSettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchClusterSettings)(nil)).Elem()
}

func (i ElasticsearchClusterSettingsArray) ToElasticsearchClusterSettingsArrayOutput() ElasticsearchClusterSettingsArrayOutput {
	return i.ToElasticsearchClusterSettingsArrayOutputWithContext(context.Background())
}

func (i ElasticsearchClusterSettingsArray) ToElasticsearchClusterSettingsArrayOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchClusterSettingsArrayOutput)
}

// ElasticsearchClusterSettingsMapInput is an input type that accepts ElasticsearchClusterSettingsMap and ElasticsearchClusterSettingsMapOutput values.
// You can construct a concrete instance of `ElasticsearchClusterSettingsMapInput` via:
//
//          ElasticsearchClusterSettingsMap{ "key": ElasticsearchClusterSettingsArgs{...} }
type ElasticsearchClusterSettingsMapInput interface {
	pulumi.Input

	ToElasticsearchClusterSettingsMapOutput() ElasticsearchClusterSettingsMapOutput
	ToElasticsearchClusterSettingsMapOutputWithContext(context.Context) ElasticsearchClusterSettingsMapOutput
}

type ElasticsearchClusterSettingsMap map[string]ElasticsearchClusterSettingsInput

func (ElasticsearchClusterSettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchClusterSettings)(nil)).Elem()
}

func (i ElasticsearchClusterSettingsMap) ToElasticsearchClusterSettingsMapOutput() ElasticsearchClusterSettingsMapOutput {
	return i.ToElasticsearchClusterSettingsMapOutputWithContext(context.Background())
}

func (i ElasticsearchClusterSettingsMap) ToElasticsearchClusterSettingsMapOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchClusterSettingsMapOutput)
}

type ElasticsearchClusterSettingsOutput struct{ *pulumi.OutputState }

func (ElasticsearchClusterSettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchClusterSettings)(nil)).Elem()
}

func (o ElasticsearchClusterSettingsOutput) ToElasticsearchClusterSettingsOutput() ElasticsearchClusterSettingsOutput {
	return o
}

func (o ElasticsearchClusterSettingsOutput) ToElasticsearchClusterSettingsOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsOutput {
	return o
}

type ElasticsearchClusterSettingsArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchClusterSettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchClusterSettings)(nil)).Elem()
}

func (o ElasticsearchClusterSettingsArrayOutput) ToElasticsearchClusterSettingsArrayOutput() ElasticsearchClusterSettingsArrayOutput {
	return o
}

func (o ElasticsearchClusterSettingsArrayOutput) ToElasticsearchClusterSettingsArrayOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsArrayOutput {
	return o
}

func (o ElasticsearchClusterSettingsArrayOutput) Index(i pulumi.IntInput) ElasticsearchClusterSettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchClusterSettings {
		return vs[0].([]*ElasticsearchClusterSettings)[vs[1].(int)]
	}).(ElasticsearchClusterSettingsOutput)
}

type ElasticsearchClusterSettingsMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchClusterSettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchClusterSettings)(nil)).Elem()
}

func (o ElasticsearchClusterSettingsMapOutput) ToElasticsearchClusterSettingsMapOutput() ElasticsearchClusterSettingsMapOutput {
	return o
}

func (o ElasticsearchClusterSettingsMapOutput) ToElasticsearchClusterSettingsMapOutputWithContext(ctx context.Context) ElasticsearchClusterSettingsMapOutput {
	return o
}

func (o ElasticsearchClusterSettingsMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchClusterSettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchClusterSettings {
		return vs[0].(map[string]*ElasticsearchClusterSettings)[vs[1].(string)]
	}).(ElasticsearchClusterSettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchClusterSettingsInput)(nil)).Elem(), &ElasticsearchClusterSettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchClusterSettingsArrayInput)(nil)).Elem(), ElasticsearchClusterSettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchClusterSettingsMapInput)(nil)).Elem(), ElasticsearchClusterSettingsMap{})
	pulumi.RegisterOutputType(ElasticsearchClusterSettingsOutput{})
	pulumi.RegisterOutputType(ElasticsearchClusterSettingsArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchClusterSettingsMapOutput{})
}
