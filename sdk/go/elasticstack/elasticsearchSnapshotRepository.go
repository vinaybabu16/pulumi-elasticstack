// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Registers or updates a snapshot repository. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/put-snapshot-repo-api.html and https://www.elastic.co/guide/en/elasticsearch/reference/current/snapshots-register-repository.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := elasticstack.NewElasticsearchSnapshotRepository(ctx, "myUrlRepo", &elasticstack.ElasticsearchSnapshotRepositoryArgs{
// 			Url: &ElasticsearchSnapshotRepositoryUrlArgs{
// 				Url: pulumi.String("https://example.com/repo"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = elasticstack.NewElasticsearchSnapshotRepository(ctx, "myFsRepo", &elasticstack.ElasticsearchSnapshotRepositoryArgs{
// 			Fs: &ElasticsearchSnapshotRepositoryFsArgs{
// 				Compress:              pulumi.Bool(true),
// 				Location:              pulumi.String("/tmp"),
// 				MaxRestoreBytesPerSec: pulumi.String("10mb"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository my_repository <cluster_uuid>/<repository name>
// ```
type ElasticsearchSnapshotRepository struct {
	pulumi.CustomResourceState

	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure ElasticsearchSnapshotRepositoryAzurePtrOutput `pulumi:"azure"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSnapshotRepositoryElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs ElasticsearchSnapshotRepositoryFsPtrOutput `pulumi:"fs"`
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs ElasticsearchSnapshotRepositoryGcsPtrOutput `pulumi:"gcs"`
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs ElasticsearchSnapshotRepositoryHdfsPtrOutput `pulumi:"hdfs"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Name of the snapshot repository to register or update.
	Name pulumi.StringOutput `pulumi:"name"`
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 ElasticsearchSnapshotRepositoryS3PtrOutput `pulumi:"s3"`
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url ElasticsearchSnapshotRepositoryUrlPtrOutput `pulumi:"url"`
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify pulumi.BoolPtrOutput `pulumi:"verify"`
}

// NewElasticsearchSnapshotRepository registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchSnapshotRepository(ctx *pulumi.Context,
	name string, args *ElasticsearchSnapshotRepositoryArgs, opts ...pulumi.ResourceOption) (*ElasticsearchSnapshotRepository, error) {
	if args == nil {
		args = &ElasticsearchSnapshotRepositoryArgs{}
	}

	var resource ElasticsearchSnapshotRepository
	err := ctx.RegisterResource("elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchSnapshotRepository gets an existing ElasticsearchSnapshotRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchSnapshotRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchSnapshotRepositoryState, opts ...pulumi.ResourceOption) (*ElasticsearchSnapshotRepository, error) {
	var resource ElasticsearchSnapshotRepository
	err := ctx.ReadResource("elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchSnapshotRepository resources.
type elasticsearchSnapshotRepositoryState struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure *ElasticsearchSnapshotRepositoryAzure `pulumi:"azure"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSnapshotRepositoryElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs *ElasticsearchSnapshotRepositoryFs `pulumi:"fs"`
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs *ElasticsearchSnapshotRepositoryGcs `pulumi:"gcs"`
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs *ElasticsearchSnapshotRepositoryHdfs `pulumi:"hdfs"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Name of the snapshot repository to register or update.
	Name *string `pulumi:"name"`
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 *ElasticsearchSnapshotRepositoryS3 `pulumi:"s3"`
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url *ElasticsearchSnapshotRepositoryUrl `pulumi:"url"`
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify *bool `pulumi:"verify"`
}

type ElasticsearchSnapshotRepositoryState struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure ElasticsearchSnapshotRepositoryAzurePtrInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSnapshotRepositoryElasticsearchConnectionPtrInput
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs ElasticsearchSnapshotRepositoryFsPtrInput
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs ElasticsearchSnapshotRepositoryGcsPtrInput
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs ElasticsearchSnapshotRepositoryHdfsPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Name of the snapshot repository to register or update.
	Name pulumi.StringPtrInput
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 ElasticsearchSnapshotRepositoryS3PtrInput
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url ElasticsearchSnapshotRepositoryUrlPtrInput
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify pulumi.BoolPtrInput
}

func (ElasticsearchSnapshotRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSnapshotRepositoryState)(nil)).Elem()
}

type elasticsearchSnapshotRepositoryArgs struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure *ElasticsearchSnapshotRepositoryAzure `pulumi:"azure"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSnapshotRepositoryElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs *ElasticsearchSnapshotRepositoryFs `pulumi:"fs"`
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs *ElasticsearchSnapshotRepositoryGcs `pulumi:"gcs"`
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs *ElasticsearchSnapshotRepositoryHdfs `pulumi:"hdfs"`
	// Name of the snapshot repository to register or update.
	Name *string `pulumi:"name"`
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 *ElasticsearchSnapshotRepositoryS3 `pulumi:"s3"`
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url *ElasticsearchSnapshotRepositoryUrl `pulumi:"url"`
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify *bool `pulumi:"verify"`
}

// The set of arguments for constructing a ElasticsearchSnapshotRepository resource.
type ElasticsearchSnapshotRepositoryArgs struct {
	// Support for using Azure Blob storage as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-azure.html
	Azure ElasticsearchSnapshotRepositoryAzurePtrInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSnapshotRepositoryElasticsearchConnectionPtrInput
	// Shared filesystem repository. Repositories of this type use a shared filesystem to store snapshots. This filesystem must be accessible to all master and data nodes in the cluster.
	Fs ElasticsearchSnapshotRepositoryFsPtrInput
	// Support for using the Google Cloud Storage service as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-gcs.html
	Gcs ElasticsearchSnapshotRepositoryGcsPtrInput
	// Support for using HDFS File System as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-hdfs.html
	Hdfs ElasticsearchSnapshotRepositoryHdfsPtrInput
	// Name of the snapshot repository to register or update.
	Name pulumi.StringPtrInput
	// Support for using AWS S3 as a repository for Snapshot/Restore. See: https://www.elastic.co/guide/en/elasticsearch/plugins/current/repository-s3-repository.html
	S3 ElasticsearchSnapshotRepositoryS3PtrInput
	// URL repository. Repositories of this type are read-only for the cluster. This means the cluster can retrieve or restore snapshots from the repository but cannot write or create snapshots in it.
	Url ElasticsearchSnapshotRepositoryUrlPtrInput
	// If true, the request verifies the repository is functional on all master and data nodes in the cluster.
	Verify pulumi.BoolPtrInput
}

func (ElasticsearchSnapshotRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSnapshotRepositoryArgs)(nil)).Elem()
}

type ElasticsearchSnapshotRepositoryInput interface {
	pulumi.Input

	ToElasticsearchSnapshotRepositoryOutput() ElasticsearchSnapshotRepositoryOutput
	ToElasticsearchSnapshotRepositoryOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryOutput
}

func (*ElasticsearchSnapshotRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSnapshotRepository)(nil)).Elem()
}

func (i *ElasticsearchSnapshotRepository) ToElasticsearchSnapshotRepositoryOutput() ElasticsearchSnapshotRepositoryOutput {
	return i.ToElasticsearchSnapshotRepositoryOutputWithContext(context.Background())
}

func (i *ElasticsearchSnapshotRepository) ToElasticsearchSnapshotRepositoryOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSnapshotRepositoryOutput)
}

// ElasticsearchSnapshotRepositoryArrayInput is an input type that accepts ElasticsearchSnapshotRepositoryArray and ElasticsearchSnapshotRepositoryArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSnapshotRepositoryArrayInput` via:
//
//          ElasticsearchSnapshotRepositoryArray{ ElasticsearchSnapshotRepositoryArgs{...} }
type ElasticsearchSnapshotRepositoryArrayInput interface {
	pulumi.Input

	ToElasticsearchSnapshotRepositoryArrayOutput() ElasticsearchSnapshotRepositoryArrayOutput
	ToElasticsearchSnapshotRepositoryArrayOutputWithContext(context.Context) ElasticsearchSnapshotRepositoryArrayOutput
}

type ElasticsearchSnapshotRepositoryArray []ElasticsearchSnapshotRepositoryInput

func (ElasticsearchSnapshotRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSnapshotRepository)(nil)).Elem()
}

func (i ElasticsearchSnapshotRepositoryArray) ToElasticsearchSnapshotRepositoryArrayOutput() ElasticsearchSnapshotRepositoryArrayOutput {
	return i.ToElasticsearchSnapshotRepositoryArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSnapshotRepositoryArray) ToElasticsearchSnapshotRepositoryArrayOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSnapshotRepositoryArrayOutput)
}

// ElasticsearchSnapshotRepositoryMapInput is an input type that accepts ElasticsearchSnapshotRepositoryMap and ElasticsearchSnapshotRepositoryMapOutput values.
// You can construct a concrete instance of `ElasticsearchSnapshotRepositoryMapInput` via:
//
//          ElasticsearchSnapshotRepositoryMap{ "key": ElasticsearchSnapshotRepositoryArgs{...} }
type ElasticsearchSnapshotRepositoryMapInput interface {
	pulumi.Input

	ToElasticsearchSnapshotRepositoryMapOutput() ElasticsearchSnapshotRepositoryMapOutput
	ToElasticsearchSnapshotRepositoryMapOutputWithContext(context.Context) ElasticsearchSnapshotRepositoryMapOutput
}

type ElasticsearchSnapshotRepositoryMap map[string]ElasticsearchSnapshotRepositoryInput

func (ElasticsearchSnapshotRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSnapshotRepository)(nil)).Elem()
}

func (i ElasticsearchSnapshotRepositoryMap) ToElasticsearchSnapshotRepositoryMapOutput() ElasticsearchSnapshotRepositoryMapOutput {
	return i.ToElasticsearchSnapshotRepositoryMapOutputWithContext(context.Background())
}

func (i ElasticsearchSnapshotRepositoryMap) ToElasticsearchSnapshotRepositoryMapOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSnapshotRepositoryMapOutput)
}

type ElasticsearchSnapshotRepositoryOutput struct{ *pulumi.OutputState }

func (ElasticsearchSnapshotRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSnapshotRepository)(nil)).Elem()
}

func (o ElasticsearchSnapshotRepositoryOutput) ToElasticsearchSnapshotRepositoryOutput() ElasticsearchSnapshotRepositoryOutput {
	return o
}

func (o ElasticsearchSnapshotRepositoryOutput) ToElasticsearchSnapshotRepositoryOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryOutput {
	return o
}

type ElasticsearchSnapshotRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSnapshotRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSnapshotRepository)(nil)).Elem()
}

func (o ElasticsearchSnapshotRepositoryArrayOutput) ToElasticsearchSnapshotRepositoryArrayOutput() ElasticsearchSnapshotRepositoryArrayOutput {
	return o
}

func (o ElasticsearchSnapshotRepositoryArrayOutput) ToElasticsearchSnapshotRepositoryArrayOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryArrayOutput {
	return o
}

func (o ElasticsearchSnapshotRepositoryArrayOutput) Index(i pulumi.IntInput) ElasticsearchSnapshotRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchSnapshotRepository {
		return vs[0].([]*ElasticsearchSnapshotRepository)[vs[1].(int)]
	}).(ElasticsearchSnapshotRepositoryOutput)
}

type ElasticsearchSnapshotRepositoryMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchSnapshotRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSnapshotRepository)(nil)).Elem()
}

func (o ElasticsearchSnapshotRepositoryMapOutput) ToElasticsearchSnapshotRepositoryMapOutput() ElasticsearchSnapshotRepositoryMapOutput {
	return o
}

func (o ElasticsearchSnapshotRepositoryMapOutput) ToElasticsearchSnapshotRepositoryMapOutputWithContext(ctx context.Context) ElasticsearchSnapshotRepositoryMapOutput {
	return o
}

func (o ElasticsearchSnapshotRepositoryMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchSnapshotRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchSnapshotRepository {
		return vs[0].(map[string]*ElasticsearchSnapshotRepository)[vs[1].(string)]
	}).(ElasticsearchSnapshotRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSnapshotRepositoryInput)(nil)).Elem(), &ElasticsearchSnapshotRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSnapshotRepositoryArrayInput)(nil)).Elem(), ElasticsearchSnapshotRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSnapshotRepositoryMapInput)(nil)).Elem(), ElasticsearchSnapshotRepositoryMap{})
	pulumi.RegisterOutputType(ElasticsearchSnapshotRepositoryOutput{})
	pulumi.RegisterOutputType(ElasticsearchSnapshotRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSnapshotRepositoryMapOutput{})
}
