// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds and updates roles in the native realm. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-role.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"version": 1,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		roleElasticsearchSecurityRole, err := elasticstack.NewElasticsearchSecurityRole(ctx, "roleElasticsearchSecurityRole", &elasticstack.ElasticsearchSecurityRoleArgs{
// 			Clusters: pulumi.StringArray{
// 				pulumi.String("all"),
// 			},
// 			Indices: ElasticsearchSecurityRoleIndexArray{
// 				&ElasticsearchSecurityRoleIndexArgs{
// 					Names: pulumi.StringArray{
// 						pulumi.String("index1"),
// 						pulumi.String("index2"),
// 					},
// 					Privileges: pulumi.StringArray{
// 						pulumi.String("all"),
// 					},
// 				},
// 			},
// 			Applications: ElasticsearchSecurityRoleApplicationArray{
// 				&ElasticsearchSecurityRoleApplicationArgs{
// 					Application: pulumi.String("myapp"),
// 					Privileges: pulumi.StringArray{
// 						pulumi.String("admin"),
// 						pulumi.String("read"),
// 					},
// 					Resources: pulumi.StringArray{
// 						pulumi.String("*"),
// 					},
// 				},
// 			},
// 			RunAs: pulumi.StringArray{
// 				pulumi.String("other_user"),
// 			},
// 			Metadata: pulumi.String(json0),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("role", roleElasticsearchSecurityRole)
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchSecurityRole:ElasticsearchSecurityRole elasticstack_elasticsearch_security_role <cluster_uuid>/<role name>
// ```
type ElasticsearchSecurityRole struct {
	pulumi.CustomResourceState

	// A list of application privilege entries.
	Applications ElasticsearchSecurityRoleApplicationArrayOutput `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters pulumi.StringArrayOutput `pulumi:"clusters"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSecurityRoleElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global pulumi.StringPtrOutput `pulumi:"global"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// A list of indices permissions entries.
	Indices ElasticsearchSecurityRoleIndexArrayOutput `pulumi:"indices"`
	// Optional meta-data.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The name of the role.
	Name pulumi.StringOutput `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayOutput `pulumi:"runAs"`
}

// NewElasticsearchSecurityRole registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchSecurityRole(ctx *pulumi.Context,
	name string, args *ElasticsearchSecurityRoleArgs, opts ...pulumi.ResourceOption) (*ElasticsearchSecurityRole, error) {
	if args == nil {
		args = &ElasticsearchSecurityRoleArgs{}
	}

	var resource ElasticsearchSecurityRole
	err := ctx.RegisterResource("elasticstack:index/elasticsearchSecurityRole:ElasticsearchSecurityRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchSecurityRole gets an existing ElasticsearchSecurityRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchSecurityRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchSecurityRoleState, opts ...pulumi.ResourceOption) (*ElasticsearchSecurityRole, error) {
	var resource ElasticsearchSecurityRole
	err := ctx.ReadResource("elasticstack:index/elasticsearchSecurityRole:ElasticsearchSecurityRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchSecurityRole resources.
type elasticsearchSecurityRoleState struct {
	// A list of application privilege entries.
	Applications []ElasticsearchSecurityRoleApplication `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters []string `pulumi:"clusters"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSecurityRoleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global *string `pulumi:"global"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// A list of indices permissions entries.
	Indices []ElasticsearchSecurityRoleIndex `pulumi:"indices"`
	// Optional meta-data.
	Metadata *string `pulumi:"metadata"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs []string `pulumi:"runAs"`
}

type ElasticsearchSecurityRoleState struct {
	// A list of application privilege entries.
	Applications ElasticsearchSecurityRoleApplicationArrayInput
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters pulumi.StringArrayInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSecurityRoleElasticsearchConnectionPtrInput
	// An object defining global privileges.
	Global pulumi.StringPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// A list of indices permissions entries.
	Indices ElasticsearchSecurityRoleIndexArrayInput
	// Optional meta-data.
	Metadata pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayInput
}

func (ElasticsearchSecurityRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSecurityRoleState)(nil)).Elem()
}

type elasticsearchSecurityRoleArgs struct {
	// A list of application privilege entries.
	Applications []ElasticsearchSecurityRoleApplication `pulumi:"applications"`
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters []string `pulumi:"clusters"`
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSecurityRoleElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// An object defining global privileges.
	Global *string `pulumi:"global"`
	// A list of indices permissions entries.
	Indices []ElasticsearchSecurityRoleIndex `pulumi:"indices"`
	// Optional meta-data.
	Metadata *string `pulumi:"metadata"`
	// The name of the role.
	Name *string `pulumi:"name"`
	// A list of users that the owners of this role can impersonate.
	RunAs []string `pulumi:"runAs"`
}

// The set of arguments for constructing a ElasticsearchSecurityRole resource.
type ElasticsearchSecurityRoleArgs struct {
	// A list of application privilege entries.
	Applications ElasticsearchSecurityRoleApplicationArrayInput
	// A list of cluster privileges. These privileges define the cluster level actions that users with this role are able to execute.
	Clusters pulumi.StringArrayInput
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSecurityRoleElasticsearchConnectionPtrInput
	// An object defining global privileges.
	Global pulumi.StringPtrInput
	// A list of indices permissions entries.
	Indices ElasticsearchSecurityRoleIndexArrayInput
	// Optional meta-data.
	Metadata pulumi.StringPtrInput
	// The name of the role.
	Name pulumi.StringPtrInput
	// A list of users that the owners of this role can impersonate.
	RunAs pulumi.StringArrayInput
}

func (ElasticsearchSecurityRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSecurityRoleArgs)(nil)).Elem()
}

type ElasticsearchSecurityRoleInput interface {
	pulumi.Input

	ToElasticsearchSecurityRoleOutput() ElasticsearchSecurityRoleOutput
	ToElasticsearchSecurityRoleOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleOutput
}

func (*ElasticsearchSecurityRole) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSecurityRole)(nil)).Elem()
}

func (i *ElasticsearchSecurityRole) ToElasticsearchSecurityRoleOutput() ElasticsearchSecurityRoleOutput {
	return i.ToElasticsearchSecurityRoleOutputWithContext(context.Background())
}

func (i *ElasticsearchSecurityRole) ToElasticsearchSecurityRoleOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSecurityRoleOutput)
}

// ElasticsearchSecurityRoleArrayInput is an input type that accepts ElasticsearchSecurityRoleArray and ElasticsearchSecurityRoleArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSecurityRoleArrayInput` via:
//
//          ElasticsearchSecurityRoleArray{ ElasticsearchSecurityRoleArgs{...} }
type ElasticsearchSecurityRoleArrayInput interface {
	pulumi.Input

	ToElasticsearchSecurityRoleArrayOutput() ElasticsearchSecurityRoleArrayOutput
	ToElasticsearchSecurityRoleArrayOutputWithContext(context.Context) ElasticsearchSecurityRoleArrayOutput
}

type ElasticsearchSecurityRoleArray []ElasticsearchSecurityRoleInput

func (ElasticsearchSecurityRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSecurityRole)(nil)).Elem()
}

func (i ElasticsearchSecurityRoleArray) ToElasticsearchSecurityRoleArrayOutput() ElasticsearchSecurityRoleArrayOutput {
	return i.ToElasticsearchSecurityRoleArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSecurityRoleArray) ToElasticsearchSecurityRoleArrayOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSecurityRoleArrayOutput)
}

// ElasticsearchSecurityRoleMapInput is an input type that accepts ElasticsearchSecurityRoleMap and ElasticsearchSecurityRoleMapOutput values.
// You can construct a concrete instance of `ElasticsearchSecurityRoleMapInput` via:
//
//          ElasticsearchSecurityRoleMap{ "key": ElasticsearchSecurityRoleArgs{...} }
type ElasticsearchSecurityRoleMapInput interface {
	pulumi.Input

	ToElasticsearchSecurityRoleMapOutput() ElasticsearchSecurityRoleMapOutput
	ToElasticsearchSecurityRoleMapOutputWithContext(context.Context) ElasticsearchSecurityRoleMapOutput
}

type ElasticsearchSecurityRoleMap map[string]ElasticsearchSecurityRoleInput

func (ElasticsearchSecurityRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSecurityRole)(nil)).Elem()
}

func (i ElasticsearchSecurityRoleMap) ToElasticsearchSecurityRoleMapOutput() ElasticsearchSecurityRoleMapOutput {
	return i.ToElasticsearchSecurityRoleMapOutputWithContext(context.Background())
}

func (i ElasticsearchSecurityRoleMap) ToElasticsearchSecurityRoleMapOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSecurityRoleMapOutput)
}

type ElasticsearchSecurityRoleOutput struct{ *pulumi.OutputState }

func (ElasticsearchSecurityRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSecurityRole)(nil)).Elem()
}

func (o ElasticsearchSecurityRoleOutput) ToElasticsearchSecurityRoleOutput() ElasticsearchSecurityRoleOutput {
	return o
}

func (o ElasticsearchSecurityRoleOutput) ToElasticsearchSecurityRoleOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleOutput {
	return o
}

type ElasticsearchSecurityRoleArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSecurityRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSecurityRole)(nil)).Elem()
}

func (o ElasticsearchSecurityRoleArrayOutput) ToElasticsearchSecurityRoleArrayOutput() ElasticsearchSecurityRoleArrayOutput {
	return o
}

func (o ElasticsearchSecurityRoleArrayOutput) ToElasticsearchSecurityRoleArrayOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleArrayOutput {
	return o
}

func (o ElasticsearchSecurityRoleArrayOutput) Index(i pulumi.IntInput) ElasticsearchSecurityRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchSecurityRole {
		return vs[0].([]*ElasticsearchSecurityRole)[vs[1].(int)]
	}).(ElasticsearchSecurityRoleOutput)
}

type ElasticsearchSecurityRoleMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchSecurityRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSecurityRole)(nil)).Elem()
}

func (o ElasticsearchSecurityRoleMapOutput) ToElasticsearchSecurityRoleMapOutput() ElasticsearchSecurityRoleMapOutput {
	return o
}

func (o ElasticsearchSecurityRoleMapOutput) ToElasticsearchSecurityRoleMapOutputWithContext(ctx context.Context) ElasticsearchSecurityRoleMapOutput {
	return o
}

func (o ElasticsearchSecurityRoleMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchSecurityRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchSecurityRole {
		return vs[0].(map[string]*ElasticsearchSecurityRole)[vs[1].(string)]
	}).(ElasticsearchSecurityRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSecurityRoleInput)(nil)).Elem(), &ElasticsearchSecurityRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSecurityRoleArrayInput)(nil)).Elem(), ElasticsearchSecurityRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSecurityRoleMapInput)(nil)).Elem(), ElasticsearchSecurityRoleMap{})
	pulumi.RegisterOutputType(ElasticsearchSecurityRoleOutput{})
	pulumi.RegisterOutputType(ElasticsearchSecurityRoleArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSecurityRoleMapOutput{})
}
