// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package elasticstack

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Adds and updates users in the native realm. These users are commonly referred to as native users. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-elasticstack/sdk/go/elasticstack"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		tmpJSON0, err := json.Marshal(map[string]interface{}{
// 			"env":    "testing",
// 			"open":   false,
// 			"number": 49,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err := elasticstack.NewElasticsearchSecurityUser(ctx, "user", &elasticstack.ElasticsearchSecurityUserArgs{
// 			Username:     pulumi.String("testuser"),
// 			PasswordHash: pulumi.String(fmt.Sprintf("%v%v%v%v%v%v", "$", "2a", "$", "10", "$", "rMZe6TdsUwBX/TA8vRDz0OLwKAZeCzXM4jT3tfCjpSTB8HoFuq8xO")),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("kibana_user"),
// 			},
// 			Metadata: pulumi.String(json0),
// 			ElasticsearchConnection: &ElasticsearchSecurityUserElasticsearchConnectionArgs{
// 				Endpoints: pulumi.StringArray{
// 					pulumi.String("http://localhost:9200"),
// 				},
// 				Username: pulumi.String("elastic"),
// 				Password: pulumi.String("changeme"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON1, err := json.Marshal(map[string]interface{}{
// 			"env":    "testing",
// 			"open":   false,
// 			"number": 49,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		json1 := string(tmpJSON1)
// 		_, err = elasticstack.NewElasticsearchSecurityUser(ctx, "dev", &elasticstack.ElasticsearchSecurityUserArgs{
// 			Username: pulumi.String("devuser"),
// 			Password: pulumi.String("1234567890"),
// 			Roles: pulumi.StringArray{
// 				pulumi.String("kibana_user"),
// 			},
// 			Metadata: pulumi.String(json1),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import elasticstack:index/elasticsearchSecurityUser:ElasticsearchSecurityUser user <cluster_uuid>/elastic
// ```
type ElasticsearchSecurityUser struct {
	pulumi.CustomResourceState

	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSecurityUserElasticsearchConnectionPtrOutput `pulumi:"elasticsearchConnection"`
	// The email of the user.
	Email pulumi.StringPtrOutput `pulumi:"email"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The full name of the user.
	FullName pulumi.StringPtrOutput `pulumi:"fullName"`
	// Internal identifier of the resource
	Id pulumi.StringOutput `pulumi:"id"`
	// Arbitrary metadata that you want to associate with the user.
	Metadata pulumi.StringOutput `pulumi:"metadata"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrOutput `pulumi:"passwordHash"`
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewElasticsearchSecurityUser registers a new resource with the given unique name, arguments, and options.
func NewElasticsearchSecurityUser(ctx *pulumi.Context,
	name string, args *ElasticsearchSecurityUserArgs, opts ...pulumi.ResourceOption) (*ElasticsearchSecurityUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource ElasticsearchSecurityUser
	err := ctx.RegisterResource("elasticstack:index/elasticsearchSecurityUser:ElasticsearchSecurityUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetElasticsearchSecurityUser gets an existing ElasticsearchSecurityUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetElasticsearchSecurityUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ElasticsearchSecurityUserState, opts ...pulumi.ResourceOption) (*ElasticsearchSecurityUser, error) {
	var resource ElasticsearchSecurityUser
	err := ctx.ReadResource("elasticstack:index/elasticsearchSecurityUser:ElasticsearchSecurityUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ElasticsearchSecurityUser resources.
type elasticsearchSecurityUserState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSecurityUserElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The email of the user.
	Email *string `pulumi:"email"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The full name of the user.
	FullName *string `pulumi:"fullName"`
	// Internal identifier of the resource
	Id *string `pulumi:"id"`
	// Arbitrary metadata that you want to associate with the user.
	Metadata *string `pulumi:"metadata"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password *string `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash *string `pulumi:"passwordHash"`
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles []string `pulumi:"roles"`
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username *string `pulumi:"username"`
}

type ElasticsearchSecurityUserState struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSecurityUserElasticsearchConnectionPtrInput
	// The email of the user.
	Email pulumi.StringPtrInput
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The full name of the user.
	FullName pulumi.StringPtrInput
	// Internal identifier of the resource
	Id pulumi.StringPtrInput
	// Arbitrary metadata that you want to associate with the user.
	Metadata pulumi.StringPtrInput
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrInput
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrInput
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles pulumi.StringArrayInput
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username pulumi.StringPtrInput
}

func (ElasticsearchSecurityUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSecurityUserState)(nil)).Elem()
}

type elasticsearchSecurityUserArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection *ElasticsearchSecurityUserElasticsearchConnection `pulumi:"elasticsearchConnection"`
	// The email of the user.
	Email *string `pulumi:"email"`
	// Specifies whether the user is enabled. The default value is true.
	Enabled *bool `pulumi:"enabled"`
	// The full name of the user.
	FullName *string `pulumi:"fullName"`
	// Arbitrary metadata that you want to associate with the user.
	Metadata *string `pulumi:"metadata"`
	// The user’s password. Passwords must be at least 6 characters long.
	Password *string `pulumi:"password"`
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash *string `pulumi:"passwordHash"`
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles []string `pulumi:"roles"`
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ElasticsearchSecurityUser resource.
type ElasticsearchSecurityUserArgs struct {
	// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
	ElasticsearchConnection ElasticsearchSecurityUserElasticsearchConnectionPtrInput
	// The email of the user.
	Email pulumi.StringPtrInput
	// Specifies whether the user is enabled. The default value is true.
	Enabled pulumi.BoolPtrInput
	// The full name of the user.
	FullName pulumi.StringPtrInput
	// Arbitrary metadata that you want to associate with the user.
	Metadata pulumi.StringPtrInput
	// The user’s password. Passwords must be at least 6 characters long.
	Password pulumi.StringPtrInput
	// A hash of the user’s password. This must be produced using the same hashing algorithm as has been configured for password storage (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html#hashing-settings).
	PasswordHash pulumi.StringPtrInput
	// A set of roles the user has. The roles determine the user’s access permissions. Default is [].
	Roles pulumi.StringArrayInput
	// An identifier for the user (see https://www.elastic.co/guide/en/elasticsearch/reference/current/security-api-put-user.html#security-api-put-user-path-params).
	Username pulumi.StringInput
}

func (ElasticsearchSecurityUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*elasticsearchSecurityUserArgs)(nil)).Elem()
}

type ElasticsearchSecurityUserInput interface {
	pulumi.Input

	ToElasticsearchSecurityUserOutput() ElasticsearchSecurityUserOutput
	ToElasticsearchSecurityUserOutputWithContext(ctx context.Context) ElasticsearchSecurityUserOutput
}

func (*ElasticsearchSecurityUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSecurityUser)(nil)).Elem()
}

func (i *ElasticsearchSecurityUser) ToElasticsearchSecurityUserOutput() ElasticsearchSecurityUserOutput {
	return i.ToElasticsearchSecurityUserOutputWithContext(context.Background())
}

func (i *ElasticsearchSecurityUser) ToElasticsearchSecurityUserOutputWithContext(ctx context.Context) ElasticsearchSecurityUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSecurityUserOutput)
}

// ElasticsearchSecurityUserArrayInput is an input type that accepts ElasticsearchSecurityUserArray and ElasticsearchSecurityUserArrayOutput values.
// You can construct a concrete instance of `ElasticsearchSecurityUserArrayInput` via:
//
//          ElasticsearchSecurityUserArray{ ElasticsearchSecurityUserArgs{...} }
type ElasticsearchSecurityUserArrayInput interface {
	pulumi.Input

	ToElasticsearchSecurityUserArrayOutput() ElasticsearchSecurityUserArrayOutput
	ToElasticsearchSecurityUserArrayOutputWithContext(context.Context) ElasticsearchSecurityUserArrayOutput
}

type ElasticsearchSecurityUserArray []ElasticsearchSecurityUserInput

func (ElasticsearchSecurityUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSecurityUser)(nil)).Elem()
}

func (i ElasticsearchSecurityUserArray) ToElasticsearchSecurityUserArrayOutput() ElasticsearchSecurityUserArrayOutput {
	return i.ToElasticsearchSecurityUserArrayOutputWithContext(context.Background())
}

func (i ElasticsearchSecurityUserArray) ToElasticsearchSecurityUserArrayOutputWithContext(ctx context.Context) ElasticsearchSecurityUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSecurityUserArrayOutput)
}

// ElasticsearchSecurityUserMapInput is an input type that accepts ElasticsearchSecurityUserMap and ElasticsearchSecurityUserMapOutput values.
// You can construct a concrete instance of `ElasticsearchSecurityUserMapInput` via:
//
//          ElasticsearchSecurityUserMap{ "key": ElasticsearchSecurityUserArgs{...} }
type ElasticsearchSecurityUserMapInput interface {
	pulumi.Input

	ToElasticsearchSecurityUserMapOutput() ElasticsearchSecurityUserMapOutput
	ToElasticsearchSecurityUserMapOutputWithContext(context.Context) ElasticsearchSecurityUserMapOutput
}

type ElasticsearchSecurityUserMap map[string]ElasticsearchSecurityUserInput

func (ElasticsearchSecurityUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSecurityUser)(nil)).Elem()
}

func (i ElasticsearchSecurityUserMap) ToElasticsearchSecurityUserMapOutput() ElasticsearchSecurityUserMapOutput {
	return i.ToElasticsearchSecurityUserMapOutputWithContext(context.Background())
}

func (i ElasticsearchSecurityUserMap) ToElasticsearchSecurityUserMapOutputWithContext(ctx context.Context) ElasticsearchSecurityUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ElasticsearchSecurityUserMapOutput)
}

type ElasticsearchSecurityUserOutput struct{ *pulumi.OutputState }

func (ElasticsearchSecurityUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ElasticsearchSecurityUser)(nil)).Elem()
}

func (o ElasticsearchSecurityUserOutput) ToElasticsearchSecurityUserOutput() ElasticsearchSecurityUserOutput {
	return o
}

func (o ElasticsearchSecurityUserOutput) ToElasticsearchSecurityUserOutputWithContext(ctx context.Context) ElasticsearchSecurityUserOutput {
	return o
}

type ElasticsearchSecurityUserArrayOutput struct{ *pulumi.OutputState }

func (ElasticsearchSecurityUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ElasticsearchSecurityUser)(nil)).Elem()
}

func (o ElasticsearchSecurityUserArrayOutput) ToElasticsearchSecurityUserArrayOutput() ElasticsearchSecurityUserArrayOutput {
	return o
}

func (o ElasticsearchSecurityUserArrayOutput) ToElasticsearchSecurityUserArrayOutputWithContext(ctx context.Context) ElasticsearchSecurityUserArrayOutput {
	return o
}

func (o ElasticsearchSecurityUserArrayOutput) Index(i pulumi.IntInput) ElasticsearchSecurityUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ElasticsearchSecurityUser {
		return vs[0].([]*ElasticsearchSecurityUser)[vs[1].(int)]
	}).(ElasticsearchSecurityUserOutput)
}

type ElasticsearchSecurityUserMapOutput struct{ *pulumi.OutputState }

func (ElasticsearchSecurityUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ElasticsearchSecurityUser)(nil)).Elem()
}

func (o ElasticsearchSecurityUserMapOutput) ToElasticsearchSecurityUserMapOutput() ElasticsearchSecurityUserMapOutput {
	return o
}

func (o ElasticsearchSecurityUserMapOutput) ToElasticsearchSecurityUserMapOutputWithContext(ctx context.Context) ElasticsearchSecurityUserMapOutput {
	return o
}

func (o ElasticsearchSecurityUserMapOutput) MapIndex(k pulumi.StringInput) ElasticsearchSecurityUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ElasticsearchSecurityUser {
		return vs[0].(map[string]*ElasticsearchSecurityUser)[vs[1].(string)]
	}).(ElasticsearchSecurityUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSecurityUserInput)(nil)).Elem(), &ElasticsearchSecurityUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSecurityUserArrayInput)(nil)).Elem(), ElasticsearchSecurityUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ElasticsearchSecurityUserMapInput)(nil)).Elem(), ElasticsearchSecurityUserMap{})
	pulumi.RegisterOutputType(ElasticsearchSecurityUserOutput{})
	pulumi.RegisterOutputType(ElasticsearchSecurityUserArrayOutput{})
	pulumi.RegisterOutputType(ElasticsearchSecurityUserMapOutput{})
}
