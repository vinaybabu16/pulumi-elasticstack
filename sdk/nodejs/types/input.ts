// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ElasticsearchClusterSettingsElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchClusterSettingsPersistent {
    /**
     * Defines the setting in the cluster.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ElasticsearchClusterSettingsPersistentSetting>[]>;
}

export interface ElasticsearchClusterSettingsPersistentSetting {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    valueLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchClusterSettingsTransient {
    /**
     * Defines the setting in the cluster.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ElasticsearchClusterSettingsTransientSetting>[]>;
}

export interface ElasticsearchClusterSettingsTransientSetting {
    name: pulumi.Input<string>;
    value?: pulumi.Input<string>;
    valueLists?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchComponentTemplateElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchComponentTemplateTemplate {
    /**
     * Alias to add.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.ElasticsearchComponentTemplateTemplateAlias>[]>;
    /**
     * Mapping for fields in the index.
     */
    mappings?: pulumi.Input<string>;
    /**
     * Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings
     */
    settings?: pulumi.Input<string>;
}

export interface ElasticsearchComponentTemplateTemplateAlias {
    filter?: pulumi.Input<string>;
    indexRouting?: pulumi.Input<string>;
    isHidden?: pulumi.Input<boolean>;
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Name of the component template to create.
     */
    name: pulumi.Input<string>;
    routing?: pulumi.Input<string>;
    searchRouting?: pulumi.Input<string>;
}

export interface ElasticsearchDataStreamElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchDataStreamIndex {
    indexName?: pulumi.Input<string>;
    indexUuid?: pulumi.Input<string>;
}

export interface ElasticsearchIndexAlias {
    /**
     * Query used to limit documents the alias can access.
     */
    filter?: pulumi.Input<string>;
    /**
     * Value used to route indexing operations to a specific shard. If specified, this overwrites the `routing` value for indexing operations.
     */
    indexRouting?: pulumi.Input<string>;
    /**
     * If true, the alias is hidden.
     */
    isHidden?: pulumi.Input<boolean>;
    /**
     * If true, the index is the write index for the alias.
     */
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Index alias name.
     */
    name: pulumi.Input<string>;
    /**
     * Value used to route indexing and search operations to a specific shard.
     */
    routing?: pulumi.Input<string>;
    /**
     * Value used to route search operations to a specific shard. If specified, this overwrites the routing value for search operations.
     */
    searchRouting?: pulumi.Input<string>;
}

export interface ElasticsearchIndexElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleCold {
    /**
     * Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
     */
    allocate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdAllocate>;
    /**
     * Freeze the index to minimize its memory footprint.
     */
    freeze?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdFreeze>;
    /**
     * Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include.*tier*preference" index setting.
     */
    migrate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdMigrate>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdReadonly>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdSearchableSnapshot>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    setPriority?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdSetPriority>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.ElasticsearchIndexLifecycleColdUnfollow>;
}

export interface ElasticsearchIndexLifecycleColdAllocate {
    exclude?: pulumi.Input<string>;
    include?: pulumi.Input<string>;
    numberOfReplicas?: pulumi.Input<number>;
    require?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleColdFreeze {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleColdMigrate {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleColdReadonly {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleColdSearchableSnapshot {
    forceMergeIndex?: pulumi.Input<boolean>;
    snapshotRepository: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleColdSetPriority {
    priority: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleColdUnfollow {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleDelete {
    /**
     * Permanently removes the index.
     */
    delete?: pulumi.Input<inputs.ElasticsearchIndexLifecycleDeleteDelete>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Waits for the specified SLM policy to be executed before removing the index. This ensures that a snapshot of the deleted index is available.
     */
    waitForSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleDeleteWaitForSnapshot>;
}

export interface ElasticsearchIndexLifecycleDeleteDelete {
    deleteSearchableSnapshot?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleDeleteWaitForSnapshot {
    policy: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleFrozen {
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleFrozenSearchableSnapshot>;
}

export interface ElasticsearchIndexLifecycleFrozenSearchableSnapshot {
    forceMergeIndex?: pulumi.Input<boolean>;
    snapshotRepository: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHot {
    /**
     * Force merges the index into the specified maximum number of segments. This action makes the index read-only.
     */
    forcemerge?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotForcemerge>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotReadonly>;
    /**
     * Rolls over a target to a new index when the existing index meets one or more of the rollover conditions.
     */
    rollover?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotRollover>;
    /**
     * Takes a snapshot of the managed index in the configured repository and mounts it as a searchable snapshot.
     */
    searchableSnapshot?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotSearchableSnapshot>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    setPriority?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotSetPriority>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    shrink?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotShrink>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.ElasticsearchIndexLifecycleHotUnfollow>;
}

export interface ElasticsearchIndexLifecycleHotForcemerge {
    indexCodec?: pulumi.Input<string>;
    maxNumSegments: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleHotReadonly {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleHotRollover {
    maxAge?: pulumi.Input<string>;
    maxDocs?: pulumi.Input<number>;
    maxPrimaryShardSize?: pulumi.Input<string>;
    maxSize?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHotSearchableSnapshot {
    forceMergeIndex?: pulumi.Input<boolean>;
    snapshotRepository: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleHotSetPriority {
    priority: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleHotShrink {
    maxPrimaryShardSize?: pulumi.Input<string>;
    numberOfShards?: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleHotUnfollow {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleWarm {
    /**
     * Updates the index settings to change which nodes are allowed to host the index shards and change the number of replicas.
     */
    allocate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmAllocate>;
    /**
     * Force merges the index into the specified maximum number of segments. This action makes the index read-only.
     */
    forcemerge?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmForcemerge>;
    /**
     * Moves the index to the data tier that corresponds to the current phase by updating the "index.routing.allocation.include.*tier*preference" index setting.
     */
    migrate?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmMigrate>;
    /**
     * ILM moves indices through the lifecycle according to their age. To control the timing of these transitions, you set a minimum age for each phase.
     */
    minAge?: pulumi.Input<string>;
    /**
     * Makes the index read-only.
     */
    readonly?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmReadonly>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    setPriority?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmSetPriority>;
    /**
     * Sets a source index to read-only and shrinks it into a new index with fewer primary shards.
     */
    shrink?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmShrink>;
    /**
     * Convert a follower index to a regular index. Performed automatically before a rollover, shrink, or searchable snapshot action.
     */
    unfollow?: pulumi.Input<inputs.ElasticsearchIndexLifecycleWarmUnfollow>;
}

export interface ElasticsearchIndexLifecycleWarmAllocate {
    exclude?: pulumi.Input<string>;
    include?: pulumi.Input<string>;
    numberOfReplicas?: pulumi.Input<number>;
    require?: pulumi.Input<string>;
}

export interface ElasticsearchIndexLifecycleWarmForcemerge {
    indexCodec?: pulumi.Input<string>;
    maxNumSegments: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmMigrate {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleWarmReadonly {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexLifecycleWarmSetPriority {
    priority: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmShrink {
    maxPrimaryShardSize?: pulumi.Input<string>;
    numberOfShards?: pulumi.Input<number>;
}

export interface ElasticsearchIndexLifecycleWarmUnfollow {
    enabled?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexSettings {
    /**
     * Defines the setting for the index.
     */
    settings: pulumi.Input<pulumi.Input<inputs.ElasticsearchIndexSettingsSetting>[]>;
}

export interface ElasticsearchIndexSettingsSetting {
    /**
     * Name of the index you wish to create.
     */
    name: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface ElasticsearchIndexTemplateDataStream {
    /**
     * If true, the data stream is hidden.
     */
    hidden?: pulumi.Input<boolean>;
}

export interface ElasticsearchIndexTemplateElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchIndexTemplateTemplate {
    /**
     * Alias to add.
     */
    aliases?: pulumi.Input<pulumi.Input<inputs.ElasticsearchIndexTemplateTemplateAlias>[]>;
    /**
     * Mapping for fields in the index.
     */
    mappings?: pulumi.Input<string>;
    /**
     * Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings
     */
    settings?: pulumi.Input<string>;
}

export interface ElasticsearchIndexTemplateTemplateAlias {
    filter?: pulumi.Input<string>;
    indexRouting?: pulumi.Input<string>;
    isHidden?: pulumi.Input<boolean>;
    isWriteIndex?: pulumi.Input<boolean>;
    /**
     * Name of the index template to create.
     */
    name: pulumi.Input<string>;
    routing?: pulumi.Input<string>;
    searchRouting?: pulumi.Input<string>;
}

export interface ElasticsearchIngestPipelineElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityRoleApplication {
    /**
     * The name of the application to which this entry applies.
     */
    application: pulumi.Input<string>;
    /**
     * A list of strings, where each element is the name of an application privilege or action.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A list resources to which the privileges are applied.
     */
    resources: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchSecurityRoleElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityRoleIndex {
    /**
     * The document fields that the owners of the role have read access to.
     */
    fieldSecurity?: pulumi.Input<inputs.ElasticsearchSecurityRoleIndexFieldSecurity>;
    /**
     * A list of indices (or index name patterns) to which the permissions in this entry apply.
     */
    names: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The index level privileges that the owners of the role have on the specified indices.
     */
    privileges: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A search query that defines the documents the owners of the role have read access to.
     */
    query?: pulumi.Input<string>;
}

export interface ElasticsearchSecurityRoleIndexFieldSecurity {
    excepts?: pulumi.Input<pulumi.Input<string>[]>;
    grants?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface ElasticsearchSecurityUserElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotLifecycleElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryAzure {
    /**
     * Specifies the path within the container to the repository data.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * Azure named client to use.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Container name. You must create the Azure container before creating the repository.
     */
    container: pulumi.Input<string>;
    /**
     * Location mode. `primaryOnly` or `secondaryOnly`. See: https://docs.microsoft.com/en-us/azure/storage/common/storage-redundancy
     */
    locationMode?: pulumi.Input<string>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface ElasticsearchSnapshotRepositoryElasticsearchConnection {
    /**
     * Path to a custom Certificate Authority certificate
     */
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Disable TLS certificate validation
     */
    insecure?: pulumi.Input<boolean>;
    /**
     * A password to use for API authentication to Elasticsearch.
     */
    password?: pulumi.Input<string>;
    /**
     * A username to use for API authentication to Elasticsearch.
     */
    username?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryFs {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Location of the shared filesystem used to store and retrieve snapshots.
     */
    location: pulumi.Input<string>;
    /**
     * Maximum number of snapshots the repository can contain.
     */
    maxNumberOfSnapshots?: pulumi.Input<number>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface ElasticsearchSnapshotRepositoryGcs {
    /**
     * Specifies the path within the bucket to the repository data. Defaults to the root of the bucket.
     */
    basePath?: pulumi.Input<string>;
    /**
     * The name of the bucket to be used for snapshots.
     */
    bucket: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * The name of the client to use to connect to Google Cloud Storage.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
}

export interface ElasticsearchSnapshotRepositoryHdfs {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Whether to load the default Hadoop configuration or not.
     */
    loadDefaults?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * The file path within the filesystem where data is stored/loaded.
     */
    path: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * The uri address for hdfs. ex: "hdfs://\n\n:\n\n/".
     */
    uri: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryS3 {
    /**
     * Specifies the path to the repository data within its bucket.
     */
    basePath?: pulumi.Input<string>;
    /**
     * Name of the S3 bucket to use for snapshots.
     */
    bucket: pulumi.Input<string>;
    /**
     * Minimum threshold below which the chunk is uploaded using a single request.
     */
    bufferSize?: pulumi.Input<string>;
    /**
     * The S3 repository supports all S3 canned ACLs.
     */
    cannedAcl?: pulumi.Input<string>;
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * The name of the S3 client to use to connect to S3.
     */
    client?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * When true, files are encrypted server-side using AES-256 algorithm.
     */
    serverSideEncryption?: pulumi.Input<boolean>;
    /**
     * Sets the S3 storage class for objects stored in the snapshot repository.
     */
    storageClass?: pulumi.Input<string>;
}

export interface ElasticsearchSnapshotRepositoryUrl {
    /**
     * Maximum size of files in snapshots.
     */
    chunkSize?: pulumi.Input<string>;
    /**
     * If true, metadata files, such as index mappings and settings, are compressed in snapshots.
     */
    compress?: pulumi.Input<boolean>;
    /**
     * Maximum number of retries for http and https URLs.
     */
    httpMaxRetries?: pulumi.Input<number>;
    /**
     * Maximum wait time for data transfers over a connection.
     */
    httpSocketTimeout?: pulumi.Input<string>;
    /**
     * Maximum number of snapshots the repository can contain.
     */
    maxNumberOfSnapshots?: pulumi.Input<number>;
    /**
     * Maximum snapshot restore rate per node.
     */
    maxRestoreBytesPerSec?: pulumi.Input<string>;
    /**
     * Maximum snapshot creation rate per node.
     */
    maxSnapshotBytesPerSec?: pulumi.Input<string>;
    /**
     * If true, the repository is read-only.
     */
    readonly?: pulumi.Input<boolean>;
    /**
     * URL location of the root of the shared filesystem repository.
     */
    url: pulumi.Input<string>;
}

export interface ProviderElasticsearch {
    caFile?: pulumi.Input<string>;
    endpoints?: pulumi.Input<pulumi.Input<string>[]>;
    insecure?: pulumi.Input<boolean>;
    password?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export namespace config {
}
