// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Helper data source to which can be used to create a processor to convert circle definitions of shapes to regular polygons which approximate them.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/ingest-circle-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const circle = elasticstack.ElasticsearchIngestProcessorCircle({
 *     field: "circle",
 *     errorDistance: 28.1,
 *     shapeType: "geo_shape",
 * });
 * const myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline("myIngestPipeline", {processors: [circle.then(circle => circle.json)]});
 * ```
 */
export function elasticsearchIngestProcessorCircle(args: ElasticsearchIngestProcessorCircleArgs, opts?: pulumi.InvokeOptions): Promise<ElasticsearchIngestProcessorCircleResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("elasticstack:index/elasticsearchIngestProcessorCircle:ElasticsearchIngestProcessorCircle", {
        "description": args.description,
        "errorDistance": args.errorDistance,
        "field": args.field,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "ignoreMissing": args.ignoreMissing,
        "onFailures": args.onFailures,
        "shapeType": args.shapeType,
        "tag": args.tag,
        "targetField": args.targetField,
    }, opts);
}

/**
 * A collection of arguments for invoking ElasticsearchIngestProcessorCircle.
 */
export interface ElasticsearchIngestProcessorCircleArgs {
    /**
     * Description of the processor.
     */
    description?: string;
    /**
     * The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
     */
    errorDistance: number;
    /**
     * The string-valued field to trim whitespace from.
     */
    field: string;
    /**
     * Conditionally execute the processor
     */
    if?: string;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: boolean;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    ignoreMissing?: boolean;
    /**
     * Handle failures for the processor.
     */
    onFailures?: string[];
    /**
     * Which field mapping type is to be used when processing the circle.
     */
    shapeType: string;
    /**
     * Identifier for the processor.
     */
    tag?: string;
    /**
     * The field to assign the converted value to, by default `field` is updated in-place
     */
    targetField?: string;
}

/**
 * A collection of values returned by ElasticsearchIngestProcessorCircle.
 */
export interface ElasticsearchIngestProcessorCircleResult {
    /**
     * Description of the processor.
     */
    readonly description?: string;
    /**
     * The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
     */
    readonly errorDistance: number;
    /**
     * The string-valued field to trim whitespace from.
     */
    readonly field: string;
    /**
     * Internal identifier of the resource
     */
    readonly id: string;
    /**
     * Conditionally execute the processor
     */
    readonly if?: string;
    /**
     * Ignore failures for the processor.
     */
    readonly ignoreFailure?: boolean;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    readonly ignoreMissing?: boolean;
    /**
     * JSON representation of this data source.
     */
    readonly json: string;
    /**
     * Handle failures for the processor.
     */
    readonly onFailures?: string[];
    /**
     * Which field mapping type is to be used when processing the circle.
     */
    readonly shapeType: string;
    /**
     * Identifier for the processor.
     */
    readonly tag?: string;
    /**
     * The field to assign the converted value to, by default `field` is updated in-place
     */
    readonly targetField?: string;
}

export function elasticsearchIngestProcessorCircleOutput(args: ElasticsearchIngestProcessorCircleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ElasticsearchIngestProcessorCircleResult> {
    return pulumi.output(args).apply(a => elasticsearchIngestProcessorCircle(a, opts))
}

/**
 * A collection of arguments for invoking ElasticsearchIngestProcessorCircle.
 */
export interface ElasticsearchIngestProcessorCircleOutputArgs {
    /**
     * Description of the processor.
     */
    description?: pulumi.Input<string>;
    /**
     * The difference between the resulting inscribed distance from center to side and the circle’s radius (measured in meters for `geoShape`, unit-less for `shape`)
     */
    errorDistance: pulumi.Input<number>;
    /**
     * The string-valued field to trim whitespace from.
     */
    field: pulumi.Input<string>;
    /**
     * Conditionally execute the processor
     */
    if?: pulumi.Input<string>;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: pulumi.Input<boolean>;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    ignoreMissing?: pulumi.Input<boolean>;
    /**
     * Handle failures for the processor.
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Which field mapping type is to be used when processing the circle.
     */
    shapeType: pulumi.Input<string>;
    /**
     * Identifier for the processor.
     */
    tag?: pulumi.Input<string>;
    /**
     * The field to assign the converted value to, by default `field` is updated in-place
     */
    targetField?: pulumi.Input<string>;
}
