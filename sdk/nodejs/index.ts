// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./elasticsearchClusterSettings";
export * from "./elasticsearchComponentTemplate";
export * from "./elasticsearchDataStream";
export * from "./elasticsearchIndex";
export * from "./elasticsearchIndexLifecycle";
export * from "./elasticsearchIndexTemplate";
export * from "./elasticsearchIngestPipeline";
export * from "./elasticsearchIngestProcessorAppend";
export * from "./elasticsearchIngestProcessorBytes";
export * from "./elasticsearchIngestProcessorCircle";
export * from "./elasticsearchIngestProcessorCommunityId";
export * from "./elasticsearchIngestProcessorConvert";
export * from "./elasticsearchIngestProcessorCsv";
export * from "./elasticsearchIngestProcessorDate";
export * from "./elasticsearchIngestProcessorDateIndexName";
export * from "./elasticsearchIngestProcessorDissect";
export * from "./elasticsearchIngestProcessorDotExpander";
export * from "./elasticsearchIngestProcessorDrop";
export * from "./elasticsearchIngestProcessorEnrich";
export * from "./elasticsearchIngestProcessorFail";
export * from "./elasticsearchIngestProcessorFingerprint";
export * from "./elasticsearchIngestProcessorForeach";
export * from "./elasticsearchIngestProcessorGeoip";
export * from "./elasticsearchIngestProcessorGrok";
export * from "./elasticsearchIngestProcessorGsub";
export * from "./elasticsearchIngestProcessorHtmlStrip";
export * from "./elasticsearchIngestProcessorJoin";
export * from "./elasticsearchIngestProcessorJson";
export * from "./elasticsearchIngestProcessorKv";
export * from "./elasticsearchIngestProcessorLowercase";
export * from "./elasticsearchIngestProcessorNetworkDirection";
export * from "./elasticsearchIngestProcessorPipeline";
export * from "./elasticsearchIngestProcessorRegisteredDomain";
export * from "./elasticsearchIngestProcessorRemove";
export * from "./elasticsearchIngestProcessorRename";
export * from "./elasticsearchIngestProcessorScript";
export * from "./elasticsearchIngestProcessorSet";
export * from "./elasticsearchIngestProcessorSetSecurityUser";
export * from "./elasticsearchIngestProcessorSort";
export * from "./elasticsearchIngestProcessorSplit";
export * from "./elasticsearchIngestProcessorTrim";
export * from "./elasticsearchIngestProcessorUppercase";
export * from "./elasticsearchIngestProcessorUriParts";
export * from "./elasticsearchIngestProcessorUrldecode";
export * from "./elasticsearchIngestProcessorUserAgent";
export * from "./elasticsearchSecurityRole";
export * from "./elasticsearchSecurityUser";
export * from "./elasticsearchSnapshotLifecycle";
export * from "./elasticsearchSnapshotRepository";
export * from "./provider";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ElasticsearchClusterSettings } from "./elasticsearchClusterSettings";
import { ElasticsearchComponentTemplate } from "./elasticsearchComponentTemplate";
import { ElasticsearchDataStream } from "./elasticsearchDataStream";
import { ElasticsearchIndex } from "./elasticsearchIndex";
import { ElasticsearchIndexLifecycle } from "./elasticsearchIndexLifecycle";
import { ElasticsearchIndexTemplate } from "./elasticsearchIndexTemplate";
import { ElasticsearchIngestPipeline } from "./elasticsearchIngestPipeline";
import { ElasticsearchSecurityRole } from "./elasticsearchSecurityRole";
import { ElasticsearchSecurityUser } from "./elasticsearchSecurityUser";
import { ElasticsearchSnapshotLifecycle } from "./elasticsearchSnapshotLifecycle";
import { ElasticsearchSnapshotRepository } from "./elasticsearchSnapshotRepository";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings":
                return new ElasticsearchClusterSettings(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchComponentTemplate:ElasticsearchComponentTemplate":
                return new ElasticsearchComponentTemplate(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchDataStream:ElasticsearchDataStream":
                return new ElasticsearchDataStream(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchIndex:ElasticsearchIndex":
                return new ElasticsearchIndex(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchIndexLifecycle:ElasticsearchIndexLifecycle":
                return new ElasticsearchIndexLifecycle(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate":
                return new ElasticsearchIndexTemplate(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchIngestPipeline:ElasticsearchIngestPipeline":
                return new ElasticsearchIngestPipeline(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchSecurityRole:ElasticsearchSecurityRole":
                return new ElasticsearchSecurityRole(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchSecurityUser:ElasticsearchSecurityUser":
                return new ElasticsearchSecurityUser(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchSnapshotLifecycle:ElasticsearchSnapshotLifecycle":
                return new ElasticsearchSnapshotLifecycle(name, <any>undefined, { urn })
            case "elasticstack:index/elasticsearchSnapshotRepository:ElasticsearchSnapshotRepository":
                return new ElasticsearchSnapshotRepository(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchClusterSettings", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchComponentTemplate", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchDataStream", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchIndex", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchIndexLifecycle", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchIndexTemplate", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchIngestPipeline", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchSecurityRole", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchSecurityUser", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchSnapshotLifecycle", _module)
pulumi.runtime.registerResourceModule("elasticstack", "index/elasticsearchSnapshotRepository", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("elasticstack", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:elasticstack") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
