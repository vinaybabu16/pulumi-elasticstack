// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Extracts the registered domain (also known as the effective top-level domain or eTLD), sub-domain, and top-level domain from a fully qualified domain name (FQDN). Uses the registered domains defined in the Mozilla Public Suffix List.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/registered-domain-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const domain = elasticstack.ElasticsearchIngestProcessorRegisteredDomain({
 *     field: "fqdn",
 *     targetField: "url",
 * });
 * const myIngestPipeline = new elasticstack.ElasticsearchIngestPipeline("myIngestPipeline", {processors: [domain.then(domain => domain.json)]});
 * ```
 */
export function elasticsearchIngestProcessorRegisteredDomain(args: ElasticsearchIngestProcessorRegisteredDomainArgs, opts?: pulumi.InvokeOptions): Promise<ElasticsearchIngestProcessorRegisteredDomainResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("elasticstack:index/elasticsearchIngestProcessorRegisteredDomain:ElasticsearchIngestProcessorRegisteredDomain", {
        "description": args.description,
        "field": args.field,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "ignoreMissing": args.ignoreMissing,
        "onFailures": args.onFailures,
        "tag": args.tag,
        "targetField": args.targetField,
    }, opts);
}

/**
 * A collection of arguments for invoking ElasticsearchIngestProcessorRegisteredDomain.
 */
export interface ElasticsearchIngestProcessorRegisteredDomainArgs {
    /**
     * Description of the processor.
     */
    description?: string;
    /**
     * Field containing the source FQDN.
     */
    field: string;
    /**
     * Conditionally execute the processor
     */
    if?: string;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: boolean;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    ignoreMissing?: boolean;
    /**
     * Handle failures for the processor.
     */
    onFailures?: string[];
    /**
     * Identifier for the processor.
     */
    tag?: string;
    /**
     * Object field containing extracted domain components. If an `<empty string>`, the processor adds components to the document’s root.
     */
    targetField?: string;
}

/**
 * A collection of values returned by ElasticsearchIngestProcessorRegisteredDomain.
 */
export interface ElasticsearchIngestProcessorRegisteredDomainResult {
    /**
     * Description of the processor.
     */
    readonly description?: string;
    /**
     * Field containing the source FQDN.
     */
    readonly field: string;
    /**
     * Internal identifier of the resource.
     */
    readonly id: string;
    /**
     * Conditionally execute the processor
     */
    readonly if?: string;
    /**
     * Ignore failures for the processor.
     */
    readonly ignoreFailure?: boolean;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    readonly ignoreMissing?: boolean;
    /**
     * JSON representation of this data source.
     */
    readonly json: string;
    /**
     * Handle failures for the processor.
     */
    readonly onFailures?: string[];
    /**
     * Identifier for the processor.
     */
    readonly tag?: string;
    /**
     * Object field containing extracted domain components. If an `<empty string>`, the processor adds components to the document’s root.
     */
    readonly targetField?: string;
}

export function elasticsearchIngestProcessorRegisteredDomainOutput(args: ElasticsearchIngestProcessorRegisteredDomainOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ElasticsearchIngestProcessorRegisteredDomainResult> {
    return pulumi.output(args).apply(a => elasticsearchIngestProcessorRegisteredDomain(a, opts))
}

/**
 * A collection of arguments for invoking ElasticsearchIngestProcessorRegisteredDomain.
 */
export interface ElasticsearchIngestProcessorRegisteredDomainOutputArgs {
    /**
     * Description of the processor.
     */
    description?: pulumi.Input<string>;
    /**
     * Field containing the source FQDN.
     */
    field: pulumi.Input<string>;
    /**
     * Conditionally execute the processor
     */
    if?: pulumi.Input<string>;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: pulumi.Input<boolean>;
    /**
     * If `true` and `field` does not exist or is `null`, the processor quietly exits without modifying the document.
     */
    ignoreMissing?: pulumi.Input<boolean>;
    /**
     * Handle failures for the processor.
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier for the processor.
     */
    tag?: pulumi.Input<string>;
    /**
     * Object field containing extracted domain components. If an `<empty string>`, the processor adds components to the document’s root.
     */
    targetField?: pulumi.Input<string>;
}
