// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Executes another pipeline.
 *
 * The name of the current pipeline can be accessed from the `_ingest.pipeline` ingest metadata key.
 *
 * See: https://www.elastic.co/guide/en/elasticsearch/reference/current/pipeline-processor.html
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as elasticstack from "@pulumi/elasticstack";
 *
 * const appendTags = elasticstack.ElasticsearchIngestProcessorAppend({
 *     field: "tags",
 *     values: [
 *         "production",
 *         "{{{app}}}",
 *         "{{{owner}}}",
 *     ],
 * });
 * const pipelineA = new elasticstack.ElasticsearchIngestPipeline("pipelineA", {processors: [appendTags.then(appendTags => appendTags.json)]});
 * const fingerprint = elasticstack.ElasticsearchIngestProcessorFingerprint({
 *     fields: ["owner"],
 * });
 * const pipeline = elasticstack.ElasticsearchIngestProcessorPipelineOutput({
 *     name: pipelineA.name,
 * });
 * const pipelineB = new elasticstack.ElasticsearchIngestPipeline("pipelineB", {processors: [
 *     pipeline.apply(pipeline => pipeline.json),
 *     fingerprint.then(fingerprint => fingerprint.json),
 * ]});
 * ```
 */
export function elasticsearchIngestProcessorPipeline(args: ElasticsearchIngestProcessorPipelineArgs, opts?: pulumi.InvokeOptions): Promise<ElasticsearchIngestProcessorPipelineResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("elasticstack:index/elasticsearchIngestProcessorPipeline:ElasticsearchIngestProcessorPipeline", {
        "description": args.description,
        "if": args.if,
        "ignoreFailure": args.ignoreFailure,
        "name": args.name,
        "onFailures": args.onFailures,
        "tag": args.tag,
    }, opts);
}

/**
 * A collection of arguments for invoking ElasticsearchIngestProcessorPipeline.
 */
export interface ElasticsearchIngestProcessorPipelineArgs {
    /**
     * Description of the processor.
     */
    description?: string;
    /**
     * Conditionally execute the processor
     */
    if?: string;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: boolean;
    /**
     * The name of the pipeline to execute.
     */
    name: string;
    /**
     * Handle failures for the processor.
     */
    onFailures?: string[];
    /**
     * Identifier for the processor.
     */
    tag?: string;
}

/**
 * A collection of values returned by ElasticsearchIngestProcessorPipeline.
 */
export interface ElasticsearchIngestProcessorPipelineResult {
    /**
     * Description of the processor.
     */
    readonly description?: string;
    /**
     * Internal identifier of the resource.
     */
    readonly id: string;
    /**
     * Conditionally execute the processor
     */
    readonly if?: string;
    /**
     * Ignore failures for the processor.
     */
    readonly ignoreFailure?: boolean;
    /**
     * JSON representation of this data source.
     */
    readonly json: string;
    /**
     * The name of the pipeline to execute.
     */
    readonly name: string;
    /**
     * Handle failures for the processor.
     */
    readonly onFailures?: string[];
    /**
     * Identifier for the processor.
     */
    readonly tag?: string;
}

export function elasticsearchIngestProcessorPipelineOutput(args: ElasticsearchIngestProcessorPipelineOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<ElasticsearchIngestProcessorPipelineResult> {
    return pulumi.output(args).apply(a => elasticsearchIngestProcessorPipeline(a, opts))
}

/**
 * A collection of arguments for invoking ElasticsearchIngestProcessorPipeline.
 */
export interface ElasticsearchIngestProcessorPipelineOutputArgs {
    /**
     * Description of the processor.
     */
    description?: pulumi.Input<string>;
    /**
     * Conditionally execute the processor
     */
    if?: pulumi.Input<string>;
    /**
     * Ignore failures for the processor.
     */
    ignoreFailure?: pulumi.Input<boolean>;
    /**
     * The name of the pipeline to execute.
     */
    name: pulumi.Input<string>;
    /**
     * Handle failures for the processor.
     */
    onFailures?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier for the processor.
     */
    tag?: pulumi.Input<string>;
}
