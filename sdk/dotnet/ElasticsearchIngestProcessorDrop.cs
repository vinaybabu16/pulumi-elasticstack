// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    public static class ElasticsearchIngestProcessorDrop
    {
        /// <summary>
        /// Drops the document without raising any errors. This is useful to prevent the document from getting indexed based on some condition.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/drop-processor.html
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var drop = Output.Create(Elasticstack.ElasticsearchIngestProcessorDrop.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorDropArgs
        ///         {
        ///             If = "ctx.network_name == 'Guest'",
        ///         }));
        ///         var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline("myIngestPipeline", new Elasticstack.ElasticsearchIngestPipelineArgs
        ///         {
        ///             Processors = 
        ///             {
        ///                 drop.Apply(drop =&gt; drop.Json),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<ElasticsearchIngestProcessorDropResult> InvokeAsync(ElasticsearchIngestProcessorDropArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<ElasticsearchIngestProcessorDropResult>("elasticstack:index/elasticsearchIngestProcessorDrop:ElasticsearchIngestProcessorDrop", args ?? new ElasticsearchIngestProcessorDropArgs(), options.WithDefaults());

        /// <summary>
        /// Drops the document without raising any errors. This is useful to prevent the document from getting indexed based on some condition.
        /// 
        /// See: https://www.elastic.co/guide/en/elasticsearch/reference/current/drop-processor.html
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Elasticstack = Pulumi.Elasticstack;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var drop = Output.Create(Elasticstack.ElasticsearchIngestProcessorDrop.InvokeAsync(new Elasticstack.ElasticsearchIngestProcessorDropArgs
        ///         {
        ///             If = "ctx.network_name == 'Guest'",
        ///         }));
        ///         var myIngestPipeline = new Elasticstack.ElasticsearchIngestPipeline("myIngestPipeline", new Elasticstack.ElasticsearchIngestPipelineArgs
        ///         {
        ///             Processors = 
        ///             {
        ///                 drop.Apply(drop =&gt; drop.Json),
        ///             },
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<ElasticsearchIngestProcessorDropResult> Invoke(ElasticsearchIngestProcessorDropInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<ElasticsearchIngestProcessorDropResult>("elasticstack:index/elasticsearchIngestProcessorDrop:ElasticsearchIngestProcessorDrop", args ?? new ElasticsearchIngestProcessorDropInvokeArgs(), options.WithDefaults());
    }


    public sealed class ElasticsearchIngestProcessorDropArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public string? Description { get; set; }

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public string? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public bool? IgnoreFailure { get; set; }

        [Input("onFailures")]
        private List<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public List<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new List<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public string? Tag { get; set; }

        public ElasticsearchIngestProcessorDropArgs()
        {
        }
    }

    public sealed class ElasticsearchIngestProcessorDropInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        [Input("if")]
        public Input<string>? If { get; set; }

        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        [Input("ignoreFailure")]
        public Input<bool>? IgnoreFailure { get; set; }

        [Input("onFailures")]
        private InputList<string>? _onFailures;

        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public InputList<string> OnFailures
        {
            get => _onFailures ?? (_onFailures = new InputList<string>());
            set => _onFailures = value;
        }

        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        [Input("tag")]
        public Input<string>? Tag { get; set; }

        public ElasticsearchIngestProcessorDropInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class ElasticsearchIngestProcessorDropResult
    {
        /// <summary>
        /// Description of the processor.
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Conditionally execute the processor
        /// </summary>
        public readonly string? If;
        /// <summary>
        /// Ignore failures for the processor.
        /// </summary>
        public readonly bool? IgnoreFailure;
        /// <summary>
        /// JSON representation of this data source.
        /// </summary>
        public readonly string Json;
        /// <summary>
        /// Handle failures for the processor.
        /// </summary>
        public readonly ImmutableArray<string> OnFailures;
        /// <summary>
        /// Identifier for the processor.
        /// </summary>
        public readonly string? Tag;

        [OutputConstructor]
        private ElasticsearchIngestProcessorDropResult(
            string? description,

            string id,

            string? @if,

            bool? ignoreFailure,

            string json,

            ImmutableArray<string> onFailures,

            string? tag)
        {
            Description = description;
            Id = id;
            If = @if;
            IgnoreFailure = ignoreFailure;
            Json = json;
            OnFailures = onFailures;
            Tag = tag;
        }
    }
}
