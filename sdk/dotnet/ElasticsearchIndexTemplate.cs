// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    /// <summary>
    /// Creates or updates an index template. Index templates define settings, mappings, and aliases that can be applied automatically to new indices. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-put-template.html
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Elasticstack = Pulumi.Elasticstack;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myTemplate = new Elasticstack.ElasticsearchIndexTemplate("myTemplate", new Elasticstack.ElasticsearchIndexTemplateArgs
    ///         {
    ///             Priority = 42,
    ///             IndexPatterns = 
    ///             {
    ///                 "logstash*",
    ///                 "filebeat*",
    ///             },
    ///             Template = new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateArgs
    ///             {
    ///                 Aliases = 
    ///                 {
    ///                     new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateAliasArgs
    ///                     {
    ///                         Name = "my_template_test",
    ///                     },
    ///                     new Elasticstack.Inputs.ElasticsearchIndexTemplateTemplateAliasArgs
    ///                     {
    ///                         Name = "another_test",
    ///                     },
    ///                 },
    ///                 Settings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     { "number_of_shards", "3" },
    ///                 }),
    ///             },
    ///         });
    ///         var myDataStream = new Elasticstack.ElasticsearchIndexTemplate("myDataStream", new Elasticstack.ElasticsearchIndexTemplateArgs
    ///         {
    ///             IndexPatterns = 
    ///             {
    ///                 "stream*",
    ///             },
    ///             DataStream = ,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate my_template &lt;cluster_uuid&gt;/&lt;template_name&gt;
    /// ```
    /// </summary>
    [ElasticstackResourceType("elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate")]
    public partial class ElasticsearchIndexTemplate : Pulumi.CustomResource
    {
        /// <summary>
        /// An ordered list of component template names.
        /// </summary>
        [Output("composedOfs")]
        public Output<ImmutableArray<string>> ComposedOfs { get; private set; } = null!;

        /// <summary>
        /// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
        /// </summary>
        [Output("dataStream")]
        public Output<Outputs.ElasticsearchIndexTemplateDataStream?> DataStream { get; private set; } = null!;

        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Output("elasticsearchConnection")]
        public Output<Outputs.ElasticsearchIndexTemplateElasticsearchConnection?> ElasticsearchConnection { get; private set; } = null!;

        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        [Output("id")]
        public Output<string> Id { get; private set; } = null!;

        /// <summary>
        /// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
        /// </summary>
        [Output("indexPatterns")]
        public Output<ImmutableArray<string>> IndexPatterns { get; private set; } = null!;

        /// <summary>
        /// Optional user metadata about the index template.
        /// </summary>
        [Output("metadata")]
        public Output<string?> Metadata { get; private set; } = null!;

        /// <summary>
        /// Name of the index template to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Priority to determine index template precedence when a new data stream or index is created.
        /// </summary>
        [Output("priority")]
        public Output<int?> Priority { get; private set; } = null!;

        /// <summary>
        /// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
        /// </summary>
        [Output("template")]
        public Output<Outputs.ElasticsearchIndexTemplateTemplate?> Template { get; private set; } = null!;

        /// <summary>
        /// Version number used to manage index templates externally.
        /// </summary>
        [Output("version")]
        public Output<int?> Version { get; private set; } = null!;


        /// <summary>
        /// Create a ElasticsearchIndexTemplate resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElasticsearchIndexTemplate(string name, ElasticsearchIndexTemplateArgs args, CustomResourceOptions? options = null)
            : base("elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate", name, args ?? new ElasticsearchIndexTemplateArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ElasticsearchIndexTemplate(string name, Input<string> id, ElasticsearchIndexTemplateState? state = null, CustomResourceOptions? options = null)
            : base("elasticstack:index/elasticsearchIndexTemplate:ElasticsearchIndexTemplate", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElasticsearchIndexTemplate resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElasticsearchIndexTemplate Get(string name, Input<string> id, ElasticsearchIndexTemplateState? state = null, CustomResourceOptions? options = null)
        {
            return new ElasticsearchIndexTemplate(name, id, state, options);
        }
    }

    public sealed class ElasticsearchIndexTemplateArgs : Pulumi.ResourceArgs
    {
        [Input("composedOfs")]
        private InputList<string>? _composedOfs;

        /// <summary>
        /// An ordered list of component template names.
        /// </summary>
        public InputList<string> ComposedOfs
        {
            get => _composedOfs ?? (_composedOfs = new InputList<string>());
            set => _composedOfs = value;
        }

        /// <summary>
        /// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
        /// </summary>
        [Input("dataStream")]
        public Input<Inputs.ElasticsearchIndexTemplateDataStreamArgs>? DataStream { get; set; }

        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.ElasticsearchIndexTemplateElasticsearchConnectionArgs>? ElasticsearchConnection { get; set; }

        [Input("indexPatterns", required: true)]
        private InputList<string>? _indexPatterns;

        /// <summary>
        /// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
        /// </summary>
        public InputList<string> IndexPatterns
        {
            get => _indexPatterns ?? (_indexPatterns = new InputList<string>());
            set => _indexPatterns = value;
        }

        /// <summary>
        /// Optional user metadata about the index template.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// Name of the index template to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority to determine index template precedence when a new data stream or index is created.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ElasticsearchIndexTemplateTemplateArgs>? Template { get; set; }

        /// <summary>
        /// Version number used to manage index templates externally.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ElasticsearchIndexTemplateArgs()
        {
        }
    }

    public sealed class ElasticsearchIndexTemplateState : Pulumi.ResourceArgs
    {
        [Input("composedOfs")]
        private InputList<string>? _composedOfs;

        /// <summary>
        /// An ordered list of component template names.
        /// </summary>
        public InputList<string> ComposedOfs
        {
            get => _composedOfs ?? (_composedOfs = new InputList<string>());
            set => _composedOfs = value;
        }

        /// <summary>
        /// If this object is included, the template is used to create data streams and their backing indices. Supports an empty object.
        /// </summary>
        [Input("dataStream")]
        public Input<Inputs.ElasticsearchIndexTemplateDataStreamGetArgs>? DataStream { get; set; }

        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.ElasticsearchIndexTemplateElasticsearchConnectionGetArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("indexPatterns")]
        private InputList<string>? _indexPatterns;

        /// <summary>
        /// Array of wildcard (*) expressions used to match the names of data streams and indices during creation.
        /// </summary>
        public InputList<string> IndexPatterns
        {
            get => _indexPatterns ?? (_indexPatterns = new InputList<string>());
            set => _indexPatterns = value;
        }

        /// <summary>
        /// Optional user metadata about the index template.
        /// </summary>
        [Input("metadata")]
        public Input<string>? Metadata { get; set; }

        /// <summary>
        /// Name of the index template to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Priority to determine index template precedence when a new data stream or index is created.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Template to be applied. It may optionally include an aliases, mappings, or settings configuration.
        /// </summary>
        [Input("template")]
        public Input<Inputs.ElasticsearchIndexTemplateTemplateGetArgs>? Template { get; set; }

        /// <summary>
        /// Version number used to manage index templates externally.
        /// </summary>
        [Input("version")]
        public Input<int>? Version { get; set; }

        public ElasticsearchIndexTemplateState()
        {
        }
    }
}
