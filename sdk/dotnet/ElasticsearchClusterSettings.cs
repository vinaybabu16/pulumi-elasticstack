// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    /// <summary>
    /// Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Elasticstack = Pulumi.Elasticstack;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myClusterSettings = new Elasticstack.ElasticsearchClusterSettings("myClusterSettings", new Elasticstack.ElasticsearchClusterSettingsArgs
    ///         {
    ///             Persistent = new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentArgs
    ///             {
    ///                 Settings = 
    ///                 {
    ///                     new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs
    ///                     {
    ///                         Name = "indices.lifecycle.poll_interval",
    ///                         Value = "10m",
    ///                     },
    ///                     new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs
    ///                     {
    ///                         Name = "indices.recovery.max_bytes_per_sec",
    ///                         Value = "50mb",
    ///                     },
    ///                     new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs
    ///                     {
    ///                         Name = "indices.breaker.accounting.limit",
    ///                         Value = "100%",
    ///                     },
    ///                     new Elasticstack.Inputs.ElasticsearchClusterSettingsPersistentSettingArgs
    ///                     {
    ///                         Name = "xpack.security.audit.logfile.events.include",
    ///                         ValueList = 
    ///                         {
    ///                             "ACCESS_DENIED",
    ///                             "ACCESS_GRANTED",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Transient = new Elasticstack.Inputs.ElasticsearchClusterSettingsTransientArgs
    ///             {
    ///                 Settings = 
    ///                 {
    ///                     new Elasticstack.Inputs.ElasticsearchClusterSettingsTransientSettingArgs
    ///                     {
    ///                         Name = "indices.breaker.accounting.limit",
    ///                         Value = "99%",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    [ElasticstackResourceType("elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings")]
    public partial class ElasticsearchClusterSettings : Pulumi.CustomResource
    {
        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Output("elasticsearchConnection")]
        public Output<Outputs.ElasticsearchClusterSettingsElasticsearchConnection?> ElasticsearchConnection { get; private set; } = null!;

        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        [Output("id")]
        public Output<string> Id { get; private set; } = null!;

        /// <summary>
        /// Settings will apply across restarts.
        /// </summary>
        [Output("persistent")]
        public Output<Outputs.ElasticsearchClusterSettingsPersistent?> Persistent { get; private set; } = null!;

        /// <summary>
        /// Settings do not survive a full cluster restart.
        /// </summary>
        [Output("transient")]
        public Output<Outputs.ElasticsearchClusterSettingsTransient?> Transient { get; private set; } = null!;


        /// <summary>
        /// Create a ElasticsearchClusterSettings resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElasticsearchClusterSettings(string name, ElasticsearchClusterSettingsArgs? args = null, CustomResourceOptions? options = null)
            : base("elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings", name, args ?? new ElasticsearchClusterSettingsArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ElasticsearchClusterSettings(string name, Input<string> id, ElasticsearchClusterSettingsState? state = null, CustomResourceOptions? options = null)
            : base("elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElasticsearchClusterSettings resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElasticsearchClusterSettings Get(string name, Input<string> id, ElasticsearchClusterSettingsState? state = null, CustomResourceOptions? options = null)
        {
            return new ElasticsearchClusterSettings(name, id, state, options);
        }
    }

    public sealed class ElasticsearchClusterSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.ElasticsearchClusterSettingsElasticsearchConnectionArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Settings will apply across restarts.
        /// </summary>
        [Input("persistent")]
        public Input<Inputs.ElasticsearchClusterSettingsPersistentArgs>? Persistent { get; set; }

        /// <summary>
        /// Settings do not survive a full cluster restart.
        /// </summary>
        [Input("transient")]
        public Input<Inputs.ElasticsearchClusterSettingsTransientArgs>? Transient { get; set; }

        public ElasticsearchClusterSettingsArgs()
        {
        }
    }

    public sealed class ElasticsearchClusterSettingsState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.ElasticsearchClusterSettingsElasticsearchConnectionGetArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Settings will apply across restarts.
        /// </summary>
        [Input("persistent")]
        public Input<Inputs.ElasticsearchClusterSettingsPersistentGetArgs>? Persistent { get; set; }

        /// <summary>
        /// Settings do not survive a full cluster restart.
        /// </summary>
        [Input("transient")]
        public Input<Inputs.ElasticsearchClusterSettingsTransientGetArgs>? Transient { get; set; }

        public ElasticsearchClusterSettingsState()
        {
        }
    }
}
