// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Elasticstack
{
    /// <summary>
    /// Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Elasticstack = Pulumi.Elasticstack;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myIndex = new Elasticstack.ElasticsearchIndex("myIndex", new Elasticstack.ElasticsearchIndexArgs
    ///         {
    ///             Aliases = 
    ///             {
    ///                 new Elasticstack.Inputs.ElasticsearchIndexAliasArgs
    ///                 {
    ///                     Name = "my_alias_1",
    ///                 },
    ///                 new Elasticstack.Inputs.ElasticsearchIndexAliasArgs
    ///                 {
    ///                     Name = "my_alias_2",
    ///                     Filter = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "term", new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "user.id", "developer" },
    ///                         } },
    ///                     }),
    ///                 },
    ///             },
    ///             Mappings = JsonSerializer.Serialize(new Dictionary&lt;string, object?&gt;
    ///             {
    ///                 { "properties", new Dictionary&lt;string, object?&gt;
    ///                 {
    ///                     { "field1", new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "type", "keyword" },
    ///                     } },
    ///                     { "field2", new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "type", "text" },
    ///                     } },
    ///                     { "field3", new Dictionary&lt;string, object?&gt;
    ///                     {
    ///                         { "properties", new Dictionary&lt;string, object?&gt;
    ///                         {
    ///                             { "inner_field1", new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 { "type", "text" },
    ///                                 { "index", false },
    ///                             } },
    ///                             { "inner_field2", new Dictionary&lt;string, object?&gt;
    ///                             {
    ///                                 { "type", "integer" },
    ///                                 { "index", false },
    ///                             } },
    ///                         } },
    ///                     } },
    ///                 } },
    ///             }),
    ///             Settings = new Elasticstack.Inputs.ElasticsearchIndexSettingsArgs
    ///             {
    ///                 Settings = 
    ///                 {
    ///                     new Elasticstack.Inputs.ElasticsearchIndexSettingsSettingArgs
    ///                     {
    ///                         Name = "index.number_of_shards",
    ///                         Value = "1",
    ///                     },
    ///                     new Elasticstack.Inputs.ElasticsearchIndexSettingsSettingArgs
    ///                     {
    ///                         Name = "index.number_of_replicas",
    ///                         Value = "2",
    ///                     },
    ///                     new Elasticstack.Inputs.ElasticsearchIndexSettingsSettingArgs
    ///                     {
    ///                         Name = "index.search.idle.after",
    ///                         Value = "20s",
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// You can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. # NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too # You can later adjust the index configuration to account for those imported settings
    /// 
    /// ```sh
    ///  $ pulumi import elasticstack:index/elasticsearchIndex:ElasticsearchIndex my_index &lt;cluster_uuid&gt;/&lt;index_name&gt;
    /// ```
    /// </summary>
    [ElasticstackResourceType("elasticstack:index/elasticsearchIndex:ElasticsearchIndex")]
    public partial class ElasticsearchIndex : Pulumi.CustomResource
    {
        /// <summary>
        /// Aliases for the index.
        /// </summary>
        [Output("aliases")]
        public Output<ImmutableArray<Outputs.ElasticsearchIndexAlias>> Aliases { get; private set; } = null!;

        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Output("elasticsearchConnection")]
        public Output<Outputs.ElasticsearchIndexElasticsearchConnection?> ElasticsearchConnection { get; private set; } = null!;

        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        [Output("id")]
        public Output<string> Id { get; private set; } = null!;

        /// <summary>
        /// Mapping for fields in the index.
        /// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
        /// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        /// </summary>
        [Output("mappings")]
        public Output<string?> Mappings { get; private set; } = null!;

        /// <summary>
        /// Name of the index you wish to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
        /// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        /// </summary>
        [Output("settings")]
        public Output<Outputs.ElasticsearchIndexSettings?> Settings { get; private set; } = null!;

        /// <summary>
        /// All raw settings fetched from the cluster.
        /// </summary>
        [Output("settingsRaw")]
        public Output<string> SettingsRaw { get; private set; } = null!;


        /// <summary>
        /// Create a ElasticsearchIndex resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ElasticsearchIndex(string name, ElasticsearchIndexArgs? args = null, CustomResourceOptions? options = null)
            : base("elasticstack:index/elasticsearchIndex:ElasticsearchIndex", name, args ?? new ElasticsearchIndexArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ElasticsearchIndex(string name, Input<string> id, ElasticsearchIndexState? state = null, CustomResourceOptions? options = null)
            : base("elasticstack:index/elasticsearchIndex:ElasticsearchIndex", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ElasticsearchIndex resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ElasticsearchIndex Get(string name, Input<string> id, ElasticsearchIndexState? state = null, CustomResourceOptions? options = null)
        {
            return new ElasticsearchIndex(name, id, state, options);
        }
    }

    public sealed class ElasticsearchIndexArgs : Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<Inputs.ElasticsearchIndexAliasArgs>? _aliases;

        /// <summary>
        /// Aliases for the index.
        /// </summary>
        public InputList<Inputs.ElasticsearchIndexAliasArgs> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<Inputs.ElasticsearchIndexAliasArgs>());
            set => _aliases = value;
        }

        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.ElasticsearchIndexElasticsearchConnectionArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Mapping for fields in the index.
        /// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
        /// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        /// </summary>
        [Input("mappings")]
        public Input<string>? Mappings { get; set; }

        /// <summary>
        /// Name of the index you wish to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
        /// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        /// </summary>
        [Input("settings")]
        public Input<Inputs.ElasticsearchIndexSettingsArgs>? Settings { get; set; }

        public ElasticsearchIndexArgs()
        {
        }
    }

    public sealed class ElasticsearchIndexState : Pulumi.ResourceArgs
    {
        [Input("aliases")]
        private InputList<Inputs.ElasticsearchIndexAliasGetArgs>? _aliases;

        /// <summary>
        /// Aliases for the index.
        /// </summary>
        public InputList<Inputs.ElasticsearchIndexAliasGetArgs> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<Inputs.ElasticsearchIndexAliasGetArgs>());
            set => _aliases = value;
        }

        /// <summary>
        /// Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        /// </summary>
        [Input("elasticsearchConnection")]
        public Input<Inputs.ElasticsearchIndexElasticsearchConnectionGetArgs>? ElasticsearchConnection { get; set; }

        /// <summary>
        /// Internal identifier of the resource
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// Mapping for fields in the index.
        /// If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
        /// **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        /// </summary>
        [Input("mappings")]
        public Input<string>? Mappings { get; set; }

        /// <summary>
        /// Name of the index you wish to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
        /// **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        /// </summary>
        [Input("settings")]
        public Input<Inputs.ElasticsearchIndexSettingsGetArgs>? Settings { get; set; }

        /// <summary>
        /// All raw settings fetched from the cluster.
        /// </summary>
        [Input("settingsRaw")]
        public Input<string>? SettingsRaw { get; set; }

        public ElasticsearchIndexState()
        {
        }
    }
}
