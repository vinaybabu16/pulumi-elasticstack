# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ElasticsearchClusterSettingsArgs', 'ElasticsearchClusterSettings']

@pulumi.input_type
class ElasticsearchClusterSettingsArgs:
    def __init__(__self__, *,
                 elasticsearch_connection: Optional[pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs']] = None,
                 persistent: Optional[pulumi.Input['ElasticsearchClusterSettingsPersistentArgs']] = None,
                 transient: Optional[pulumi.Input['ElasticsearchClusterSettingsTransientArgs']] = None):
        """
        The set of arguments for constructing a ElasticsearchClusterSettings resource.
        :param pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs'] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input['ElasticsearchClusterSettingsPersistentArgs'] persistent: Settings will apply across restarts.
        :param pulumi.Input['ElasticsearchClusterSettingsTransientArgs'] transient: Settings do not survive a full cluster restart.
        """
        if elasticsearch_connection is not None:
            pulumi.set(__self__, "elasticsearch_connection", elasticsearch_connection)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)

    @property
    @pulumi.getter(name="elasticsearchConnection")
    def elasticsearch_connection(self) -> Optional[pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]:
        """
        Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        """
        return pulumi.get(self, "elasticsearch_connection")

    @elasticsearch_connection.setter
    def elasticsearch_connection(self, value: Optional[pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]):
        pulumi.set(self, "elasticsearch_connection", value)

    @property
    @pulumi.getter
    def persistent(self) -> Optional[pulumi.Input['ElasticsearchClusterSettingsPersistentArgs']]:
        """
        Settings will apply across restarts.
        """
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: Optional[pulumi.Input['ElasticsearchClusterSettingsPersistentArgs']]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input['ElasticsearchClusterSettingsTransientArgs']]:
        """
        Settings do not survive a full cluster restart.
        """
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input['ElasticsearchClusterSettingsTransientArgs']]):
        pulumi.set(self, "transient", value)


@pulumi.input_type
class _ElasticsearchClusterSettingsState:
    def __init__(__self__, *,
                 elasticsearch_connection: Optional[pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 persistent: Optional[pulumi.Input['ElasticsearchClusterSettingsPersistentArgs']] = None,
                 transient: Optional[pulumi.Input['ElasticsearchClusterSettingsTransientArgs']] = None):
        """
        Input properties used for looking up and filtering ElasticsearchClusterSettings resources.
        :param pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs'] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[str] id: Internal identifier of the resource
        :param pulumi.Input['ElasticsearchClusterSettingsPersistentArgs'] persistent: Settings will apply across restarts.
        :param pulumi.Input['ElasticsearchClusterSettingsTransientArgs'] transient: Settings do not survive a full cluster restart.
        """
        if elasticsearch_connection is not None:
            pulumi.set(__self__, "elasticsearch_connection", elasticsearch_connection)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if persistent is not None:
            pulumi.set(__self__, "persistent", persistent)
        if transient is not None:
            pulumi.set(__self__, "transient", transient)

    @property
    @pulumi.getter(name="elasticsearchConnection")
    def elasticsearch_connection(self) -> Optional[pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]:
        """
        Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        """
        return pulumi.get(self, "elasticsearch_connection")

    @elasticsearch_connection.setter
    def elasticsearch_connection(self, value: Optional[pulumi.Input['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]):
        pulumi.set(self, "elasticsearch_connection", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Internal identifier of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def persistent(self) -> Optional[pulumi.Input['ElasticsearchClusterSettingsPersistentArgs']]:
        """
        Settings will apply across restarts.
        """
        return pulumi.get(self, "persistent")

    @persistent.setter
    def persistent(self, value: Optional[pulumi.Input['ElasticsearchClusterSettingsPersistentArgs']]):
        pulumi.set(self, "persistent", value)

    @property
    @pulumi.getter
    def transient(self) -> Optional[pulumi.Input['ElasticsearchClusterSettingsTransientArgs']]:
        """
        Settings do not survive a full cluster restart.
        """
        return pulumi.get(self, "transient")

    @transient.setter
    def transient(self, value: Optional[pulumi.Input['ElasticsearchClusterSettingsTransientArgs']]):
        pulumi.set(self, "transient", value)


class ElasticsearchClusterSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 elasticsearch_connection: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]] = None,
                 persistent: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsPersistentArgs']]] = None,
                 transient: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsTransientArgs']]] = None,
                 __props__=None):
        """
        Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html

        ## Example Usage

        ```python
        import pulumi
        import pulumi_elasticstack as elasticstack

        my_cluster_settings = elasticstack.ElasticsearchClusterSettings("myClusterSettings",
            persistent=elasticstack.ElasticsearchClusterSettingsPersistentArgs(
                settings=[
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="indices.lifecycle.poll_interval",
                        value="10m",
                    ),
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="indices.recovery.max_bytes_per_sec",
                        value="50mb",
                    ),
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="indices.breaker.accounting.limit",
                        value="100%",
                    ),
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="xpack.security.audit.logfile.events.include",
                        value_list=[
                            "ACCESS_DENIED",
                            "ACCESS_GRANTED",
                        ],
                    ),
                ],
            ),
            transient=elasticstack.ElasticsearchClusterSettingsTransientArgs(
                settings=[elasticstack.ElasticsearchClusterSettingsTransientSettingArgs(
                    name="indices.breaker.accounting.limit",
                    value="99%",
                )],
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsElasticsearchConnectionArgs']] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsPersistentArgs']] persistent: Settings will apply across restarts.
        :param pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsTransientArgs']] transient: Settings do not survive a full cluster restart.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ElasticsearchClusterSettingsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Updates cluster-wide settings. If the Elasticsearch security features are enabled, you must have the manage cluster privilege to use this API. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/cluster-update-settings.html

        ## Example Usage

        ```python
        import pulumi
        import pulumi_elasticstack as elasticstack

        my_cluster_settings = elasticstack.ElasticsearchClusterSettings("myClusterSettings",
            persistent=elasticstack.ElasticsearchClusterSettingsPersistentArgs(
                settings=[
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="indices.lifecycle.poll_interval",
                        value="10m",
                    ),
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="indices.recovery.max_bytes_per_sec",
                        value="50mb",
                    ),
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="indices.breaker.accounting.limit",
                        value="100%",
                    ),
                    elasticstack.ElasticsearchClusterSettingsPersistentSettingArgs(
                        name="xpack.security.audit.logfile.events.include",
                        value_list=[
                            "ACCESS_DENIED",
                            "ACCESS_GRANTED",
                        ],
                    ),
                ],
            ),
            transient=elasticstack.ElasticsearchClusterSettingsTransientArgs(
                settings=[elasticstack.ElasticsearchClusterSettingsTransientSettingArgs(
                    name="indices.breaker.accounting.limit",
                    value="99%",
                )],
            ))
        ```

        :param str resource_name: The name of the resource.
        :param ElasticsearchClusterSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ElasticsearchClusterSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 elasticsearch_connection: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]] = None,
                 persistent: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsPersistentArgs']]] = None,
                 transient: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsTransientArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ElasticsearchClusterSettingsArgs.__new__(ElasticsearchClusterSettingsArgs)

            __props__.__dict__["elasticsearch_connection"] = elasticsearch_connection
            __props__.__dict__["persistent"] = persistent
            __props__.__dict__["transient"] = transient
            __props__.__dict__["id"] = None
        super(ElasticsearchClusterSettings, __self__).__init__(
            'elasticstack:index/elasticsearchClusterSettings:ElasticsearchClusterSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            elasticsearch_connection: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsElasticsearchConnectionArgs']]] = None,
            id: Optional[pulumi.Input[str]] = None,
            persistent: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsPersistentArgs']]] = None,
            transient: Optional[pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsTransientArgs']]] = None) -> 'ElasticsearchClusterSettings':
        """
        Get an existing ElasticsearchClusterSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsElasticsearchConnectionArgs']] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[str] id: Internal identifier of the resource
        :param pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsPersistentArgs']] persistent: Settings will apply across restarts.
        :param pulumi.Input[pulumi.InputType['ElasticsearchClusterSettingsTransientArgs']] transient: Settings do not survive a full cluster restart.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ElasticsearchClusterSettingsState.__new__(_ElasticsearchClusterSettingsState)

        __props__.__dict__["elasticsearch_connection"] = elasticsearch_connection
        __props__.__dict__["id"] = id
        __props__.__dict__["persistent"] = persistent
        __props__.__dict__["transient"] = transient
        return ElasticsearchClusterSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="elasticsearchConnection")
    def elasticsearch_connection(self) -> pulumi.Output[Optional['outputs.ElasticsearchClusterSettingsElasticsearchConnection']]:
        """
        Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        """
        return pulumi.get(self, "elasticsearch_connection")

    @property
    @pulumi.getter
    def id(self) -> pulumi.Output[str]:
        """
        Internal identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def persistent(self) -> pulumi.Output[Optional['outputs.ElasticsearchClusterSettingsPersistent']]:
        """
        Settings will apply across restarts.
        """
        return pulumi.get(self, "persistent")

    @property
    @pulumi.getter
    def transient(self) -> pulumi.Output[Optional['outputs.ElasticsearchClusterSettingsTransient']]:
        """
        Settings do not survive a full cluster restart.
        """
        return pulumi.get(self, "transient")

