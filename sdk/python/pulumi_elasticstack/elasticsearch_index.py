# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ElasticsearchIndexArgs', 'ElasticsearchIndex']

@pulumi.input_type
class ElasticsearchIndexArgs:
    def __init__(__self__, *,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]]] = None,
                 elasticsearch_connection: Optional[pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs']] = None,
                 mappings: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['ElasticsearchIndexSettingsArgs']] = None):
        """
        The set of arguments for constructing a ElasticsearchIndex resource.
        :param pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]] aliases: Aliases for the index.
        :param pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs'] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[str] mappings: Mapping for fields in the index.
               If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
               **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        :param pulumi.Input[str] name: Name of the index you wish to create.
        :param pulumi.Input['ElasticsearchIndexSettingsArgs'] settings: Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
               **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        """
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if elasticsearch_connection is not None:
            pulumi.set(__self__, "elasticsearch_connection", elasticsearch_connection)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]]]:
        """
        Aliases for the index.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter(name="elasticsearchConnection")
    def elasticsearch_connection(self) -> Optional[pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs']]:
        """
        Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        """
        return pulumi.get(self, "elasticsearch_connection")

    @elasticsearch_connection.setter
    def elasticsearch_connection(self, value: Optional[pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs']]):
        pulumi.set(self, "elasticsearch_connection", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[str]]:
        """
        Mapping for fields in the index.
        If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
        **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the index you wish to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['ElasticsearchIndexSettingsArgs']]:
        """
        Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
        **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['ElasticsearchIndexSettingsArgs']]):
        pulumi.set(self, "settings", value)


@pulumi.input_type
class _ElasticsearchIndexState:
    def __init__(__self__, *,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]]] = None,
                 elasticsearch_connection: Optional[pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs']] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 mappings: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input['ElasticsearchIndexSettingsArgs']] = None,
                 settings_raw: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ElasticsearchIndex resources.
        :param pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]] aliases: Aliases for the index.
        :param pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs'] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[str] id: Internal identifier of the resource
        :param pulumi.Input[str] mappings: Mapping for fields in the index.
               If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
               **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        :param pulumi.Input[str] name: Name of the index you wish to create.
        :param pulumi.Input['ElasticsearchIndexSettingsArgs'] settings: Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
               **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        :param pulumi.Input[str] settings_raw: All raw settings fetched from the cluster.
        """
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if elasticsearch_connection is not None:
            pulumi.set(__self__, "elasticsearch_connection", elasticsearch_connection)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if settings_raw is not None:
            pulumi.set(__self__, "settings_raw", settings_raw)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]]]:
        """
        Aliases for the index.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ElasticsearchIndexAliasArgs']]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter(name="elasticsearchConnection")
    def elasticsearch_connection(self) -> Optional[pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs']]:
        """
        Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        """
        return pulumi.get(self, "elasticsearch_connection")

    @elasticsearch_connection.setter
    def elasticsearch_connection(self, value: Optional[pulumi.Input['ElasticsearchIndexElasticsearchConnectionArgs']]):
        pulumi.set(self, "elasticsearch_connection", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        """
        Internal identifier of the resource
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def mappings(self) -> Optional[pulumi.Input[str]]:
        """
        Mapping for fields in the index.
        If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
        **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        """
        return pulumi.get(self, "mappings")

    @mappings.setter
    def mappings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mappings", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the index you wish to create.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def settings(self) -> Optional[pulumi.Input['ElasticsearchIndexSettingsArgs']]:
        """
        Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
        **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        """
        return pulumi.get(self, "settings")

    @settings.setter
    def settings(self, value: Optional[pulumi.Input['ElasticsearchIndexSettingsArgs']]):
        pulumi.set(self, "settings", value)

    @property
    @pulumi.getter(name="settingsRaw")
    def settings_raw(self) -> Optional[pulumi.Input[str]]:
        """
        All raw settings fetched from the cluster.
        """
        return pulumi.get(self, "settings_raw")

    @settings_raw.setter
    def settings_raw(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "settings_raw", value)


class ElasticsearchIndex(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElasticsearchIndexAliasArgs']]]]] = None,
                 elasticsearch_connection: Optional[pulumi.Input[pulumi.InputType['ElasticsearchIndexElasticsearchConnectionArgs']]] = None,
                 mappings: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[pulumi.InputType['ElasticsearchIndexSettingsArgs']]] = None,
                 __props__=None):
        """
        Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_elasticstack as elasticstack

        my_index = elasticstack.ElasticsearchIndex("myIndex",
            aliases=[
                elasticstack.ElasticsearchIndexAliasArgs(
                    name="my_alias_1",
                ),
                elasticstack.ElasticsearchIndexAliasArgs(
                    name="my_alias_2",
                    filter=json.dumps({
                        "term": {
                            "user.id": "developer",
                        },
                    }),
                ),
            ],
            mappings=json.dumps({
                "properties": {
                    "field1": {
                        "type": "keyword",
                    },
                    "field2": {
                        "type": "text",
                    },
                    "field3": {
                        "properties": {
                            "inner_field1": {
                                "type": "text",
                                "index": False,
                            },
                            "inner_field2": {
                                "type": "integer",
                                "index": False,
                            },
                        },
                    },
                },
            }),
            settings=elasticstack.ElasticsearchIndexSettingsArgs(
                settings=[
                    elasticstack.ElasticsearchIndexSettingsSettingArgs(
                        name="index.number_of_shards",
                        value="1",
                    ),
                    elasticstack.ElasticsearchIndexSettingsSettingArgs(
                        name="index.number_of_replicas",
                        value="2",
                    ),
                    elasticstack.ElasticsearchIndexSettingsSettingArgs(
                        name="index.search.idle.after",
                        value="20s",
                    ),
                ],
            ))
        ```

        ## Import

        You can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. # NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too # You can later adjust the index configuration to account for those imported settings

        ```sh
         $ pulumi import elasticstack:index/elasticsearchIndex:ElasticsearchIndex my_index <cluster_uuid>/<index_name>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElasticsearchIndexAliasArgs']]]] aliases: Aliases for the index.
        :param pulumi.Input[pulumi.InputType['ElasticsearchIndexElasticsearchConnectionArgs']] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[str] mappings: Mapping for fields in the index.
               If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
               **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        :param pulumi.Input[str] name: Name of the index you wish to create.
        :param pulumi.Input[pulumi.InputType['ElasticsearchIndexSettingsArgs']] settings: Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
               **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ElasticsearchIndexArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Creates or updates an index. This resource can define settings, mappings and aliases. See: https://www.elastic.co/guide/en/elasticsearch/reference/current/indices-create-index.html

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_elasticstack as elasticstack

        my_index = elasticstack.ElasticsearchIndex("myIndex",
            aliases=[
                elasticstack.ElasticsearchIndexAliasArgs(
                    name="my_alias_1",
                ),
                elasticstack.ElasticsearchIndexAliasArgs(
                    name="my_alias_2",
                    filter=json.dumps({
                        "term": {
                            "user.id": "developer",
                        },
                    }),
                ),
            ],
            mappings=json.dumps({
                "properties": {
                    "field1": {
                        "type": "keyword",
                    },
                    "field2": {
                        "type": "text",
                    },
                    "field3": {
                        "properties": {
                            "inner_field1": {
                                "type": "text",
                                "index": False,
                            },
                            "inner_field2": {
                                "type": "integer",
                                "index": False,
                            },
                        },
                    },
                },
            }),
            settings=elasticstack.ElasticsearchIndexSettingsArgs(
                settings=[
                    elasticstack.ElasticsearchIndexSettingsSettingArgs(
                        name="index.number_of_shards",
                        value="1",
                    ),
                    elasticstack.ElasticsearchIndexSettingsSettingArgs(
                        name="index.number_of_replicas",
                        value="2",
                    ),
                    elasticstack.ElasticsearchIndexSettingsSettingArgs(
                        name="index.search.idle.after",
                        value="20s",
                    ),
                ],
            ))
        ```

        ## Import

        You can later adjust the index configuration to account for those imported settings. Some of the default settings, which could be imported are`index.number_of_replicas`, `index.number_of_shards` and `index.routing.allocation.include._tier_preference`. # NOTEwhile importing index resource, keep in mind, that some of the default index settings will be imported into the TF state too # You can later adjust the index configuration to account for those imported settings

        ```sh
         $ pulumi import elasticstack:index/elasticsearchIndex:ElasticsearchIndex my_index <cluster_uuid>/<index_name>
        ```

        :param str resource_name: The name of the resource.
        :param ElasticsearchIndexArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ElasticsearchIndexArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElasticsearchIndexAliasArgs']]]]] = None,
                 elasticsearch_connection: Optional[pulumi.Input[pulumi.InputType['ElasticsearchIndexElasticsearchConnectionArgs']]] = None,
                 mappings: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 settings: Optional[pulumi.Input[pulumi.InputType['ElasticsearchIndexSettingsArgs']]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ElasticsearchIndexArgs.__new__(ElasticsearchIndexArgs)

            __props__.__dict__["aliases"] = aliases
            __props__.__dict__["elasticsearch_connection"] = elasticsearch_connection
            __props__.__dict__["mappings"] = mappings
            __props__.__dict__["name"] = name
            __props__.__dict__["settings"] = settings
            __props__.__dict__["id"] = None
            __props__.__dict__["settings_raw"] = None
        super(ElasticsearchIndex, __self__).__init__(
            'elasticstack:index/elasticsearchIndex:ElasticsearchIndex',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            aliases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElasticsearchIndexAliasArgs']]]]] = None,
            elasticsearch_connection: Optional[pulumi.Input[pulumi.InputType['ElasticsearchIndexElasticsearchConnectionArgs']]] = None,
            id: Optional[pulumi.Input[str]] = None,
            mappings: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            settings: Optional[pulumi.Input[pulumi.InputType['ElasticsearchIndexSettingsArgs']]] = None,
            settings_raw: Optional[pulumi.Input[str]] = None) -> 'ElasticsearchIndex':
        """
        Get an existing ElasticsearchIndex resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ElasticsearchIndexAliasArgs']]]] aliases: Aliases for the index.
        :param pulumi.Input[pulumi.InputType['ElasticsearchIndexElasticsearchConnectionArgs']] elasticsearch_connection: Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        :param pulumi.Input[str] id: Internal identifier of the resource
        :param pulumi.Input[str] mappings: Mapping for fields in the index.
               If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
               **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        :param pulumi.Input[str] name: Name of the index you wish to create.
        :param pulumi.Input[pulumi.InputType['ElasticsearchIndexSettingsArgs']] settings: Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
               **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        :param pulumi.Input[str] settings_raw: All raw settings fetched from the cluster.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ElasticsearchIndexState.__new__(_ElasticsearchIndexState)

        __props__.__dict__["aliases"] = aliases
        __props__.__dict__["elasticsearch_connection"] = elasticsearch_connection
        __props__.__dict__["id"] = id
        __props__.__dict__["mappings"] = mappings
        __props__.__dict__["name"] = name
        __props__.__dict__["settings"] = settings
        __props__.__dict__["settings_raw"] = settings_raw
        return ElasticsearchIndex(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def aliases(self) -> pulumi.Output[Optional[Sequence['outputs.ElasticsearchIndexAlias']]]:
        """
        Aliases for the index.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter(name="elasticsearchConnection")
    def elasticsearch_connection(self) -> pulumi.Output[Optional['outputs.ElasticsearchIndexElasticsearchConnection']]:
        """
        Used to establish connection to Elasticsearch server. Overrides environment variables if present.
        """
        return pulumi.get(self, "elasticsearch_connection")

    @property
    @pulumi.getter
    def id(self) -> pulumi.Output[str]:
        """
        Internal identifier of the resource
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def mappings(self) -> pulumi.Output[Optional[str]]:
        """
        Mapping for fields in the index.
        If specified, this mapping can include: field names, field data types (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-types.html), mapping parameters (https://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-params.html).
        **NOTE:** changing datatypes in the existing *mappings* will force index to be re-created.
        """
        return pulumi.get(self, "mappings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the index you wish to create.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> pulumi.Output[Optional['outputs.ElasticsearchIndexSettings']]:
        """
        Configuration options for the index. See, https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#index-modules-settings.
        **NOTE:** Static index settings (see: https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules.html#*static*index_settings) can be only set on the index creation and later cannot be removed or updated - *apply* will return error
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="settingsRaw")
    def settings_raw(self) -> pulumi.Output[str]:
        """
        All raw settings fetched from the cluster.
        """
        return pulumi.get(self, "settings_raw")

